bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  stepSize  =  interface.stepSize()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interface.stepSize()  -  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interface.stepSize()  -  1;	  int    stepSize    =    interface.stepSize();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2	[BUG]  [BUGGY]  int  stepSize  =  interface.stepSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interface.stepSize()  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interface.stepSize()  +  1;	  int    stepSize    =    interface.stepSize();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
3	[BUG]  [BUGGY]  int  stepSize  =  dt.stepSize();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  dt.stepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  dt.stepSize();	  int    stepSize    =    interface.stepSize();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
4	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interpolator.stepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interpolator.stepSize();	  int    stepSize    =    interface.stepSize();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
5	[BUG]  [BUGGY]  final  double  stepSize  =  interpolator.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interpolator.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interpolator.getEventTime();	  final    double    stepSize    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
6	[BUG]  [BUGGY]  final  double  stepSize  =  dt.getEventTime();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  dt.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  dt.getEventTime();	  final    double    stepSize    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
7	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getEventTime();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interface.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interface.getEventTime();	  final    double    stepSize    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
8	[BUG]  [BUGGY]  final  double  stepSize  =  interfaceManager.getEventTime();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interfaceManager.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interfaceManager.getEventTime();	  final    double    stepSize    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
9	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yTmp[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yTmp[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yTmp[1][j];  }	  for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
10	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
11	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
12	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stepSize;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  /  stepSize;	  final    double    dt    =    interface.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
13	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  +  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  +  stepStart;	  final    double    dt    =    interface.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
14	[BUG]  [BUGGY]  final  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  final    double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stepSize;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  *  stepSize;	  final    double    dt    =    interface.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
16	[BUG]  [BUGGY]  final  double  dt  =  interface.getTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getTime()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getTime()  /  stepStart;	  final    double    dt    =    interface.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
17	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
18	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStep()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep()  /  stepStart;	  final    double    dt    =    interface.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
19	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStep()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep()  *  stepStart;	  final    double    dt    =    interface.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
20	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStep()  -  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep()  -  stepSize;	  final    double    dt    =    interface.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
21	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  /  stepStart;	  final    double    dt    =    interpolator.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
22	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  *  stepStart;	  final    double    dt    =    interpolator.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
23	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  -  stepSize;	  final    double    dt    =    interpolator.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
24	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep()  +  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  +  stepStart;	  final    double    dt    =    interpolator.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
25	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
26	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
27	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
28	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  final    double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
29	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  dt,  stepStart);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  dt,  stepStart);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  dt,  stepStart);	  int    stepSize    =    processStep(t0,    yTmp,    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
30	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  dt);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  dt);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  yTmp,  dt);	  int    stepSize    =    processStep(t0,    yTmp,    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
31	[BUG]  [BUGGY]  int  stepSize  =  processStep(dt,  yTmp,  stepStart);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(dt,  yTmp,  stepStart);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(dt,  yTmp,  stepStart);	  int    stepSize    =    processStep(t0,    yTmp,    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
32	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  stepStart,  sum);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  stepStart,  sum);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  yTmp,  stepStart,  sum);	  int    stepSize    =    processStep(t0,    yTmp,    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
33	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
34	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  dt.doubleValue()  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  dt.doubleValue()  +  1;	  double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
35	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue()  *  k;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  dt.doubleValue()  *  k;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  dt.doubleValue()  *  k;	  double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
36	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  dt.doubleValue()  +  2;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  dt.doubleValue()  +  2;	  double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
37	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  vices.add(interpolator.getStepInterpolator(),  sum);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  vices.add(interpolator.getStepInterpolator(),  sum);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	vices.add(interpolator.getStepInterpolator(),  sum);	  vices.add(interpolator.getStepInterpolator());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
40	[BUG]  [BUGGY]  vices.add(interpolator.getRawInterpolator());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  vices.add(interpolator.getRawInterpolator());  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	vices.add(interpolator.getRawInterpolator());	  vices.add(interpolator.getStepInterpolator());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
41	[BUG]  [BUGGY]  vices.add(interpolator.evaluateStep(rki));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  vices.add(interpolator.evaluateStep(rki));  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	vices.add(interpolator.evaluateStep(rki));	  vices.add(interpolator.getStepInterpolator());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
42	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yTmp[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
43	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yTmp[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
44	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
45	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
46	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
47	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
48	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    stages;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
49	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    stages;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
50	[BUG]  [BUGGY]  int  stepSize  =  interfaces.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interfaces.size()  -  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interfaces.size()  -  1;	  int    stepSize    =    interfaces.size();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
51	[BUG]  [BUGGY]  int  stepSize  =  interfaces.size()  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interfaces.size()  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interfaces.size()  +  1;	  int    stepSize    =    interfaces.size();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
52	[BUG]  [BUGGY]  int  stepSize  =  interfaces.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interfaces.size()  -  2;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interfaces.size()  -  2;	  int    stepSize    =    interfaces.size();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
53	[BUG]  [BUGGY]  int  stepSize  =  interpolator.size();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interpolator.size();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interpolator.size();	  int    stepSize    =    interfaces.size();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
54	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
55	[BUG]  [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
56	[BUG]  [BUGGY]  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
57	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
58	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
59	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
60	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
61	[BUG]  [BUGGY]  luateSteps(t0,  j,  sum);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  j,  sum);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  sum);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
62	[BUG]  [BUGGY]  luateSteps(t0,  j,  subSteps);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  j,  subSteps);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  subSteps);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
63	[BUG]  [BUGGY]  luateSteps(t0,  l,  stages);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  l,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  l,  stages);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
64	[BUG]  [BUGGY]  luateSteps(t0,  j,  yTmp);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  j,  yTmp);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  yTmp);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
65	[BUG]  [BUGGY]  dt  =  prototype.evaluateStep(strategy);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.evaluateStep(strategy);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.evaluateStep(strategy);	  dt    =    prototype.evaluateStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
66	[BUG]  [BUGGY]  dt  =  prototype.evaluateStep(t0);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.evaluateStep(t0);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.evaluateStep(t0);	  dt    =    prototype.evaluateStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
67	[BUG]  [BUGGY]  dt  =  prototype.evaluateStep(nextStep);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.evaluateStep(nextStep);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.evaluateStep(nextStep);	  dt    =    prototype.evaluateStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
68	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stepSize;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  /  stepSize;	  final    double    dt    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
69	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  stepSize;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  *  stepSize;	  final    double    dt    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
70	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime();	  final    double    dt    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  final  double  dt  =  prototype.getEventTime();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  prototype.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  prototype.getEventTime();	  final    double    dt    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  final  double  dt  =  handler.getStep();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  handler.getStep();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  handler.getStep();	  final    double    dt    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
73	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stage;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  -  stage;	  final    double    dt    =    manager.getStep()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
74	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep()  /  stage;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getStep()  /  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep()  /  stage;	  final    double    dt    =    manager.getStep()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
75	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep()  -  stage;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStep()  -  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep()  -  stage;	  final    double    dt    =    manager.getStep()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
76	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getStep()  -  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep()  -  stepSize;	  final    double    dt    =    manager.getStep()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
77	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stage;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  /  stage;	  final    double    dt    =    interpolator.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
78	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  stage;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  *  stage;	  final    double    dt    =    interpolator.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
79	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
80	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
81	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
82	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yDotK[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  yDotK[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yDotK[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
83	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
84	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
85	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getEventTime()  /  stepStart;	  final    double    dt    =    interfaceManager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
86	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  *  stepSize;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  *  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getEventTime()  *  stepSize;	  final    double    dt    =    interfaceManager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
87	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
88	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
89	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
90	[BUG]  [BUGGY]  luateStep(t0,  l,  stages);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  l,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  l,  stages);	  luateStep(t0,    rki,    stages);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
91	[BUG]  [BUGGY]  luateStep(t0,  y,  stages);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  y,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  y,  stages);	  luateStep(t0,    rki,    stages);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
92	[BUG]  [BUGGY]  luateStep(t0,  rki,  sum);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  rki,  sum);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  rki,  sum);	  luateStep(t0,    rki,    stages);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
93	[BUG]  [BUGGY]  luateStep(t0,  j,  sum);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  sum);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  sum);	  luateStep(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
94	[BUG]  [BUGGY]  luateStep(t0,  j,  subSteps);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  subSteps);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  subSteps);	  luateStep(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
95	[BUG]  [BUGGY]  luateStep(t0,  j,  yTmp);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  yTmp);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  yTmp);	  luateStep(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
96	[BUG]  [BUGGY]  luateStep(t0,  j,  yTmp,  stages);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  yTmp,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  yTmp,  stages);	  luateStep(t0,    yTmp,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
97	[BUG]  [BUGGY]  luateStep(t0,  yTmp,  j,  sum);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  yTmp,  j,  sum);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  yTmp,  j,  sum);	  luateStep(t0,    yTmp,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
98	[BUG]  [BUGGY]  luateStep(t0,  y1,  j,  stages);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  y1,  j,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  y1,  j,  stages);	  luateStep(t0,    yTmp,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
99	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  dt);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  dt);	  int    stepSize    =    processStep(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
100	[BUG]  [BUGGY]  int  stepSize  =  processStep(rki,  t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(rki,  t0,  yTmp);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(rki,  t0,  yTmp);	  int    stepSize    =    processStep(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
101	[BUG]  [BUGGY]  int  stepSize  =  processStep(dt,  yTmp);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(dt,  yTmp);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(dt,  yTmp);	  int    stepSize    =    processStep(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
102	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  rki);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  rki);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  rki);	  int    stepSize    =    processStep(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
103	[BUG]  [BUGGY]  int  stepSize  =  dt.intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  dt.intValue()  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  dt.intValue()  +  1;	  int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
104	[BUG]  [BUGGY]  double  stepSize  =  dt.intValue();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  dt.intValue();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  dt.intValue();	  int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
105	[BUG]  [BUGGY]  int  stepSize  =  dt.intValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  dt.intValue()  -  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  dt.intValue()  -  1;	  int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
106	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
107	[BUG]  [BUGGY]  if(steps!=  null)  {  if(prototype!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  if(prototype!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  if(prototype!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
108	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
109	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
110	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    b[0]    *    t0[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
111	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
112	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
113	[BUG]  [BUGGY]  int  stepSize  =  interface.stepSize(t0,  l);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interface.stepSize(t0,  l);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interface.stepSize(t0,  l);	  int    stepSize    =    handler.stepSize(t0,    l);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
114	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize(t0,  l);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interpolator.stepSize(t0,  l);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interpolator.stepSize(t0,  l);	  int    stepSize    =    handler.stepSize(t0,    l);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
115	[BUG]  [BUGGY]  int  stepSize  =  prototype.stepSize(t0,  l);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  prototype.stepSize(t0,  l);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  prototype.stepSize(t0,  l);	  int    stepSize    =    handler.stepSize(t0,    l);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
116	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(t0,  k);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  handler.stepSize(t0,  k);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(t0,  k);	  int    stepSize    =    handler.stepSize(t0,    l);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
117	[BUG]  [BUGGY]  AssertionFailedError  t0  =  interpolator.getErrorHandler();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  interpolator.getErrorHandler();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  interpolator.getErrorHandler();	  AssertionFailedError    t0    =    handler.getErrorHandler();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
118	[BUG]  [BUGGY]  AssertionFailedError  t0  =  interface.getErrorHandler();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  interface.getErrorHandler();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  interface.getErrorHandler();	  AssertionFailedError    t0    =    handler.getErrorHandler();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
119	[BUG]  [BUGGY]  AssertionFailedError  t0  =  prototype.getErrorHandler();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  prototype.getErrorHandler();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  prototype.getErrorHandler();	  AssertionFailedError    t0    =    handler.getErrorHandler();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
120	[BUG]  [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  -  1;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t  =  manager.getEventTime()  -  1;	  AssertionFailedError    t    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
121	[BUG]  [BUGGY]  AssertionFailedError  t  =  manager.getStep();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t  =  manager.getStep();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t  =  manager.getStep();	  AssertionFailedError    t    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
122	[BUG]  [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  -  stepStart;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t  =  manager.getEventTime()  -  stepStart;	  AssertionFailedError    t    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
123	[BUG]  [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  /  2;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  /  2;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t  =  manager.getEventTime()  /  2;	  AssertionFailedError    t    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
124	[BUG]  [BUGGY]  while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
125	[BUG]  [BUGGY]  while(y.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(y.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(y.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
126	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
127	[BUG]  [BUGGY]  while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
128	[BUG]  [BUGGY]  char  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  char  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	char  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
129	[BUG]  [BUGGY]  boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
130	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepSize()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepSize()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepSize()  /  stepStart;	  final    double    dt    =    interpolator.getStepSize()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
131	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepSize()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepSize()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepSize()  *  stepStart;	  final    double    dt    =    interpolator.getStepSize()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
132	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  stepStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepSize()  -  stepStart  +  1;	  final    double    dt    =    interpolator.getStepSize()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
133	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepSize()  -  1;	  final    double    dt    =    interpolator.getStepSize()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
134	[BUG]  [BUGGY]  double  stepSize  =  b[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
135	[BUG]  [BUGGY]  int  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
136	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  -  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getEventTime()  -  stepSize;	  final    double    dt    =    manager.getEventTime()    -    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
137	[BUG]  [BUGGY]  while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
138	[BUG]  [BUGGY]  while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
139	[BUG]  [BUGGY]  while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
140	[BUG]  [BUGGY]  while(b.length  <  2)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  2)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  2)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
141	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    yTmp.length;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
142	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    yTmp.length;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
143	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  yDotK.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  yDotK.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  yDotK.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    yTmp.length;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
144	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
145	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
146	[BUG]  [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
147	[BUG]  [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
148	[BUG]  [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  1  <  <  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
149	[BUG]  [BUGGY]  int  stepSize  =  1  <  <  for(int  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  1  <  <  for(int  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  1  <  <  for(int  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
150	[BUG]  [BUGGY]  int  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
151	[BUG]  [BUGGY]  final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
152	[BUG]  [BUGGY]  int  stepSize  =  interpolator.getStepSize();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interpolator.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interpolator.getStepSize();	  int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
153	[BUG]  [BUGGY]  int  stepSize  =  interface.getStepSize();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interface.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interface.getStepSize();	  int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
154	[BUG]  [BUGGY]  int  stepSize  =  prototype.getStepSize();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  prototype.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  prototype.getStepSize();	  int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
155	[BUG]  [BUGGY]  int  stepSize  =  dt.getStepSize();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  dt.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  dt.getStepSize();	  int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
156	[BUG]  [BUGGY]  final  double  stepSize  =  interpolator.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interpolator.getEventTime()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interpolator.getEventTime()  /  stepStart;	  final    double    stepSize    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
157	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interface.getEventTime()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interface.getEventTime()  /  stepStart;	  final    double    stepSize    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
158	[BUG]  [BUGGY]  final  double  stepSize  =  dt.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  dt.getEventTime()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  dt.getEventTime()  /  stepStart;	  final    double    stepSize    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
159	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  dt;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  dt;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime()  /  dt;	  final    double    stepSize    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
160	[BUG]  [BUGGY]  double  stepSize  =  b[1]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[1]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[1]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[1]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
161	[BUG]  [BUGGY]  int  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[1]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
162	[BUG]  [BUGGY]  final  double  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[1]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
163	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    t0[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
164	[BUG]  [BUGGY]  float  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  float  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	float  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
165	[BUG]  [BUGGY]  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
166	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
167	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
168	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
169	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
170	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep();	  final    double    dt    =    interpolator.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
171	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  *  1;	  final    double    dt    =    interpolator.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
172	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize  ==  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
173	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
174	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
175	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(steps!=    null)    {    for(int    stepSize    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
176	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  t0;  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  t0;  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  t0;  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
177	[BUG]  [BUGGY]  double  stepSize  =  y[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  y[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  y[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
178	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  *  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  *  1;	  final    double    dt    =    interface.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
179	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
180	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
181	[BUG]  [BUGGY]  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
182	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
183	[BUG]  [BUGGY]  double  stepSize  =  t0  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
184	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
185	[BUG]  [BUGGY]  double  stepSize  =  y[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  y[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  y[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
186	[BUG]  [BUGGY]  float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
187	[BUG]  [BUGGY]  char  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  char  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	char  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
188	[BUG]  [BUGGY]  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
189	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    b.length;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
190	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  y.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  y.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  y.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    b.length;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
191	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stage;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  /  stage;	  final    double    dt    =    interface.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
192	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stage;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  *  stage;	  final    double    dt    =    interface.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
193	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
194	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
195	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
196	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
197	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stepStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  /  stepStart  +  1;	  final    double    dt    =    interpolator.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
198	[BUG]  [BUGGY]  double  stepSize  =  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    y[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
199	[BUG]  [BUGGY]  int  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    y[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
200	[BUG]  [BUGGY]  final  double  stepSize  =  interpolator.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interpolator.getEventTime()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interpolator.getEventTime()  *  stepStart;	  final    double    stepSize    =    manager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
201	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interface.getEventTime()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interface.getEventTime()  *  stepStart;	  final    double    stepSize    =    manager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
202	[BUG]  [BUGGY]  final  double  stepSize  =  dt.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  dt.getEventTime()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  dt.getEventTime()  *  stepStart;	  final    double    stepSize    =    manager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
203	[BUG]  [BUGGY]  float  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  float  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	float  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
204	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    t0[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
205	[BUG]  [BUGGY]  dt  =  prototype.getStep(sum);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(sum);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(sum);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
206	[BUG]  [BUGGY]  dt  =  prototype.getStep(strategy);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(strategy);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(strategy);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
207	[BUG]  [BUGGY]  dt  =  prototype.getStep(k);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(k);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(k);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
208	[BUG]  [BUGGY]  dt  =  prototype.getStep(j);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(j);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(j);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
209	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepSize();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepSize();	  final    double    dt    =    manager.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
210	[BUG]  [BUGGY]  final  double  dt  =  interface.getStepSize();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStepSize();	  final    double    dt    =    manager.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
211	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getStepSize();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getStepSize();	  final    double    dt    =    manager.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
212	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getStepSize();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interfaceManager.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getStepSize();	  final    double    dt    =    manager.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
213	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  *  stepSize;	  final    double    dt    =    manager.getEventTime()    /    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
214	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  stepSize;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime()  /  stepSize;	  final    double    dt    =    manager.getEventTime()    /    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
215	[BUG]  [BUGGY]  double  stepSize  =  t0  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
216	[BUG]  [BUGGY]  double  stepSize  =  y[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  y[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  y[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
217	[BUG]  [BUGGY]  while(b.length  >  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  >  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  >  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
218	[BUG]  [BUGGY]  while(j  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
219	[BUG]  [BUGGY]  while(j  <  stepSize)  {  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  stepSize)  {  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  stepSize)  {  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
220	[BUG]  [BUGGY]  while(b.length  <  yTmp.length)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  yTmp.length)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  yTmp.length)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
221	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getDestination();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getDestination();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getDestination();	  final    double    dt    =    interpolator.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
222	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
223	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stage  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stage  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  /  stage  +  1;	  final    double    dt    =    manager.getEventTime()    -    stage    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
224	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stage  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stage  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  -  stage  +  1;	  final    double    dt    =    manager.getEventTime()    -    stage    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
225	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepSize  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepSize  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  -  stepSize  +  1;	  final    double    dt    =    manager.getEventTime()    -    stage    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
226	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stage  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stage  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  *  stage  +  1;	  final    double    dt    =    manager.getEventTime()    -    stage    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
227	[BUG]  [BUGGY]  int  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
228	[BUG]  [BUGGY]  final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
229	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize(t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interpolator.stepSize(t0,  yTmp);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interpolator.stepSize(t0,  yTmp);	  int    stepSize    =    handler.stepSize(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
230	[BUG]  [BUGGY]  int  stepSize  =  interface.stepSize(t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interface.stepSize(t0,  yTmp);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interface.stepSize(t0,  yTmp);	  int    stepSize    =    handler.stepSize(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
231	[BUG]  [BUGGY]  int  stepSize  =  prototype.stepSize(t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  prototype.stepSize(t0,  yTmp);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  prototype.stepSize(t0,  yTmp);	  int    stepSize    =    handler.stepSize(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
232	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(t0,  dt);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  handler.stepSize(t0,  dt);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(t0,  dt);	  int    stepSize    =    handler.stepSize(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
233	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStep();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep();	  final    double    dt    =    manager.getStep();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
234	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getStep();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interfaceManager.getStep();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getStep();	  final    double    dt    =    manager.getStep();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
235	[BUG]  [BUGGY]  AssertionFailedError  t0  =  interpolator.getEventFailedError();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  interpolator.getEventFailedError();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  interpolator.getEventFailedError();	  AssertionFailedError    t0    =    handler.getEventFailedError();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
236	[BUG]  [BUGGY]  AssertionFailedError  t0  =  manager.getEventFailedError();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  manager.getEventFailedError();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  manager.getEventFailedError();	  AssertionFailedError    t0    =    handler.getEventFailedError();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
237	[BUG]  [BUGGY]  AssertionFailedError  t0  =  interface.getEventFailedError();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  interface.getEventFailedError();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  interface.getEventFailedError();	  AssertionFailedError    t0    =    handler.getEventFailedError();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
238	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
239	[BUG]  [BUGGY]  while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    yTmp.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
240	[BUG]  [BUGGY]  while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    yTmp.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
241	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
242	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[1][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
243	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
244	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
245	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stepStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  /  stepStart  +  1;	  final    double    dt    =    interface.getEventTime()    -    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
246	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepSize  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepSize  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stepSize  +  1;	  final    double    dt    =    interface.getEventTime()    -    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
247	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stepStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  *  stepStart  +  1;	  final    double    dt    =    interface.getEventTime()    -    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
248	[BUG]  [BUGGY]  final  double  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  final    double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
249	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
250	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
251	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
252	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  +  1;	  final    double    dt    =    interface.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
253	[BUG]  [BUGGY]  luateStep(t0,  yTmp,  stages);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  yTmp,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  yTmp,  stages);	  luateStep(t0,    rki,    stages);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
254	[BUG]  [BUGGY]  luateStep(t0,  rki,  prototype);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  rki,  prototype);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  rki,  prototype);	  luateStep(t0,    rki,    stages);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
255	[BUG]  [BUGGY]  int  stepSize  =  handler.getStepSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  handler.getStepSize()  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.getStepSize()  +  1;	  int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
256	[BUG]  [BUGGY]  int  stepSize  =  interfaces.getStepSize();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interfaces.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interfaces.getStepSize();	  int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
257	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  nSteps;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  nSteps;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  nSteps;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    stages;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
258	[BUG]  [BUGGY]  double  stepSize  =  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
259	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
260	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[1][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[1][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  yDotK[1][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
261	[BUG]  [BUGGY]  final  double  stepSize  =  interfaceManager.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interfaceManager.getEventTime()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interfaceManager.getEventTime()  *  stepStart;	  final    double    stepSize    =    manager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
262	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
263	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
264	[BUG]  [BUGGY]  double  stepSize  =  yTmp[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[1]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
265	[BUG]  [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  -  stage;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t  =  manager.getEventTime()  -  stage;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t  =  manager.getEventTime()  -  stage;	  AssertionFailedError    t    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
266	[BUG]  [BUGGY]  int  stepSize  =  interface.stepSize(j);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  interface.stepSize(j);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interface.stepSize(j);	  int    stepSize    =    interface.stepSize();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
267	[BUG]  [BUGGY]  float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	float  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
268	[BUG]  [BUGGY]  final  double  stepSize  =  handler.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  handler.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  handler.getEventTime();	  final    double    stepSize    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
269	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
270	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(t0,  yTmp,  k);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  handler.stepSize(t0,  yTmp,  k);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(t0,  yTmp,  k);	  int    stepSize    =    handler.stepSize(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
271	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(y0,  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  handler.stepSize(y0,  t);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(y0,  t);	  int    stepSize    =    handler.stepSize(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
272	[BUG]  [BUGGY]  AssertionFailedError  t0  =  manager.getErrorHandler();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  manager.getErrorHandler();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  manager.getErrorHandler();	  AssertionFailedError    t0    =    handler.getErrorHandler();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
273	[BUG]  [BUGGY]  double  stepSize  =  t0[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    b[0]    *    t0[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
274	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
275	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep()  -  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  -  1;	  final    double    dt    =    interpolator.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
276	[BUG]  [BUGGY]  double  stepSize  =  t0[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    t0[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
277	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    t0[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
278	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    yTmp[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
279	[BUG]  [BUGGY]  int  stepSize  =  dt.doubleValue();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  dt.doubleValue();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  dt.doubleValue();	  int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
280	[BUG]  [BUGGY]  luateStep(t0,  yTmp,  k,  stepSize));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  yTmp,  k,  stepSize));  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  yTmp,  k,  stepSize));	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
281	[BUG]  [BUGGY]  luateStep(t0,  yTmp,  k,  stepSize))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  yTmp,  k,  stepSize))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  yTmp,  k,  stepSize))  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
282	[BUG]  [BUGGY]  vices.add(interpolator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  vices.add(interpolator);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	vices.add(interpolator);	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
283	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yTmp[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
284	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yTmp[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
285	[BUG]  [BUGGY]  dt  =  prototype.getStep(nextStep);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(nextStep);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(nextStep);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
286	[BUG]  [BUGGY]  dt  =  prototype.getStep(t0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(t0);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(t0);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
287	[BUG]  [BUGGY]  if(manager!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(manager!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(manager!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
288	[BUG]  [BUGGY]  final  double  dt  =  stage.getEventTime()  /  manager;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  stage.getEventTime()  /  manager;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  stage.getEventTime()  /  manager;	  final    double    dt    =    manager.getEventTime()    /    stage;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
289	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  step);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  step);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  yTmp,  step);	  int    stepSize    =    processStep(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
290	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
291	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interfaceManager.getEventTime();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getEventTime();	  final    double    dt    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
292	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
293	[BUG]  [BUGGY]  double  stepSize  =  t0  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    y[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
294	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
295	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
296	[BUG]  [BUGGY]  double  stepSize  =  a  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  a  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  a  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
297	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStep()  -  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep()  -  1;	  final    double    dt    =    interface.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
298	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep()  -  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getStep()  -  stepStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep()  -  stepStart  +  1;	  final    double    dt    =    interface.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
299	[BUG]  [BUGGY]  while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  1)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    yTmp.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
300	[BUG]  [BUGGY]  while(j  <  b.length)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  b.length)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  b.length)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    yTmp.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
301	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(lastStep!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
302	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
303	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
304	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(lastStep!=  null)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
305	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(t0,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  handler.stepSize(t0,  j);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(t0,  j);	  int    stepSize    =    handler.stepSize(t0,    l);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
306	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
307	[BUG]  [BUGGY]  double  stepSize  =  t0  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
308	[BUG]  [BUGGY]  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
309	[BUG]  [BUGGY]  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
310	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
311	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepInterpolator();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepInterpolator();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepInterpolator();	  final    double    dt    =    interpolator.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
312	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
313	[BUG]  [BUGGY]  double  stepSize  =  t0  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
314	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep()  /  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getStep()  /  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep()  /  stepSize;	  final    double    dt    =    manager.getEventTime()    /    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
315	[BUG]  [BUGGY]  final  double  stepSize  =  t0  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  t0  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  t0  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  final    double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
316	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stageStart  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stageStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stageStart  +  1;	  final    double    dt    =    interface.getEventTime()    -    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
317	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stages  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stages  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stages  +  1;	  final    double    dt    =    interface.getEventTime()    -    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
318	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[1]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    yTmp.length;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
319	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  k;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
320	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  *  stage;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  *  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getEventTime()  *  stage;	  final    double    dt    =    interfaceManager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
321	[BUG]  [BUGGY]  double  stepSize  =  t0  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
322	[BUG]  [BUGGY]  luateSteps(t0,  j,  y);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  j,  y);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  y);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
323	[BUG]  [BUGGY]  luateSteps(t0,  j,  a);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  j,  a);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  a);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
324	[BUG]  [BUGGY]  luateSteps(t0,  j,  k);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  j,  k);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  k);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
325	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  y1,  stepStart);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  y1,  stepStart);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  y1,  stepStart);	  int    stepSize    =    processStep(t0,    yTmp,    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
326	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  j,  yTmp,  stepStart);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  j,  yTmp,  stepStart);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  j,  yTmp,  stepStart);	  int    stepSize    =    processStep(t0,    yTmp,    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
327	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
328	[BUG]  [BUGGY]  double  stepSize  =  t0  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
329	[BUG]  [BUGGY]  final  double  dt  =  managers.getEventTime()  /  stage;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  managers.getEventTime()  /  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  managers.getEventTime()  /  stage;	  final    double    dt    =    manager.getEventTime()    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
330	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep()  *  stage;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getStep()  *  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep()  *  stage;	  final    double    dt    =    manager.getEventTime()    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
331	[BUG]  [BUGGY]  while(j  <  stepSize)  {  if(shape!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  stepSize)  {  if(shape!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  stepSize)  {  if(shape!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
332	[BUG]  [BUGGY]  while(j  <  stepSize)  {  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(j  <  stepSize)  {  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(j  <  stepSize)  {  if(manager!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
333	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stage  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stage  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stage  +  1;	  final    double    dt    =    interface.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
334	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
335	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
336	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
337	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
338	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
339	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
340	[BUG]  [BUGGY]  while(y.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(y.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(y.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
341	[BUG]  [BUGGY]  luateStep(t0,  j,  t,  stages);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  t,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  t,  stages);	  luateStep(t0,    yTmp,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
342	[BUG]  [BUGGY]  luateStep(t0,  y0,  j,  stages);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  y0,  j,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  y0,  j,  stages);	  luateStep(t0,    yTmp,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
343	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepSize();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepSize();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	Integer  stepSize  =  getStepInterpolator().getStepSize();	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
344	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(interpolator.getEventTime());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  Integer  stepSize  =  getStep(interpolator.getEventTime());  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	Integer  stepSize  =  getStep(interpolator.getEventTime());	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
345	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(interpolator.getEventTime(),  stages);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  Integer  stepSize  =  getStep(interpolator.getEventTime(),  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	Integer  stepSize  =  getStep(interpolator.getEventTime(),  stages);	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
346	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(interpolator.getStep());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  Integer  stepSize  =  getStep(interpolator.getStep());  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	Integer  stepSize  =  getStep(interpolator.getStep());	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
347	[BUG]  [BUGGY]  final  double  stepSize  =  interfaceManager.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interfaceManager.getEventTime()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interfaceManager.getEventTime()  /  stepStart;	  final    double    stepSize    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
348	[BUG]  [BUGGY]  final  double  stepSize  =  interfacer.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interfacer.getEventTime()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interfacer.getEventTime()  /  stepStart;	  final    double    stepSize    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
349	[BUG]  [BUGGY]  final  double  stepSize  =  yTmp[0]  *  b[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  yTmp[0]  *  b[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  yTmp[0]  *  b[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  final    double    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
350	[BUG]  [BUGGY]  final  double  stepSize  =  y[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  y[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  y[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  final    double    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
351	[BUG]  [BUGGY]  final  double  dt  =  handler.getStepSize();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  handler.getStepSize();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  handler.getStepSize();	  final    double    dt    =    manager.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
352	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  yTmp[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    t0[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
353	[BUG]  [BUGGY]  final  double  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  final    double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
354	[BUG]  [BUGGY]  final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  final    double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
355	[BUG]  [BUGGY]  luateStep(t0,  j,  k);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  k);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  k);	  luateStep(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
356	[BUG]  [BUGGY]  luateStep(t0,  j,  y);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  y);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  y);	  luateStep(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
357	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep()  -  stage  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getStep()  -  stage  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep()  -  stage  +  1;	  final    double    dt    =    manager.getStep()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
358	[BUG]  [BUGGY]  if(strategy!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(strategy!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(strategy!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
359	[BUG]  [BUGGY]  AssertionFailedError  t0  =  handler.getStepInterpolator();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  handler.getStepInterpolator();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  handler.getStepInterpolator();	  AssertionFailedError    t0    =    handler.getEventFailedError();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
360	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
361	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
362	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
363	[BUG]  [BUGGY]  double  stepSize  =  a  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  a  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  a  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
364	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(t0,  l  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  handler.stepSize(t0,  l  +  1);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(t0,  l  +  1);	  int    stepSize    =    handler.stepSize(t0,    l);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
365	[BUG]  [BUGGY]  final  double  dt  =  handler.getDestination();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  handler.getDestination();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  handler.getDestination();	  final    double    dt    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
366	[BUG]  [BUGGY]  AssertionFailedError  t0  =  managers.getEventFailedError();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  managers.getEventFailedError();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  managers.getEventFailedError();	  AssertionFailedError    t0    =    handler.getEventFailedError();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
367	[BUG]  [BUGGY]  AssertionFailedError  t0  =  handler.getStep();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  AssertionFailedError  t0  =  handler.getStep();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  handler.getStep();	  AssertionFailedError    t0    =    handler.getEventFailedError();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
368	[BUG]  [BUGGY]  dt  =  prototype.getStep(step);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(step);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(step);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
369	[BUG]  [BUGGY]  dt  =  prototype.getStep(str);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.getStep(str);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(str);	  dt    =    prototype.getStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
370	[BUG]  [BUGGY]  double  stepSize  =  c  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  c  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  c  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
371	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
372	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];	  double    stepSize    =    yTmp[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
373	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  t0[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  t0[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  t0[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
374	[BUG]  [BUGGY]  luateStep(t0,  j,  c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  c);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  c);	  luateStep(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
375	[BUG]  [BUGGY]  luateStep(t0,  j,  a);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  a);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  a);	  luateStep(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
376	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  stages.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  stages.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  stages.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    yTmp.length;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
377	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    ytmp[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
378	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getStep()  -  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep()  -  stepStart;	  final    double    dt    =    manager.getStep()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
379	[BUG]  [BUGGY]  double  stepSize  =  t0.doubleValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  t0.doubleValue();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0.doubleValue();	  double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
380	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue()  +  stages;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  dt.doubleValue()  +  stages;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  dt.doubleValue()  +  stages;	  double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
381	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
382	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
383	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stage,  stepSize  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stage,  stepSize  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  -  stage,  stepSize  +  1;	  final    double    dt    =    manager.getEventTime()    -    stage    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
384	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  -  stepStart  +  1;	  final    double    dt    =    manager.getEventTime()    -    stage    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
385	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
386	[BUG]  [BUGGY]  while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  >  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
387	[BUG]  [BUGGY]  while(b.length  <  2)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  2)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  2)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
388	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
389	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
390	[BUG]  [BUGGY]  vices.add(manager.getStepInterpolator());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  vices.add(manager.getStepInterpolator());  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	vices.add(manager.getStepInterpolator());	  vices.add(interpolator.getStepInterpolator());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
391	[BUG]  [BUGGY]  vices.add(interpolator.getInterpolator());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  vices.add(interpolator.getInterpolator());  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	vices.add(interpolator.getInterpolator());	  vices.add(interpolator.getStepInterpolator());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
392	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
393	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
394	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getStep();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getStep();  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getStep();	  final    double    dt    =    manager.getStep();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
395	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep(t0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  manager.getStep(t0);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep(t0);	  final    double    dt    =    manager.getStep();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
396	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  0;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  0;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
397	[BUG]  [BUGGY]  double  stepSize  =  b[1]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[1]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[1]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[1]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
398	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stepStart  +  1;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  -  stepStart  +  1;	  final    double    dt    =    interpolator.getStep()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
399	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  ytmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  ytmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  ytmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
400	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getEventTime()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  interface.getEventTime()  -  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  interface.getEventTime()  -  stepSize;	  final    double    dt    =    interface.getEventTime()    -    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
401	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yTmp[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
402	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yTmp[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
403	[BUG]  [BUGGY]  boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
404	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
405	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  ytK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  ytK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  ytK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
406	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
407	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  y[0]  *  yDotK[0][j];  }	  if(steps!=    null)    {    for(int    stepSize    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
408	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	  if(steps!=    null)    {    for(int    stepSize    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
409	[BUG]  [BUGGY]  luateSteps(t0,  j,  c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateSteps(t0,  j,  c);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  c);	  luateSteps(t0,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
410	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  *  stage;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getEventTime()  *  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime()  *  stage;	  final    double    dt    =    manager.getEventTime()    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
411	[BUG]  [BUGGY]  double  stepSize  =  processStep(t0,  yTmp,  stepStart);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  processStep(t0,  yTmp,  stepStart);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  processStep(t0,  yTmp,  stepStart);	  int    stepSize    =    processStep(t0,    yTmp,    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
412	[BUG]  [BUGGY]  luateStep(t0,  j,  c,  stages);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  luateStep(t0,  j,  c,  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  c,  stages);	  luateStep(t0,    yTmp,    j,    stages);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
413	[BUG]  [BUGGY]  dt  =  prototype.evaluateStep(step);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.evaluateStep(step);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.evaluateStep(step);	  dt    =    prototype.evaluateStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
414	[BUG]  [BUGGY]  dt  =  prototype.evaluateStep(str);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.evaluateStep(str);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.evaluateStep(str);	  dt    =    prototype.evaluateStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
415	[BUG]  [BUGGY]  dt  =  prototype.evaluateStep(t0,  rki);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  dt  =  prototype.evaluateStep(t0,  rki);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.evaluateStep(t0,  rki);	  dt    =    prototype.evaluateStep(rki);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
416	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
417	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  stage;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  stage;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime()  /  stage;	  final    double    dt    =    manager.getEventTime()    /    stage;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
418	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  int  stepSize  =  processStep(t0,  j);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  j);	  int    stepSize    =    processStep(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
419	[BUG]  [BUGGY]  double  stepSize  =  processStep(t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  processStep(t0,  yTmp);  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  processStep(t0,  yTmp);	  int    stepSize    =    processStep(t0,    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
420	[BUG]  [BUGGY]  double  stepSize  =  c  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  c  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  c  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
421	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
422	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  step  =  1;  step  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
423	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int	  if(prototype!=    null)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
424	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  ytmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b[0]  *  ytmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  ytmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    b[0]    *    yTmp[1][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
425	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getStepSize()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getStepSize()  /  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getStepSize()  /  stepStart;	  final    double    stepSize    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
426	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(steps!=    null)    {    for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
427	[BUG]  [BUGGY]  boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	boolean  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  int    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
428	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepSize    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
429	[BUG]  [BUGGY]  if(b!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(b!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(b!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
430	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
431	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepInterpolator()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepInterpolator()  *  stepStart;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepInterpolator()  *  stepStart;	  final    double    dt    =    interpolator.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
432	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
433	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    y.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
434	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepSize()  -  stepSize;	  final    double    dt    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
435	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  final  double  stepSize  =  manager.getEventTime()  -  stepSize;  [BUGGY]      if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime()  -  stepSize;	  final    double    dt    =    manager.getEventTime()    -    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
436	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	  if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
437	[BUG]  [BUGGY]  while(b.length  <  stages)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  stages)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stages)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
438	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  steps;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
439	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  stage;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
440	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages);  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages);  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages);  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
441	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  0;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  0;  l  <  stages;  ++l)  {  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  0;  l  <  stages;  ++l)  {  }	  if(stepSize!=    1)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
442	[BUG]  [BUGGY]  double  stepSize  =  b.length  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  b.length  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b.length  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
443	[BUG]  [BUGGY]  double  stepSize  =  c  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  double  stepSize  =  c  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  c  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	  double    stepSize    =    t0    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
444	[BUG]  [BUGGY]  while(b.length  <  1)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  1)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  1)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
445	[BUG]  [BUGGY]  while(b.length  <  2)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {      [BUGGY]  while(b.length  <  2)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  2)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  while(b.length    <    stepSize)    {    if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
