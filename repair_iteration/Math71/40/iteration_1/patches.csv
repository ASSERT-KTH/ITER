bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
5	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
6	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
7	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getEventTime();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime();	  final    double    dt    =    manager.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  -  1;	  final    double    dt    =    manager.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getEventTime();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime();	  final    double    dt    =    manager.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
15	[BUG]  [BUGGY]  final  double  dt  =  handler.getEventTime();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  handler.getEventTime();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  handler.getEventTime();	  final    double    dt    =    manager.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  while(b.length  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
19	[BUG]  [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	while(b.length  <  stepSize)  {  for(int  stepStart  =  1;  stepStart  <  yTmp.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
20	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getEventTime()  /  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  /  stepStart;	  final    double    dt    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getEventTime()  *  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  *  stepStart;	  final    double    dt    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getStep()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStep()  -  stepStart;	  final    double    dt    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stepSize;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  -  stepSize;	  final    double    dt    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
25	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
26	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(prototype!=  null)  {  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
27	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepSize  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interface.getEventTime()  *  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  *  stepStart;	  final    double    dt    =    manager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  dt.doubleValue();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  dt.doubleValue();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  int  stepSize  =  dt.intValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  dt.intValue();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  dt.intValue();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  dt  =  prototype.evaluateStep(rki);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  dt  =  prototype.evaluateStep(rki);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.evaluateStep(rki);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  dt  =  prototype.getStep(rki);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  dt  =  prototype.getStep(rki);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	dt  =  prototype.getStep(rki);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  yTmp.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
36	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  b.length;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yTmp[0][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interface.getEventTime()  /  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  /  stepStart;	  final    double    dt    =    interface.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepSize;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stepSize;	  final    double    dt    =    interface.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stepSize;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stepSize;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  /  stepSize;	  final    double    dt    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
42	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
46	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
47	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stage;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stage;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  -  stage;	  final    double    dt    =    manager.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
48	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stage;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stage;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  /  stage;	  final    double    dt    =    manager.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stage;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stage;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stage;	  final    double    dt    =    manager.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stage;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stage;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  *  stage;	  final    double    dt    =    manager.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interface.getEventTime()  -  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  1;	  final    double    dt    =    interface.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepStart  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stepStart  +  1;	  final    double    dt    =    interface.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  vices.add(interpolator.getStepInterpolator());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  vices.add(interpolator.getStepInterpolator());  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	vices.add(interpolator.getStepInterpolator());	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  luateStep(t0,  yTmp,  j,  stages);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  luateStep(t0,  yTmp,  j,  stages);  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  yTmp,  j,  stages);	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  luateStep(t0,  j,  stages);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  luateStep(t0,  j,  stages);  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  j,  stages);	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  luateStep(t0,  rki,  stages);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  luateStep(t0,  rki,  stages);  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateStep(t0,  rki,  stages);	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
57	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
58	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
59	[BUG]  [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interfaceManager.getEventTime()  *  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interfaceManager.getEventTime()  *  stepStart;	  final    double    dt    =    manager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  AssertionFailedError  t  =  manager.getEventTime();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  AssertionFailedError  t  =  manager.getEventTime();  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t  =  manager.getEventTime();	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
61	[BUG]  [BUGGY]  AssertionFailedError  t0  =  handler.getEventFailedError();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  AssertionFailedError  t0  =  handler.getEventFailedError();  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  handler.getEventFailedError();	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
62	[BUG]  [BUGGY]  AssertionFailedError  t0  =  handler.getErrorHandler();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  AssertionFailedError  t0  =  handler.getErrorHandler();  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	AssertionFailedError  t0  =  handler.getErrorHandler();	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
63	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
65	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yTmp[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  yTmp[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
68	[BUG]  [BUGGY]  double  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[1]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
69	[BUG]  [BUGGY]  double  stepSize  =  t0  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  t0  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
70	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stage  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stage  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  -  stage  +  1;	  final    double    dt    =    manager.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
71	[BUG]  [BUGGY]  double  stepSize  =  t0  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  t0  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getStep();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep();	  final    double    dt    =    manager.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
73	[BUG]  [BUGGY]  int  stepSize  =  interface.stepSize();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  interface.stepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interface.stepSize();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  int  stepSize  =  handler.getStepSize();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  handler.getStepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.getStepSize();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  int  stepSize  =  interfaces.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  interfaces.size();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  interfaces.size();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  handler.stepSize(t0,  yTmp);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(t0,  yTmp);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
78	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  y.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  yTmp[1];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  double  stepSize  =  t0  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  t0  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  t0  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
81	[BUG]  [BUGGY]  luateSteps(t0,  j,  stages);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  luateSteps(t0,  j,  stages);  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	luateSteps(t0,  j,  stages);	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
82	[BUG]  [BUGGY]  double  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  y[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
83	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yTmp[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
84	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  ytmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yTmp[0];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interpolator.getStepSize()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getStepSize()  -  stepStart;	  final    double    dt    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
87	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
88	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
89	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepSize  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
90	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  t0[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  ytmp[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    i    =    1;    i    <    stages;    ++i)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	double  stepSize  =  b[0]  *  t0[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }	      double    stepSize    =    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    yDotK[l][j];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
93	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  processStep(t0,  yTmp);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  yTmp);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  int  stepSize  =  handler.stepSize(t0,  l);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  handler.stepSize(t0,  l);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  handler.stepSize(t0,  l);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  stepStart);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  int  stepSize  =  processStep(t0,  yTmp,  stepStart);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	int  stepSize  =  processStep(t0,  yTmp,  stepStart);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
96	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  stages;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
97	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    l;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
98	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  manager.getEventTime()  /  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime()  /  stepStart;	  final    double    dt    =    manager.getEventTime()    /    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
99	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  manager.getEventTime()  *  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime()  *  stepStart;	  final    double    dt    =    manager.getEventTime()    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
100	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stage;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
102	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
103	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	if(stepSize!=  1)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	      if(steps!=    null)    {    for(int    stepStart    =    1;    stepStart    <    b.length;    stepSize++)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
104	[BUG]  [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[1][j];  }	      if(steps    ==    null)    {    for(int    step    =    1;    step    <    0;    step++)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
105	[BUG]  [BUGGY]  final  double  dt  =  manager.getStep()  -  stage;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getStep()  -  stage;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStep()  -  stage;	  final    double    dt    =    manager.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepSize;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  -  stepSize;	  final    double    dt    =    manager.getEventTime()    -    stage;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  stepSize  =  manager.getEventTime();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  stepSize  =  manager.getEventTime();	  final    double    dt    =    manager.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
108	[BUG]  [BUGGY]  final  double  dt  =  manager.getStepSize();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  manager.getStepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getStepSize();	  final    double    dt    =    manager.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
109	[BUG]  [BUGGY]  final  double  dt  =  interface.getStep()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {    [BUGGY]  final  double  dt  =  interface.getStep()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getStep()  -  stepStart;	  final    double    dt    =    interface.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
