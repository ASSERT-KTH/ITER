projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t<t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t!=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,t);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,t,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,c,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c[0],0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getC();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,1,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,c.length+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalIntegerc=getInteger(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t0,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,c,0,t.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length>0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length!=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length==t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t!=c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==c;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,equations,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(t0.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(t0.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c[0],0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c[0],0,c.length+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,cs[0],0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t1,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,t);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0!=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t0.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t0.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,y0,t,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getIntValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getN();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length<t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,t.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y1,c,t);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c[0],0,c.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){System.arraycopy(c,0,c,0,c.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c==null){System.arraycopy(c,0,c,0,c.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){System.arraycopy(c,0,c,0,c.length);}else{System.arraycopy(t0,0,c.length+1,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c0,0,t0,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t!=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t<0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getC()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getTicks();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>>t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){sanityChecks(equations,t0,y0,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,t,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==lastStep;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==a;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0,y0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t0.length+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,c.length+1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y,c,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y1,c,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c.length==0){sanityChecks(equations,t0,y0,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,t,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=equations.get(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y,c,t);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,c,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStandardInteger();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t<=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length!=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length!=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>>0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,c.length+1,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getCurrentStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStep(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y,c,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,equations,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getTicks(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getCurrentTicks();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length<0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length<0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t0,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c0,0,t0,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalintc=getInteger(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalIntegerc=getInteger(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finaldoublec=getDouble(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalintc=getInteger(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,c.length+3);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103intc=equations.get(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,0,length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,k);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(y0.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(y0.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c0,0,t0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c0,0,t1,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,c0,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getN()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getCurrentInt();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0,y0,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103intc=equations.get(t0,y0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){System.arraycopy(t0,0,c,0,c.length);}else{System.arraycopy(t0,0,c.length+1,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,c,0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){System.arraycopy(c,0,c,0,c.length+1,c.length);}else{System.arraycopy(t0,0,c.length+1,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length<=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t<=c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103safeSanityChecks(equations,t0,y0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y1,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length==a;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.equals(a);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==a.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t!=a.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103intc=getInteger(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,cs,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,cs[0],0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,cs[0],0,c.length+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0!=t0.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0==t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0.length!=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103SanityChecks(equations,t0,y0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=equations.get(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=equations.get(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=equations.get(t0+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c[0],0,c.length-2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length<1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length<2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length<t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getIntValue()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getLongValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getNumberValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t0,0,t.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t0.length)+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length+t.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length!=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,equations,c);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,t,c);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,t,k);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,y0,t,equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,c,equations.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,1,c.length+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,1,t.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,y0,t,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y1,equations,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==loop;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=loop==lastStep;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==nextStep;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103intc=equations.get(t0,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,y0,t,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,equations.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y,equations,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==c.length+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length==t0.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t!=c.length+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,e,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,equations,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length!=t.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length>1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length>2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length>3;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStandardInteger(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getNumberInteger();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t1,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){System.arraycopy(c,0,c,0,c.length+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,b,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getC().length+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length==0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length==0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length==t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>t0.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>>t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getNumber();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c==t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c==t;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,t,t);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,1,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,c,0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,t,e.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,t0,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,1,c.length+3);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,t,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,t,equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length!=c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length==c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>=c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,1,c.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(y0,t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,dt.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,a.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length==c;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){sanityChecks(equations,t0,y,c,t);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length==1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length==2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c0,0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,t,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y1,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,t,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getCurrentIntValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getIntValue(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(stages,t0,y0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>>c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStandardEquations()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStandardInteger(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInteger(t0.length+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(t0,0,c,1,t.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0!=t1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length>=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalIntegerc=getInteger(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0,y1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Doublec=equations.get(t0,y0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){sanityChecks(equations,t0,t,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,c,k.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,t,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,t,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y1,c,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t>>0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStep(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStep(step);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,y0,c,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getTicks()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103setSanityChecks(equations,t0,y0,c.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c0,0,c,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=c.length>=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t0.length-1+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,c,y0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,cs,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(t0!=null){System.arraycopy(c,0,c,0,c.length);}else{System.arraycopy(t0,0,c.length+1,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(t0!=null){System.arraycopy(t0,0,c,0,c.length);}else{System.arraycopy(t0,0,c.length+1,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){System.arraycopy(t0,0,c,0,c.length);}else{System.arraycopy(t1,0,c.length+1,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t!=loop;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t<a;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(c,t0,y0,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(t0==t0){sanityChecks(c,t0,y0,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.equals(c);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0==c;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStepCount();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getStepInt();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,c,y0,c,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0.length,t);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c,0,c.length+1,t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0==0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t0,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0.length<t.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,a.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y0,c,length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null&&c.length>0){System.arraycopy(c,0,c,0,c.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(t>t0){sanityChecks(equations,t0,y0,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t!=nextStep;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t==step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0==a;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,t0,1,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getTick();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103intc=getInt(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(t0,y0,c,length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getT()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y,c,t,k);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,y,c,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getInt(t0.length-2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,cs[0],0,c.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c[0],0,c.length*2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getTicks(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0,t1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103doublec=equations.get(t0,k);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103System.arraycopy(c,0,c[0],0,c.length*1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0!=c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(t0!=c.length){sanityChecks(equations,t0,t,c.length);setEvaluations(equations);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103sanityChecks(equations,t0,c,t.length);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103if(c!=null){System.arraycopy(c,0,c,1,c.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length!=2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t.length!=1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103finalbooleanforward=t0!=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java103Integerc=getMinimumInteger();
