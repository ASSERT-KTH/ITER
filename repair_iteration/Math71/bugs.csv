bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] loop = false; [FE] AssertionFailedError [CONTEXT]  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      [BUGGY] loop = false; [BUGGY] } else {  stepSize = dt; } } else { loop = false; } }  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.7071067811865475	180	180	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      [BUGGY] [BUGGY] loop = false; } else {  stepSize = dt; } } else { loop = false; } }  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.7071067811865475	180	180	2	add	
3	[BUG] [BUGGY] loop = false; [FE] AssertionFailedError [CONTEXT]  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      [BUGGY] loop = false; [BUGGY] } else {  hNew = dt; } } else {  loop = false; } } else { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      [BUGGY] [BUGGY] loop = false; } else {  hNew = dt; } } else {  loop = false; } } else { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	add	
5	[BUG] [BUGGY] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { [BUGGY] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); [BUGGY] } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.4082482904638631	123	123	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { [BUGGY] [BUGGY] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.4082482904638631	123	123	2	add	
7	[BUG] [BUGGY] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { [BUGGY] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); [BUGGY] } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4082482904638631	217	217	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { [BUGGY] [BUGGY] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4082482904638631	217	217	2	add	
9	[BUG] [BUGGY] setEquations(equations); [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); [BUGGY] setEquations(equations); [BUGGY] resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	101	101	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); [BUGGY] [BUGGY] setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	101	101	2	add	
11	[BUG] [BUGGY] resetEvaluations(); [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); [BUGGY] resetEvaluations(); [BUGGY] final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	102	102	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); [BUGGY] [BUGGY] resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	102	102	2	add	
13	[BUG] [BUGGY] final boolean forward = t > t0; [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); [BUGGY] final boolean forward = t > t0; [BUGGY]   final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	103	103	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); [BUGGY] [BUGGY] final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	103	103	2	add	
15	[BUG] [BUGGY] final int stages = c.length + 1; [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  [BUGGY] final int stages = c.length + 1; [BUGGY] if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];   [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	106	106	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  [BUGGY] [BUGGY] final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];   [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	106	106	2	add	
17	[BUG] [BUGGY] if (y != y0) { [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; [BUGGY] if (y != y0) { [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	107	107	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; [BUGGY] [BUGGY] if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	107	107	2	add	
19	[BUG] [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); [BUGGY] } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	108	108	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { [BUGGY] [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	108	108	2	add	
21	[BUG] [BUGGY] final double[][] yDotK = new double[stages][]; [FE] AssertionFailedError [CONTEXT] sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } [BUGGY] final double[][] yDotK = new double[stages][]; [BUGGY] for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	110	110	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } [BUGGY] [BUGGY] final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	110	110	2	add	
23	[BUG] [BUGGY] for (int i = 0; i < stages; ++i) { [FE] AssertionFailedError [CONTEXT] setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; [BUGGY] for (int i = 0; i < stages; ++i) { [BUGGY] yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	111	111	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; [BUGGY] [BUGGY] for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	111	111	2	add	
25	[BUG] [BUGGY] yDotK [i] = new double[y0.length]; [FE] AssertionFailedError [CONTEXT] resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { [BUGGY] yDotK [i] = new double[y0.length]; [BUGGY] } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	112	112	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { [BUGGY] [BUGGY] yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	112	112	2	add	
27	[BUG] [BUGGY] final double[] yTmp = new double[y0.length]; [FE] AssertionFailedError [CONTEXT]  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } [BUGGY] final double[] yTmp = new double[y0.length]; [BUGGY]   AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	114	114	2	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } [BUGGY] [BUGGY] final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	114	114	2	add	
29	[BUG] [BUGGY] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [FE] AssertionFailedError [CONTEXT] System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; [BUGGY] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [BUGGY] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	118	118	2	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][]; for (int i = 0; i < stages; ++i) { yDotK [i] = new double[y0.length]; } final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; [BUGGY] [BUGGY] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	118	118	2	add	
31	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	125	125	2	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	125	125	2	add	
33	[BUG] [BUGGY] stepStart = t0; [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  [BUGGY] stepStart = t0; [BUGGY] stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  [BUGGY] [BUGGY] stepStart = t0; stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	add	
35	[BUG] [BUGGY] stepSize= forward ? step : -step; [FE] AssertionFailedError [CONTEXT] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; [BUGGY] stepSize= forward ? step : -step; [BUGGY] for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	129	129	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; [BUGGY] [BUGGY] stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	129	129	2	add	
37	[BUG] [BUGGY] for (StepHandler handler : stepHandlers) { [FE] AssertionFailedError [CONTEXT] rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; stepSize= forward ? step : -step; [BUGGY] for (StepHandler handler : stepHandlers) { [BUGGY] handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift();  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	130	130	2	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; stepSize= forward ? step : -step; [BUGGY] [BUGGY] for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift();  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	130	130	2	add	
39	[BUG] [BUGGY] CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [FE] AssertionFailedError [CONTEXT] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } [BUGGY] CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [BUGGY] boolean lastStep = false;  while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {   [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	133	133	2	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward); } interpolator.storeTime(t0);  stepStart = t0; stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } [BUGGY] [BUGGY] CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {   [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	133	133	2	add	
41	[BUG] [BUGGY] boolean lastStep = false; [FE] AssertionFailedError [CONTEXT] } interpolator.storeTime(t0);  stepStart = t0; stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [BUGGY] boolean lastStep = false; [BUGGY]   while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	134	134	2	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } interpolator.storeTime(t0);  stepStart = t0; stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [BUGGY] [BUGGY] boolean lastStep = false;  while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	134	134	2	add	
43	[BUG] [BUGGY] while (!lastStep) { [FE] AssertionFailedError [CONTEXT]  stepStart = t0; stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  [BUGGY] while (!lastStep) { [BUGGY]  interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	137	137	2	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  stepStart = t0; stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  [BUGGY] [BUGGY] while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	137	137	2	add	
45	[BUG] [BUGGY] interpolator.shift(); [FE] AssertionFailedError [CONTEXT] stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { [BUGGY] interpolator.shift(); [BUGGY]  for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	139	139	2	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] stepSize= forward ? step : -step; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { [BUGGY] [BUGGY] interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	139	139	2	add	
47	[BUG] [BUGGY] for (boolean loop = true; loop;) { [FE] AssertionFailedError [CONTEXT] handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [BUGGY] for (boolean loop = true; loop;) { [BUGGY]   computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	141	141	2	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [BUGGY] [BUGGY] for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	141	141	2	add	
49	[BUG] [BUGGY] computeDerivatives(stepStart, y, yDotK[0]); [FE] AssertionFailedError [CONTEXT] boolean lastStep = false;  while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {  [BUGGY] computeDerivatives(stepStart, y, yDotK[0]); [BUGGY]   for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	144	144	2	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean lastStep = false;  while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {  [BUGGY] [BUGGY] computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	144	144	2	add	
51	[BUG] [BUGGY] for (int k = 1; k < stages; ++k) { [FE] AssertionFailedError [CONTEXT] while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  [BUGGY] for (int k = 1; k < stages; ++k) { [BUGGY]  for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	147	147	2	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (!lastStep) { interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  [BUGGY] [BUGGY] for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	147	147	2	add	
53	[BUG] [BUGGY] for (int j = 0; j < y0.length; ++j) { [FE] AssertionFailedError [CONTEXT] interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { [BUGGY] for (int j = 0; j < y0.length; ++j) { [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	149	149	2	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] interpolator.shift(); for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { [BUGGY] [BUGGY] for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	149	149	2	add	
55	[BUG] [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; [FE] AssertionFailedError [CONTEXT] for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; [BUGGY] for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	150	150	2	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [BUGGY] [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	150	150	2	add	
57	[BUG] [BUGGY] for (int l = 1; l < k; ++l) { [FE] AssertionFailedError [CONTEXT] for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; [BUGGY] for (int l = 1; l < k; ++l) { [BUGGY] sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }   [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	151	151	2	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (boolean loop = true; loop;) {  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; [BUGGY] [BUGGY] for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }   [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	151	151	2	add	
59	[BUG] [BUGGY] sum += a[k-1][l] * yDotK[l][j]; [FE] AssertionFailedError [CONTEXT]  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [BUGGY] sum += a[k-1][l] * yDotK[l][j]; [BUGGY] } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	152	152	2	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [BUGGY] [BUGGY] sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	152	152	2	add	
61	[BUG] [BUGGY] yTmp[j] = y[j] + stepSize * sum; [FE] AssertionFailedError [CONTEXT] computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } [BUGGY] yTmp[j] = y[j] + stepSize * sum; [BUGGY] } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	154	154	2	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] computeDerivatives(stepStart, y, yDotK[0]);  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } [BUGGY] [BUGGY] yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	154	154	2	add	
63	[BUG] [BUGGY] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [FE] AssertionFailedError [CONTEXT] for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } [BUGGY] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [BUGGY]  }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	157	157	2	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } [BUGGY] [BUGGY] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	157	157	2	add	
65	[BUG] [BUGGY] for (int j = 0; j < y0.length; ++j) { [FE] AssertionFailedError [CONTEXT] sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  [BUGGY] for (int j = 0; j < y0.length; ++j) { [BUGGY] double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	162	162	2	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  [BUGGY] [BUGGY] for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	162	162	2	add	
67	[BUG] [BUGGY] double sum= b[0] * yDotK[0][j]; [FE] AssertionFailedError [CONTEXT] } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { [BUGGY] double sum= b[0] * yDotK[0][j]; [BUGGY] for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { [BUGGY] [BUGGY] double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	add	
69	[BUG] [BUGGY] for (int l = 1; l < stages; ++l) { [FE] AssertionFailedError [CONTEXT] yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; [BUGGY] for (int l = 1; l < stages; ++l) { [BUGGY] sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	164	164	2	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; [BUGGY] [BUGGY] for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	164	164	2	add	
71	[BUG] [BUGGY] sum+= b[l] * yDotK[l][j]; [FE] AssertionFailedError [CONTEXT] } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { [BUGGY] sum+= b[l] * yDotK[l][j]; [BUGGY] } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	165	165	2	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { [BUGGY] [BUGGY] sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	165	165	2	add	
73	[BUG] [BUGGY] yTmp[j] = y[j] + stepSize * sum; [FE] AssertionFailedError [CONTEXT] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } [BUGGY] yTmp[j] = y[j] + stepSize * sum; [BUGGY] }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {    [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	167	167	2	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } [BUGGY] [BUGGY] yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {    [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	167	167	2	add	
75	[BUG] [BUGGY] interpolator.storeTime(stepStart + stepSize); [FE] AssertionFailedError [CONTEXT]  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  [BUGGY] interpolator.storeTime(stepStart + stepSize); [BUGGY] if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	171	171	2	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  [BUGGY] [BUGGY] interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	171	171	2	add	
77	[BUG] [BUGGY] if (manager.evaluateStep(interpolator)) { [FE] AssertionFailedError [CONTEXT] for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); [BUGGY] if (manager.evaluateStep(interpolator)) { [BUGGY] final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); [BUGGY] [BUGGY] if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	add	
79	[BUG] [BUGGY] final double dt = manager.getEventTime() - stepStart; [FE] AssertionFailedError [CONTEXT] double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { [BUGGY] final double dt = manager.getEventTime() - stepStart; [BUGGY] if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else {  stepSize = dt; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { [BUGGY] [BUGGY] final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else {  stepSize = dt; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	add	
81	[BUG] [BUGGY] if (Math.abs(dt) <= Math.ulp(stepStart)) { [FE] AssertionFailedError [CONTEXT] for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; [BUGGY] if (Math.abs(dt) <= Math.ulp(stepStart)) { [BUGGY]      loop = false; } else {  stepSize = dt; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; [BUGGY] [BUGGY] if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else {  stepSize = dt; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	add	
83	[BUG] [BUGGY] stepSize = dt; [FE] AssertionFailedError [CONTEXT] if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else {  [BUGGY] stepSize = dt; [BUGGY] } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	183	183	2	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (Math.abs(dt) <= Math.ulp(stepStart)) {      loop = false; } else {  [BUGGY] [BUGGY] stepSize = dt; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	183	183	2	add	
85	[BUG] [BUGGY] } else { [FE] AssertionFailedError [CONTEXT]      loop = false; } else {  stepSize = dt; } [BUGGY] } else { [BUGGY] loop = false; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	185	185	2	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]      loop = false; } else {  stepSize = dt; } [BUGGY] [BUGGY] } else { loop = false; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	185	185	2	add	
87	[BUG] [BUGGY] loop = false; [FE] AssertionFailedError [CONTEXT]     loop = false; } else {  stepSize = dt; } } else { [BUGGY] loop = false; [BUGGY] } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	186	186	2	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]     loop = false; } else {  stepSize = dt; } } else { [BUGGY] [BUGGY] loop = false; } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	186	186	2	add	
89	[BUG] [BUGGY] final double nextStep = stepStart + stepSize; [FE] AssertionFailedError [CONTEXT]  stepSize = dt; } } else { loop = false; } }  [BUGGY] final double nextStep = stepStart + stepSize; [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	192	192	2	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  stepSize = dt; } } else { loop = false; } }  [BUGGY] [BUGGY] final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	192	192	2	add	
91	[BUG] [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); [FE] AssertionFailedError [CONTEXT] stepSize = dt; } } else { loop = false; } }  final double nextStep = stepStart + stepSize; [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); [BUGGY] manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep;  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	193	193	2	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] stepSize = dt; } } else { loop = false; } }  final double nextStep = stepStart + stepSize; [BUGGY] [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep;  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	193	193	2	add	
93	[BUG] [BUGGY] manager.stepAccepted(nextStep, y); [FE] AssertionFailedError [CONTEXT] } } else { loop = false; } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); [BUGGY] manager.stepAccepted(nextStep, y); [BUGGY] lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	194	194	2	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } } else { loop = false; } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); [BUGGY] [BUGGY] manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) { [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	194	194	2	add	
95	[BUG] [BUGGY] lastStep = manager.stop(); [FE] AssertionFailedError [CONTEXT] } else { loop = false; } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); [BUGGY] lastStep = manager.stop(); [BUGGY]   interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	195	195	2	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { loop = false; } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); [BUGGY] [BUGGY] lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) {  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	195	195	2	add	
97	[BUG] [BUGGY] interpolator.storeTime(nextStep); [FE] AssertionFailedError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  [BUGGY] interpolator.storeTime(nextStep); [BUGGY] for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) {   computeDerivatives(stepStart, y, yDotK[0]); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	198	198	2	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  [BUGGY] [BUGGY] interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) {   computeDerivatives(stepStart, y, yDotK[0]); } [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	198	198	2	add	
99	[BUG] [BUGGY] for (StepHandler handler : stepHandlers) { [FE] AssertionFailedError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); [BUGGY] for (StepHandler handler : stepHandlers) { [BUGGY] handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) {   computeDerivatives(stepStart, y, yDotK[0]); }  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	199	199	2	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); [BUGGY] [BUGGY] for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (manager.reset(stepStart, y) && ! lastStep) {   computeDerivatives(stepStart, y, yDotK[0]); }  [CLASS] RungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean forward lastStep loop CombinedEventsManager manager double[] b c y y0 yTmp double dt nextStep step stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int i j k l stages FirstOrderDifferentialEquations equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	199	199	2	add	
