projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,yTmp,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y1,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,stages,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(stages>0){for(inti=0;i<stages;++i){System.arraycopy(y0,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(stages>0){for(inti=0;i<stages;++i){System.arraycopy(y0,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(stages>0){for(inti=0;i<stages;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,yTmp,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,yTmp,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,ytmp,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,c,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+2][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+2][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][2];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][0];for(inti=0,j=0;i<c.length;++i){if(!sanityChecks(equations,t0,y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]a=newdouble[c.length+1][0];for(inti=0;i<c.length;++i){b[i]=b[i][1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y1,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,y,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+2][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+3][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(y0,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(c,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(stages,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(y1,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,ytmp,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,b,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){yDotK[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y1,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y2,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(y0,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(c,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(stages,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(strategy,0,strategy,0,strategy.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y1,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+2][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+3][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][2];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,stages,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages+1][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,yTmp,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][1];System.arraycopy(y0,0,yTmp,0,stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][1];for(inti=0;i<c.length;++i){setEvaluations(equations,t0,y0,t,y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=c.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=c.length+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integerc=getInteger(t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integery0=getInt(c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c.length,0,y,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c0,0,y,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages+1][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,stages,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,ystages,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,0,yTmp.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(t0,y0,c,y);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(t0,y0,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(equations,t0,y0,c,y);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,newRungeKuttaIntegrator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,newRungeKuttaStepInterpolator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Set<String>ystages=Sets.newHashSet();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,newRungeKuttaEquations());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,0,c.length+1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(stages!=null){for(inti=0;i<stages;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108yTmp[i]=newdouble[stages.length+1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(stages!=null){for(inti=0;i<Stages.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y1,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,y,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y1,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages*1][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(equations,t0,y0,c,forward);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(equations,t0,forward,c,y);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,ystages,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+2][2];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.reportCodeChange();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Stages[]stages=c.getStandardEquations();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(equations,t0,y0,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(t0,y0,c,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(c,y0,t,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(y0,t0,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,1,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(y0,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages.length;++i){System.arraycopy(y0,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages][0];for(inti=0,j=0;i<c.length;++i){if(!sanityChecks(equations,t0,y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+2][0];for(inti=0,j=0;i<c.length;++i){if(!sanityChecks(equations,t0,y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages+1][0];for(inti=0,j=0;i<c.length;++i){if(!sanityChecks(equations,t0,y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){yDotK[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<y0.length;++i){yDotK[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalinti=0;i<stages;++i){yDotK[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,ytmp,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c0,0,y,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c0,0,y1,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y2,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(strategy,0,strategy,0,strategy.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(strategy,0,strategies,0,strategy.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<y0.length;++i){System.arraycopy(strategy,0,strategy,0,strategy.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108yTmp[i]=newdouble[stages.length+2];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108yTmp[i]=newdouble[stages.length+3];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108yTmp[i]=newdouble[c.length+1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<yTmp.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){yTmp[i]=newdouble[c.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(stages,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<y0.length;++i){System.arraycopy(stages,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=1;i<stages;++i){System.arraycopy(stages,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,ytmp,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,yTmp,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,yTmp,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,yTmp,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,b,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,b,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,0,c.length+1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,c,0,c.length+1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=y0.length+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=c.length+2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=c.length+3;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][0];System.arraycopy(y0,0,yTmp,0,stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][1];System.arraycopy(y0,0,yTmp,0,stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][2];System.arraycopy(y0,0,yTmp,0,stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+3][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages.length;++i){System.arraycopy(c,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<y0.length;++i){System.arraycopy(c,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=1;i<stages;++i){System.arraycopy(c,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(c.length==y0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(c.length==1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(c.length==0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(c.length==t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integerc=getInteger(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integerc=getInteger(stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integerc=getInteger(y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integerc=getInteger(1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+4][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,rki,newRungeKuttaEquations());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,y0,newRungeKuttaEquations());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,0,t.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,1,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(y0,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<y0.length;++i){System.arraycopy(y0,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalSet<String>ystages=Sets.newHashSet();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108List<String>ystages=Sets.newHashSet();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108ArrayList<String>ystages=Sets.newHashSet();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+4][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,yTmp,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+3][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,1,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,2,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(stages,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages.length;++i){System.arraycopy(stages,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,rki,newRungeKuttaStepInterpolator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,interpolator,newRungeKuttaStepInterpolator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]a=newdouble[c.length+2][0];for(inti=0;i<c.length;++i){b[i]=b[i][1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]a=newdouble[c.length+3][0];for(inti=0;i<c.length;++i){b[i]=b[i][1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]a=newdouble[c.length+1][1];for(inti=0;i<c.length;++i){b[i]=b[i][1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages*1][1];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages+1][2];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(yTmp,0,y0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y1,0,yTmp.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,y1,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y1,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,2,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y2,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<y0.length;++i){System.arraycopy(c,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=1;i<stages;++i){System.arraycopy(c,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integery0=getInt(c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integery0=getInt(c.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integery0=getInt(stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integery0=getInt(c.length,stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][1];for(inti=0;i<c.length;++i){setEvaluations(equations,t0,y0,t,y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][1];for(inti=0;i<c.length;++i){setEvaluations(equations,t0,y0,t,y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][0];for(inti=0;i<c.length;++i){setEvaluations(equations,t0,y0,t,y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(y1,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages.length;++i){System.arraycopy(y1,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,t0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,1,c.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=y0.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=y.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,rki,newRungeKuttaIntegrator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,y0,newRungeKuttaIntegrator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,newRungeKuttaIntegrator(),forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c.length,0,y0,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c.length,0,y,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,c,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,c,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,y0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(e,0,y0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c0,0,y0,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(equations,t0,y0,c,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(equations,t0,forward,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108yTmp[i]=newdouble[stages.length+4];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,1,c.length-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,newRenderingKuttaStepInterpolator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(stages==stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(stages!=stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(stages==0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Context.checkState(stages==t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages][0];for(inti=0,c=0;i<c.length;++i){if(!sanityChecks(equations,t0,y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages+1][0];for(inti=0,j=0;i<c.length;++i){if(!sanityChecks(equations,t0
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages][0];for(inti=0,j=0;i<c.length;++i){if(!sanityChecks(equations,t0
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,stages,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integerc=getInteger(stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integerc=getInteger(stages,t0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(c,0,strategy,0,c.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(stages,0,strategy,0,strategy.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integery0=getInt(stages,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Integery0=getInt(stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(c,0,y,0,c.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+2][2];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,newRungeKuttaEquations(),stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,stages,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108For(inti=0;i<stages;++i){System.arraycopy(stages,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,stages,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+2][1];System.arraycopy(y0,0,yTmp,0,stages.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,c.length,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,newRungeKuttaIntegrator(),stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(stages,0,y,0,c.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][2];for(inti=0;i<c.length;++i){setEvaluations(equations,t0,y0,t,y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][0];for(inti=0;i<c.length;++i){setEvaluations(equations,t0,y0,t,y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,c,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,t,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(stages,t0,y0,c,y);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(stages,t0,y0,c,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(forward){for(inti=0;i<stages.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(forward){for(inti=0;i<Stages.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(t0,y0,t,y);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages.length;++i){yDotK[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(forward){for(inti=0;i<stages;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,c,1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,yTmp,0,yTmp.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(y0,0,yTmp,0,yTmp.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]a=newdouble[b.length+1][0];for(inti=0;i<c.length;++i){b[i]=b[i][1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]a=newdouble[c.length+1][0];for(inti=0;i<y0;++i){b[i]=b[i][1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,t,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,y0,0,t.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages+2][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,stages,0,c.length+1,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c0,0,y0,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Set<String>ystages=Sets.newHashSet(stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,0,c.length+1,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,yTmp,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(c.length==0){finaldouble[][]a=newdouble[c.length+1][0];for(inti=0;i<c.length;++i){b[i]=b[i][1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,0,yTmp.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){System.arraycopy(c,0,y,0,stages[i].length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,stages,0,y0.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<stages;++i){yDotK[i]=newdouble[stages.length+2];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108NeighborTraversal.traverse(compiler,c,this,newRungeKuttaStepInterpolator());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[t0.length+2][0];
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(stages!=null){for(inti=0;i<stages.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(yTmp!=null){for(inti=0;i<Stages.length;++i){yTmp[i]=newdouble[stages.length+1];}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[stages.length+1][1];for(inti=0;i<c.length;++i){setEvaluations(equations,t0,y0,c,y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c0,0,y,1,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(t0,0,ytmp,0,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108inti=0;i<stages;++i){System.arraycopy(y0,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108sanityChecks(equations,t0,y,c,forward);setEvaluations(equations);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finalintstages=c.length/1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<k;++i){System.arraycopy(c,0,y,0,y0.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108Set<String>ystages=Sets.newLinkedHashSet();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=0;i<c.length;++i){System.arraycopy(strategy,0,stratégie,0,strategy.length);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y,1,c.length+2);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108for(inti=1;i<stages;++i){System.arraycopy(stages,0,y,0,stages[i]);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,dt,0,c.length+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108System.arraycopy(c,0,y0,5,c.length);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108finaldouble[][]yTmp=newdouble[c.length+1][0];for(inti=0,j=0;i<c.length;++i){if(!sanityChecks(equations,t0
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java108if(yTmp!=null){for(inti=0;i<stages;++i){yTmp[i]=newdouble[stages.length+1];}
