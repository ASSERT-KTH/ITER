bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    j    =    0;    j    <    stage.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
2	[BUG]  [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    j    =    0;    j    <    stage.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
3	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  stages.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  stages.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    j    =    0;    j    <    stage.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
4	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  1);	  Integer    step    =    getStep(interpolator.getStep(),    0);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
5	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  2);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  2);	  Integer    step    =    getStep(interpolator.getStep(),    0);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
6	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  3);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  3);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  3);	  Integer    step    =    getStep(interpolator.getStep(),    0);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
7	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(t0,  sum))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(t0,  sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(t0,  sum))  {	  if(!interpolator.evaluateStep(t0))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()!=  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
9	[BUG]  [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()!=  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
10	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
11	[BUG]  [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
12	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  1;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
13	[BUG]  [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(interpolator!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
14	[BUG]  [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=	  if(interpolator!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
15	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(rki);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(rki);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(rki);	  Integer    dt    =    interpolator.getStep(stack);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
16	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getRange(),  stages);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getRange(),  stages);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getRange(),  stages);	  Integer    step    =    getStep(interpolator.getStep(),    stages);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
17	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getRawStep(),  stages);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getRawStep(),  stages);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getRawStep(),  stages);	  Integer    step    =    getStep(interpolator.getStep(),    stages);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
18	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getTick(),  stages);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getTick(),  stages);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getTick(),  stages);	  Integer    step    =    getStep(interpolator.getStep(),    stages);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(str.equals(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(str.equals(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(str.equals(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yFields.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(str.equals(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
23	[BUG]  [BUGGY]  Integer  dt  =  interface.getStep(j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStep(j);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStep(j);	  Integer    dt    =    interface.getStep(sum);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
24	[BUG]  [BUGGY]  Integer  dt  =  interface.getStep(sum  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStep(sum  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStep(sum  +  1);	  Integer    dt    =    interface.getStep(sum);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
25	[BUG]  [BUGGY]  Integer  dt  =  interface.getStep(y0.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStep(y0.length);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStep(y0.length);	  Integer    dt    =    interface.getStep(sum);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
26	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()!=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()!=  1)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
27	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  1)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
28	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  ==  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  ==  1)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
29	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps()  *  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps()  *  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps()  *  1;	  Integer    dt    =    interpolator.getSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
30	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps()  [0];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps()  [0];  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps()  [0];	  Integer    dt    =    interpolator.getSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
31	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(j  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(j  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(j  +  1);	  Integer    dt    =    interpolator.getStep(j);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(j,  sum);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(j,  sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(j,  sum);	  Integer    dt    =    interpolator.getStep(j);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(interpolator!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  loop  =  true;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  loop  =  true;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  loop  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
38	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep()  /  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep()  /  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep()  /  1);	  Integer    step    =    getStep(interpolator.getStep()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
39	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!interpolator.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
40	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  <  1)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
41	[BUG]  [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  <  1)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
42	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep()  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep()  -  1  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep()  -  1  +  1);	  Integer    step    =    getStep(interpolator.getStep()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
43	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getRangeInterpolator();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  stepStart  =  interpolator.getRangeInterpolator();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  stepStart  =  interpolator.getRangeInterpolator();	  Integer    stepStart    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
44	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getRawInterpolator();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  stepStart  =  interpolator.getRawInterpolator();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  stepStart  =  interpolator.getRawInterpolator();	  Integer    stepStart    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
45	[BUG]  [BUGGY]  Integer  stepStart  =  interface.getStepInterpolator();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  stepStart  =  interface.getStepInterpolator();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  stepStart  =  interface.getStepInterpolator();	  Integer    stepStart    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
46	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy))  {	  if(interpolator.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
47	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
48	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
49	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
50	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  j  =  0  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  j  =  0  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  j  =  0	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
51	[BUG]  [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
52	[BUG]  [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
53	[BUG]  [BUGGY]  if(!manager.evaluateStep(strategy))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(strategy))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(strategy))  {	  if(manager.evaluateStep(strategy))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getRangeInterpolator();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getRangeInterpolator();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getRangeInterpolator();	  Integer    dt    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
55	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getInitializingStep();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getInitializingStep();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getInitializingStep();	  Integer    dt    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
56	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getInitializingStepInterpolator();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getInitializingStepInterpolator();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getInitializingStepInterpolator();	  Integer    dt    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
57	[BUG]  [BUGGY]  if(Math.abs(yTmp)  <  Math.abs(y0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(yTmp)  <  Math.abs(y0))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(yTmp)  <  Math.abs(y0))  {	  if(Math.abs(yTmp)    <    =    Math.abs(yTmp))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
58	[BUG]  [BUGGY]  if(Math.abs(y0)  <  =  Math.abs(yTmp))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(y0)  <  =  Math.abs(yTmp))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(y0)  <  =  Math.abs(yTmp))  {	  if(Math.abs(yTmp)    <    =    Math.abs(yTmp))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
59	[BUG]  [BUGGY]  if(Math.abs(y0)  <  Math.abs(yTmp))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(y0)  <  Math.abs(yTmp))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(y0)  <  Math.abs(yTmp))  {	  if(Math.abs(yTmp)    <    =    Math.abs(yTmp))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
60	[BUG]  [BUGGY]  if(Math.abs(yTmp)  <  =  Math.abs(y0))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(yTmp)  <  =  Math.abs(y0))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(yTmp)  <  =  Math.abs(y0))  {	  if(Math.abs(yTmp)    <    =    Math.abs(yTmp))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
61	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
62	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  1;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
65	[BUG]  [BUGGY]  Integer  dt  =  interface.getSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getSteps()  +  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getSteps()  +  1;	  Integer    dt    =    interface.getSteps();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
66	[BUG]  [BUGGY]  Integer  dt  =  interface.getSteps()  -  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getSteps()  -  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getSteps()  -  1;	  Integer    dt    =    interface.getSteps();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
67	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getEventTime()  *  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getEventTime()  *  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getEventTime()  *  1;	  Integer    dt    =    interpolator.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  final  Integer  dt  =  interpolator.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  final  Integer  dt  =  interpolator.getEventTime()  -  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	final  Integer  dt  =  interpolator.getEventTime()  -  1;	  Integer    dt    =    interpolator.getEventTime()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  if(interpolator.evaluateStep(sum))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(sum))  {	  if(interpolator.evaluateStep(t0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0,  sum))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0,  sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0,  sum))  {	  if(interpolator.evaluateStep(t0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(interpolator)&&!prototype.equals(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(interpolator)&&!prototype.equals(interpolator))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(interpolator)&&!prototype.equals(interpolator))  {	  if(!manager.evaluateStep(interpolator)&&!prototype.equals(interpolator))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
72	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)||!prototype.equals(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)||!prototype.equals(interpolator))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)||!prototype.equals(interpolator))  {	  if(!manager.evaluateStep(interpolator)&&!prototype.equals(interpolator))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
73	[BUG]  [BUGGY]  if(!manager.evaluateStep(t0)&&!prototype.equals(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(t0)&&!prototype.equals(interpolator))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(t0)&&!prototype.equals(interpolator))  {	  if(!manager.evaluateStep(interpolator)&&!prototype.equals(interpolator))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
74	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  stepStart  =  interpolator.getEventTime()  -  1;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  stepStart  =  interpolator.getEventTime()  -  1;	  Integer    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
75	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getStep();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  stepStart  =  interpolator.getStep();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  stepStart  =  interpolator.getStep();	  Integer    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
76	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interfacepolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interfacepolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interfacepolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interfacepolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
77	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interfacepolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interfacepolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interfacepolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interfacepolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
78	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interfacepolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interfacepolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interfacepolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interfacepolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
79	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interfacepolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interfacepolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interfacepolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interfacepolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
80	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)||  sum  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)||  sum  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)||  sum  >=  0)  {	  if(manager.evaluateStep(step)||    sum    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
81	[BUG]  [BUGGY]  if(manager.evaluateStep(t0)||  sum  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(t0)||  sum  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(t0)||  sum  >=  0)  {	  if(manager.evaluateStep(step)||    sum    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
82	[BUG]  [BUGGY]  if(manager.evaluateStep(strategy)||  sum  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(strategy)||  sum  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(strategy)||  sum  >=  0)  {	  if(manager.evaluateStep(step)||    sum    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
83	[BUG]  [BUGGY]  if(manager.evaluateStep(step)&&  sum  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(step)&&  sum  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(step)&&  sum  >=  0)  {	  if(manager.evaluateStep(step)||    sum    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
84	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
85	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(t0)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (interpolator.evaluateStep(t0)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (interpolator.evaluateStep(t0)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (interpolator.evaluateStep(strategy)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
86	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (interpolator.evaluateStep(strategy)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
87	[BUG]  [BUGGY]  if(!stopTime  &&  manager.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!stopTime  &&  manager.evaluateStep(interpolator))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!stopTime  &&  manager.evaluateStep(interpolator))  {	  if(!stopTime    &&    manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
88	[BUG]  [BUGGY]  if(!stopTime  &&  manager.evaluateStep(strategy))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!stopTime  &&  manager.evaluateStep(strategy))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!stopTime  &&  manager.evaluateStep(strategy))  {	  if(!stopTime    &&    manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
89	[BUG]  [BUGGY]  if(!stopTime  &&  manager.evaluateStep(t0))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!stopTime  &&  manager.evaluateStep(t0))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!stopTime  &&  manager.evaluateStep(t0))  {	  if(!stopTime    &&    manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
90	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
91	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
95	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
96	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
97	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
98	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(t0)&&!steps.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(t0)&&!steps.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(t0)&&!steps.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
99	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(strategy)&&!steps.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(strategy)&&!steps.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(strategy)&&!steps.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
100	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(steps)&&!steps.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(steps)&&!steps.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(steps)&&!steps.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
101	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
102	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
103	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
104	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
105	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()  >  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
106	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()  >  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
107	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()  >  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
108	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()  >  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
109	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(y0,  sum);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(y0,  sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(y0,  sum);	  Integer    dt    =    interpolator.getStep(y0);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
110	[BUG]  [BUGGY]  if  (manager.evaluateStep(prototype)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (manager.evaluateStep(prototype)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (manager.evaluateStep(prototype)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (manager.evaluateStep(prototype)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
111	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  ==  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
112	[BUG]  [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  ==  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
113	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  manager.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  manager.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  manager.getEventTime()  ==  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
114	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=	  if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
115	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  ==  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
116	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  ==  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
117	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  ==  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
118	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  ==  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
119	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
120	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
121	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
122	[BUG]  [BUGGY]  if  (manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (manager.evaluateStep(t0)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
123	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(rki))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(rki))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(rki))  {	  if(!interpolator.evaluateStep(strategy))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
124	[BUG]  [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(steps!=    null)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
125	[BUG]  [BUGGY]  if  (manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
126	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
127	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (interpolator.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (interpolator.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
128	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(t0)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (interpolator.evaluateStep(t0)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (interpolator.evaluateStep(t0)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (interpolator.evaluateStep(strategy)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
129	[BUG]  [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAME)||  interpolator.evaluateStep(strategy)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAME)||  interpolator.evaluateStep(strategy)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (isEnabled(Feature.QUOTE_FIELD_NAME)||  interpolator.evaluateStep(strategy)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (interpolator.evaluateStep(strategy)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
130	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
131	[BUG]  [BUGGY]  if(manager!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
132	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
133	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(k  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(k  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(k  +  1);	  Integer    dt    =    interpolator.getStep(k);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  break;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  break;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
138	[BUG]  [BUGGY]  if(manager.evaluateStep(t0)||  stepStart  <  =  Math.abs(stepEnd))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(t0)||  stepStart  <  =  Math.abs(stepEnd))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(t0)||  stepStart  <  =  Math.abs(stepEnd))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
139	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)||  stepStart  <  =  Math.abs(stepEnd))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)||  stepStart  <  =  Math.abs(stepEnd))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)||  stepStart  <  =  Math.abs(stepEnd))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
140	[BUG]  [BUGGY]  if(manager.evaluateStep(step)&&  stepStart  <  =  Math.abs(stepEnd))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(step)&&  stepStart  <  =  Math.abs(stepEnd))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(step)&&  stepStart  <  =  Math.abs(stepEnd))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
141	[BUG]  [BUGGY]  if(manager.evaluateStep(step)||  stepSize  <  =  Math.abs(stepEnd))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(step)||  stepSize  <  =  Math.abs(stepEnd))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(step)||  stepSize  <  =  Math.abs(stepEnd))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
142	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
143	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  sum);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  sum);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  sum);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
144	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  stage);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  stage);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  stage);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
145	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  prototype);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  prototype);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  prototype);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
150	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
151	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
152	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
153	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
154	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(y0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(y0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(y0);	  Integer    dt    =    interpolator.getSteps(t0);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
155	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(k);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(k);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(k);	  Integer    dt    =    interpolator.getSteps(t0);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
156	[BUG]  [BUGGY]  Integer  dt  =  interface.getSteps(t0);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getSteps(t0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getSteps(t0);	  Integer    dt    =    interpolator.getSteps(t0);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
157	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  getEventsManager(interpolator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  getEventsManager(interpolator);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  getEventsManager(interpolator);	  CombinedEventsManager    manager    =    getEventsManager();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
158	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(y0.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(y0.length);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(y0.length);	  Integer    dt    =    interpolator.getSteps(sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
159	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(j);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(j);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(j);	  Integer    dt    =    interpolator.getSteps(sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
160	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(yTmp);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(yTmp);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(yTmp);	  Integer    dt    =    interpolator.getSteps(sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
161	[BUG]  [BUGGY]  Integer  dt  =  interface.getSteps(sum);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getSteps(sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getSteps(sum);	  Integer    dt    =    interpolator.getSteps(sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
162	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stage,  sum);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stage,  sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  stage,  sum);	  Integer    step    =    getStep(interpolator.getStep(),    stage);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
163	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stage  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stage  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  stage  +  1);	  Integer    step    =    getStep(interpolator.getStep(),    stage);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
164	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  sum);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  sum);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  sum);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator.getEventsManager());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
165	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  prototype);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  prototype);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  prototype);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator.getEventsManager());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
166	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  stage);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  stage);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  stage);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator.getEventsManager());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
167	[BUG]  [BUGGY]  int  stepSize  =  interpolator.getStepSize()  -  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  stepSize  =  interpolator.getStepSize()  -  1;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  stepSize  =  interpolator.getStepSize()  -  1;	  int    stepSize    =    interpolator.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
168	[BUG]  [BUGGY]  int  stepSize  =  interpolator.getStepSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  stepSize  =  interpolator.getStepSize()  +  1;  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  stepSize  =  interpolator.getStepSize()  +  1;	  int    stepSize    =    interpolator.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
169	[BUG]  [BUGGY]  int  stepSize  =  interpolator.getRangeSize();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  stepSize  =  interpolator.getRangeSize();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  stepSize  =  interpolator.getRangeSize();	  int    stepSize    =    interpolator.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
170	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
171	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
172	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
173	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
174	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
175	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
176	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
177	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
178	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
179	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
180	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
181	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
182	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(sum  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(sum  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(sum  +  1);	  Integer    dt    =    interpolator.getStep(sum);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
183	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
184	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
185	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(sum)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(sum)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(sum)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!interpolator.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
186	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
187	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(strategy)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
188	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME,  sum))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME,  sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME,  sum))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
190	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
191	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getDestinationSteps();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getDestinationSteps();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getDestinationSteps();	  Integer    dt    =    interpolator.getRangeSteps();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
192	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getRangeSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getRangeSteps()  +  1;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getRangeSteps()  +  1;	  Integer    dt    =    interpolator.getRangeSteps();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
193	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getInitializingSteps();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getInitializingSteps();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getInitializingSteps();	  Integer    dt    =    interpolator.getRangeSteps();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
194	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
195	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
196	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
197	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
198	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
199	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  >  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
200	[BUG]  [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  >  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
201	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  manager.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  manager.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  manager.getEventTime()  >  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
202	[BUG]  [BUGGY]  if(!manager.evaluateStep(sum)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(sum)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(sum)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
203	[BUG]  [BUGGY]  if(interpolator  ==  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator  ==  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator  ==  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps    ==    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
204	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(t0,  sum);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(t0,  sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(t0,  sum);	  Integer    dt    =    interpolator.getStep(sum,    t0);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
205	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(y0,  t0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(y0,  t0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(y0,  t0);	  Integer    dt    =    interpolator.getStep(sum,    t0);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
206	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(sum,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(sum,  0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(sum,  0);	  Integer    dt    =    interpolator.getStep(sum,    t0);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
207	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(sum,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(sum,  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(sum,  1);	  Integer    dt    =    interpolator.getStep(sum,    t0);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
208	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getEventTime()  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getEventTime()  +  2;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getEventTime()  +  2;	  Integer    dt    =    interpolator.getEventTime()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
209	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  sum  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  sum  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  sum  +  1);	  Integer    step    =    getStep(interpolator.getStep(),    sum);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
210	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  step);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  step);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  step);	  Integer    step    =    getStep(interpolator.getStep(),    sum);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
211	[BUG]  [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)-  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)-  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(sum)  <  Math.abs(sum)-  1)  {	  if(Math.abs(sum)    <    =    Math.abs(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
212	[BUG]  [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  Math.abs(sum))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  Math.abs(sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  Math.abs(sum))  {	  if(Math.abs(sum)    <    =    Math.abs(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
213	[BUG]  [BUGGY]  if(Math.abs(sum)  <  =  Math.abs(sum)||  Math.abs(sum)  <  =  Math.abs(sum))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(sum)  <  =  Math.abs(sum)||  Math.abs(sum)  <  =  Math.abs(sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(sum)  <  =  Math.abs(sum)||  Math.abs(sum)  <  =  Math.abs(sum))  {	  if(Math.abs(sum)    <    =    Math.abs(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
214	[BUG]  [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  Math.abs(yTmp[0]))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  Math.abs(yTmp[0]))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  Math.abs(yTmp[0]))  {	  if(Math.abs(sum)    <    =    Math.abs(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
215	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
216	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
217	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
218	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
219	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interface.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
220	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interface.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
221	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interface.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
222	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interface.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
223	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)||  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
224	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)||  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
225	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)||  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
226	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)||  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  loop  =  false;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  Math.abs(yTmp[i]))  {  loop  =  false;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
231	[BUG]  [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(interpolator)&&  interface.getEventTime()  >=  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
232	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(nextStep,  sum);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(nextStep,  sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(nextStep,  sum);	  Integer    dt    =    interpolator.getStep(nextStep);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
233	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(nextStep  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(nextStep  +  1);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(nextStep  +  1);	  Integer    dt    =    interpolator.getStep(nextStep);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
234	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  >=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interpolator.getEventTime()  >=  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
235	[BUG]  [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  >=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(prototype)&&  interpolator.getEventTime()  >=  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
236	[BUG]  [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  >=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(rki)&&  interpolator.getEventTime()  >=  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
237	[BUG]  [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  >=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(strategy)&&  interpolator.getEventTime()  >=  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
238	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(y0,  sum);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(y0,  sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(y0,  sum);	  Integer    dt    =    interpolator.getSteps(sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
239	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)&&  interfacepolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(interpolator)&&  interfacepolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(interpolator)&&  interfacepolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interfacepolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
241	[BUG]  [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {	  if(interpolator!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  break;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
243	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(y0,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(y0,  j);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(y0,  j);	  Integer    dt    =    interpolator.getStep(j);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
244	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)&&  interfacepolator.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)&&  interfacepolator.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)&&  interfacepolator.getEventTime()  ==  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(yTmp[i]))  {  continue	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(str.equals(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
246	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
247	[BUG]  [BUGGY]  if  (manager.evaluate(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (manager.evaluate(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (manager.evaluate(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
248	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(sum,  t0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(sum,  t0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(sum,  t0);	  Integer    dt    =    interpolator.getSteps(t0);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
249	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(nextStep);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(nextStep);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(nextStep);	  Integer    dt    =    interpolator.getSteps(t0);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
250	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  platform);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  platform);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator,  platform);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
251	[BUG]  [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)+  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)+  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(sum)  <  Math.abs(sum)+  1)  {	  if(Math.abs(sum)    <    =    Math.abs(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
252	[BUG]  [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  =  Math.abs(sum))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  =  Math.abs(sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(sum)  <  Math.abs(sum)||  Math.abs(sum)  <  =  Math.abs(sum))  {	  if(Math.abs(sum)    <    =    Math.abs(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
253	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
254	[BUG]  [BUGGY]  if(manager.evaluateStep(t0)||  stepEnd  <  =  Math.abs(stepStart))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(t0)||  stepEnd  <  =  Math.abs(stepStart))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(t0)||  stepEnd  <  =  Math.abs(stepStart))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
255	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
256	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
257	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
258	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++	  if(steps!=    null)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
259	[BUG]  [BUGGY]  if(manager!=  null  &&!manager.evaluateStep(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager!=  null  &&!manager.evaluateStep(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager!=  null  &&!manager.evaluateStep(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
260	[BUG]  [BUGGY]  if(!manager.evaluate(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluate(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluate(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
261	[BUG]  [BUGGY]  if(!manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
262	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(strates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(strates);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(strates);	  Integer    dt    =    interpolator.getStep(step);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
263	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStepInterpolator(t0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStepInterpolator(t0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStepInterpolator(t0);	  Integer    dt    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
264	[BUG]  [BUGGY]  Integer  dt  =  interface.getStepInterpolator();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStepInterpolator();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStepInterpolator();	  Integer    dt    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
265	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(nextStep,  t0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(nextStep,  t0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(nextStep,  t0);	  Integer    dt    =    interpolator.getStep(sum,    t0);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
266	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(sum,  yTmp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(sum,  yTmp);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(sum,  yTmp);	  Integer    dt    =    interpolator.getStep(sum,    t0);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
267	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
268	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  yTmp.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  yTmp.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  yTmp.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
269	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  j  =  1  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  j  =  1  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  j  =  1	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
270	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
271	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  steps);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  steps);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  steps);	  Integer    step    =    getStep(interpolator.getStep(),    stages);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
272	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stageSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stageSize);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  stageSize);	  Integer    step    =    getStep(interpolator.getStep(),    stages);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
273	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(interpolator)&&  interface.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
274	[BUG]  [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  ==  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  ==  1)  {	  if(interpolator.evaluateStep(manager)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
275	[BUG]  [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  >=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(manager)&&  interpolator.getEventTime()  >=  1)  {	  if(interpolator.evaluateStep(manager)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
276	[BUG]  [BUGGY]  if(!stopTime  &&  manager.evaluateStep(step,  sum))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!stopTime  &&  manager.evaluateStep(step,  sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!stopTime  &&  manager.evaluateStep(step,  sum))  {	  if(!stopTime    &&    manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
277	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)&&!stepHandler.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)&&!stepHandler.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)&&!stepHandler.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
278	[BUG]  [BUGGY]  if(!manager.evaluate(interpolator)&&!steps.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluate(interpolator)&&!steps.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluate(interpolator)&&!steps.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
279	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)&&!stages.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)&&!stages.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)&&!stages.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
280	[BUG]  [BUGGY]  if(interpolator.evaluateStep(y0)&&  interpolator.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(y0)&&  interpolator.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(y0)&&  interpolator.getEventTime()  <  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
281	[BUG]  [BUGGY]  Integer  dt  =  interface.getSteps(j);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getSteps(j);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getSteps(j);	  Integer    dt    =    interface.getSteps();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
282	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(yTmp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(yTmp);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(yTmp);	  Integer    dt    =    interpolator.getStep(y0);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
283	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(str)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(str)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(str)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!interpolator.evaluateStep(str))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
284	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(y0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(y0))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(y0))  {	  if(!interpolator.evaluateStep(str))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
285	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(interpolator)&&  interpolator.getEventTime()  >  1)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
286	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  yTmp);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  yTmp);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  yTmp);	  Integer    step    =    getStep(interpolator.getStep(),    sum);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
287	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  k);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  k);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  k);	  Integer    step    =    getStep(interpolator.getStep(),    sum);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
288	[BUG]  [BUGGY]  if(math.abs(sum)  <  =  Math.abs(sum))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(math.abs(sum)  <  =  Math.abs(sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(math.abs(sum)  <  =  Math.abs(sum))  {	  if(!manager.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
289	[BUG]  [BUGGY]  if(!manager.evaluateStep(sum)&&!interpolator.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(sum)&&!interpolator.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(sum)&&!interpolator.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
290	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(interpolator!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
291	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
292	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[l]    *    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
293	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  yTmp.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  yTmp.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  yTmp.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
294	[BUG]  [BUGGY]  if(manager.evaluateStep(j))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(j))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(j))  {	  if(manager.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
295	[BUG]  [BUGGY]  if(manager.evaluateStep(sum)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(sum)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(sum)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(manager.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
296	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(interpolator.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
297	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)&&!property.equals(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)&&!property.equals(interpolator))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)&&!property.equals(interpolator))  {	  if(!manager.evaluateStep(interpolator)&&!prototype.equals(interpolator))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
298	[BUG]  [BUGGY]  if(!manager.evaluateStep(t0)&&!prototype.equals(t0))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(t0)&&!prototype.equals(t0))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(t0)&&!prototype.equals(t0))  {	  if(!manager.evaluateStep(interpolator)&&!prototype.equals(interpolator))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
299	[BUG]  [BUGGY]  if(!manager.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(step)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
300	[BUG]  [BUGGY]  if(interpolator.evaluateStep(y0)||  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(y0)||  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(y0)||  interpolator.getEventTime()  >  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
301	[BUG]  [BUGGY]  if(interpolator.evaluateStep(y0)||  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(y0)||  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(y0)||  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
302	[BUG]  [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
303	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  getEventsManager(null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  getEventsManager(null);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  getEventsManager(null);	  CombinedEventsManager    manager    =    getEventsManager();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
304	[BUG]  [BUGGY]  Integer  dt  =  interface.getStep(nextStep);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStep(nextStep);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStep(nextStep);	  Integer    dt    =    interface.getStep(sum);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
305	[BUG]  [BUGGY]  Integer  dt  =  interface.getStep(dt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStep(dt);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStep(dt);	  Integer    dt    =    interface.getStep(sum);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
306	[BUG]  [BUGGY]  Integer  dt  =  interface.getStep(y0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStep(y0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStep(y0);	  Integer    dt    =    interface.getStep(sum);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
307	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(stack,  sum);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(stack,  sum);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(stack,  sum);	  Integer    dt    =    interpolator.getStep(stack);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
308	[BUG]  [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
309	[BUG]  [BUGGY]  if(interpolator.evaluateStep(str))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(str))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(str))  {	  if(interpolator.evaluateStep(t0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
310	[BUG]  [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
312	[BUG]  [BUGGY]  if  (manager.evaluate(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (manager.evaluate(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (manager.evaluate(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
315	[BUG]  [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  >=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(nextStep)&&  interpolator.getEventTime()  >=  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
316	[BUG]  [BUGGY]  if(!manager.evaluate(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluate(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluate(interpolator)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
317	[BUG]  [BUGGY]  if(!manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(t0)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
318	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
319	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)||  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)||  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)||  interpolator.getEventTime()  >  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
320	[BUG]  [BUGGY]  if(interpolator.evaluateStep(str)||  interpolator.getEventTime()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(str)||  interpolator.getEventTime()  >  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(str)||  interpolator.getEventTime()  >  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
321	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)&&!prototype.isInstance(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)&&!prototype.isInstance(interpolator))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)&&!prototype.isInstance(interpolator))  {	  if(!manager.evaluateStep(interpolator)&&!prototype.equals(interpolator))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
322	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)&&!prototype.equals(other))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)&&!prototype.equals(other))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)&&!prototype.equals(other))  {	  if(!manager.evaluateStep(interpolator)&&!prototype.equals(interpolator))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
323	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(manager)&&    interpolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
324	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
325	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(step,  sum))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(step,  sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(step,  sum))  {	  if(!interpolator.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
326	[BUG]  [BUGGY]  if(math.abs(nextStep)  <  =  Math.abs(nextStep))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(math.abs(nextStep)  <  =  Math.abs(nextStep))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(math.abs(nextStep)  <  =  Math.abs(nextStep))  {	  if(!interpolator.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
327	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(step)||!interpolator.evaluateStep(step))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(step)||!interpolator.evaluateStep(step))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(step)||!interpolator.evaluateStep(step))  {	  if(!interpolator.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
328	[BUG]  [BUGGY]  int  i  =  0;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  i  =  0;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  i  =  0;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
329	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(step)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if  (interpolator.evaluateStep(step)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if  (interpolator.evaluateStep(step)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (interpolator.evaluateStep(strategy)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
330	[BUG]  [BUGGY]  int  stepSize  =  interface.getStepSize();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  stepSize  =  interface.getStepSize();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  stepSize  =  interface.getStepSize();	  int    stepSize    =    interpolator.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
331	[BUG]  [BUGGY]  if(!manager.evaluateStep(step,  sum))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(step,  sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(step,  sum))  {	  if(!manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
332	[BUG]  [BUGGY]  if(!manager.evaluateStep(step)&&!interpolator.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(step)&&!interpolator.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(step)&&!interpolator.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
333	[BUG]  [BUGGY]  if(manager.evaluateStep(t0)&&  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(t0)&&  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(t0)&&  interpolator.getEventTime()!=  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
334	[BUG]  [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  j  =  0;  j  <  y0.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    sum+=    b[    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
335	[BUG]  [BUGGY]  Integer  dt  =  interface.getRangeSteps();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getRangeSteps();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getRangeSteps();	  Integer    dt    =    interpolator.getRangeSteps();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
336	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)||  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)||  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)||  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
337	[BUG]  [BUGGY]  if(interpolator.evaluateStep(str)||  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(str)||  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(str)||  interpolator.getEventTime()  >=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
338	[BUG]  [BUGGY]  if(manager.evaluateStep(step)||  nextStep  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(step)||  nextStep  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(step)||  nextStep  >=  0)  {	  if(manager.evaluateStep(step)||    sum    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
339	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(interpolator)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(interpolator)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
340	[BUG]  [BUGGY]  if(Math.abs(yTmp)  <  Math.abs(y0)||  Math.abs(yTmp)  <  Math.abs(yTmp))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(yTmp)  <  Math.abs(y0)||  Math.abs(yTmp)  <  Math.abs(yTmp))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(yTmp)  <  Math.abs(y0)||  Math.abs(yTmp)  <  Math.abs(yTmp))  {	  if(Math.abs(yTmp)    <    =    Math.abs(yTmp))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
341	[BUG]  [BUGGY]  if(Math.abs(yTmp)  <  Math.abs(yTmp)||  Math.abs(yTmp)  <  Math.abs(yTmp))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(yTmp)  <  Math.abs(yTmp)||  Math.abs(yTmp)  <  Math.abs(yTmp))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(yTmp)  <  Math.abs(yTmp)||  Math.abs(yTmp)  <  Math.abs(yTmp))  {	  if(Math.abs(yTmp)    <    =    Math.abs(yTmp))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
342	[BUG]  [BUGGY]  Integer  dt  =  interface.getEventTime();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getEventTime();  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getEventTime();	  Integer    dt    =    interpolator.getEventTime()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
343	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interfacepolator.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interfacepolator.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interfacepolator.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interfacepolator.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
344	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(y0,  t0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(y0,  t0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(y0,  t0);	  Integer    dt    =    interpolator.getSteps(t0);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
345	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;	  if(steps!=    null)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
346	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
347	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
348	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(str.equals(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
349	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSteps;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  nSteps;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  nSteps;  ++i)  {  if(str.equals(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(str.equals(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
350	[BUG]  [BUGGY]  Integer  stepStart  =  manager.getEventTime();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  stepStart  =  manager.getEventTime();  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  stepStart  =  manager.getEventTime();	  Integer    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
351	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
352	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  >=  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  >=  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
353	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.evaluateStep(t0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(t0)||  interpolator.evaluateStep(t0))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(t0)||  interpolator.evaluateStep(t0))  {	  if(interpolator.evaluateStep(t0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
354	[BUG]  [BUGGY]  if(!manager.evaluateStep(t0)&&!steps.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(t0)&&!steps.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(t0)&&!steps.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
355	[BUG]  [BUGGY]  if(!manager.evaluateStep(steps)&&!steps.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(steps)&&!steps.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(steps)&&!steps.isEmpty())  {	  if(!manager.evaluateStep(interpolator)&&!steps.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
356	[BUG]  [BUGGY]  Integer  dt  =  interface.getStep(stepStart);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interface.getStep(stepStart);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interface.getStep(stepStart);	  Integer    dt    =    interface.getSteps();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
357	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStepInterpolator(nextStep);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStepInterpolator(nextStep);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStepInterpolator(nextStep);	  Integer    dt    =    interpolator.getStepInterpolator();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
358	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
359	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(prototype!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(prototype!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
360	[BUG]  [BUGGY]  if(interpolator!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator!=  null)  {  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
361	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  getEventsManager(nextStep);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  getEventsManager(nextStep);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  getEventsManager(nextStep);	  CombinedEventsManager    manager    =    getEventsManager();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
362	[BUG]  [BUGGY]  int  j  =  0;  j  <  b.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  j  =  0;  j  <  b.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  j  =  0;  j  <  b.length;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
363	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  j  =  0;  j  <  k;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
364	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps()  [j  +  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps()  [j  +  1];  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps()  [j  +  1];	  Integer    dt    =    interpolator.getSteps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
365	[BUG]  [BUGGY]  if(manager.evaluateStep(t0,  sum))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(t0,  sum))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(t0,  sum))  {	  if(manager.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
366	[BUG]  [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stage,  0);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  step  =  getStep(interpolator.getStep(),  stage,  0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  step  =  getStep(interpolator.getStep(),  stage,  0);	  Integer    step    =    getStep(interpolator.getStep(),    stage);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
367	[BUG]  [BUGGY]  if(manager.evaluateStep(step)||  nextStep  <  =  Math.abs(stepEnd))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(step)||  nextStep  <  =  Math.abs(stepEnd))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(step)||  nextStep  <  =  Math.abs(stepEnd))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
368	[BUG]  [BUGGY]  if(manager.evaluateStep(step)||  stepStart  ==  Math.abs(stepEnd))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(step)||  stepStart  ==  Math.abs(stepEnd))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(step)||  stepStart  ==  Math.abs(stepEnd))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
369	[BUG]  [BUGGY]  if(manager.evaluateStep(step)||  stepEnd  <  =  Math.abs(stepStart))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(step)||  stepEnd  <  =  Math.abs(stepStart))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(step)||  stepEnd  <  =  Math.abs(stepStart))  {	  if(manager.evaluateStep(step)||    stepStart    <    =    Math.abs(stepEnd))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
370	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(stack))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(stack))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(stack))  {	  if(!interpolator.evaluateStep(t0))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
371	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  ==  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  ==  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
372	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps()  [j  -  1];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps()  [j  -  1];  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps()  [j  -  1];	  Integer    dt    =    interpolator.getSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
373	[BUG]  [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  stages);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  stages);  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	CombinedEventsManager  manager  =  new  CombinedEventsManager(interpolator.getEventsManager(),  stages);	  CombinedEventsManager    manager    =    new    CombinedEventsManager(interpolator.getEventsManager());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
374	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  =  1)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  =  1)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
375	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(step,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(step,  0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(step,  0);	  Integer    dt    =    interpolator.getStep(step);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
376	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
377	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(stepStart);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(stepStart);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(stepStart);	  Integer    dt    =    interpolator.getSteps(sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
378	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getSteps(stepSize);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getSteps(stepSize);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getSteps(stepSize);	  Integer    dt    =    interpolator.getSteps(sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
379	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interface.getEventTime()  <  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interface.getEventTime()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
380	[BUG]  [BUGGY]  if(manager.evaluateStep(t0)&&  interpolator.getEventTime()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(t0)&&  interpolator.getEventTime()  >=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(t0)&&  interpolator.getEventTime()  >=  0)  {	  if(manager.evaluateStep(interpolator)&&    interpolator.getEventTime()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
381	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  =  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)&&  interpolator.getEventTime()  <  =  0)  {	  if(interpolator.evaluateStep(interpolator)&&    interpolator.getEventTime()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
382	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)||  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(interpolator.evaluateStep(step)||  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(interpolator.evaluateStep(step)||  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
383	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)||  interpolator.getEventTime()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(manager.evaluateStep(interpolator)||  interpolator.getEventTime()!=  0)  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(manager.evaluateStep(interpolator)||  interpolator.getEventTime()!=  0)  {	  if(interpolator.evaluateStep(interpolator)||    interpolator.getEventTime()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  continue;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
385	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  stages.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  }	  if(steps!=    null)    {    for(int    j    =    0;    j    <    stage.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    stages;    ++l)    {    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
386	[BUG]  [BUGGY]  int  i  =  0;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  int  i  =  0;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	int  i  =  0;  i  <  stages;  ++i)  {  if(math.abs(yTmp[i])  <  =  Math.abs(yTmp[i]))  {  loop  =  false;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(math.abs(yTmp[i])    <    =    Math.abs(yTmp[i]))    {    loop    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
387	[BUG]  [BUGGY]  if(!manager.evaluateStep(sum)&&!steps.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!manager.evaluateStep(sum)&&!steps.isEmpty())  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!manager.evaluateStep(sum)&&!steps.isEmpty())  {	  if(!manager.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
388	[BUG]  [BUGGY]  if(stopTime  &&  manager.evaluateStep(step))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(stopTime  &&  manager.evaluateStep(step))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(stopTime  &&  manager.evaluateStep(step))  {	  if(!stopTime    &&    manager.evaluateStep(step))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
389	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!manager.evaluateStep(interpolator)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
390	[BUG]  [BUGGY]  Integer  dt  =  interpolator.getStep(stack,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  Integer  dt  =  interpolator.getStep(stack,  0);  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	Integer  dt  =  interpolator.getStep(stack,  0);	  Integer    dt    =    interpolator.getStep(stack);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
391	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(sum)||!interpolator.evaluateStep(t0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(!interpolator.evaluateStep(sum)||!interpolator.evaluateStep(t0))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(!interpolator.evaluateStep(sum)||!interpolator.evaluateStep(t0))  {	  if(!interpolator.evaluateStep(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
392	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
393	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
394	[BUG]  [BUGGY]  if(Math.abs(sum)  <  Math.abs(yTmp))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(Math.abs(sum)  <  Math.abs(yTmp))  {  [BUGGY]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(Math.abs(sum)  <  Math.abs(yTmp))  {	  if(Math.abs(sum)    <    =    Math.abs(sum))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
395	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  >=  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  >=  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  >=	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
396	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  >=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  >=  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  >=	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
397	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);      [BUGGY]  if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  }  [BUGGY]      if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	172	172	2	replace	if(steps!=  null)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum+=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  }	  if(interpolator!=    null)    {    if(steps!=    null)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum+=    b[0]    *    yDotK[0][j];    for(int    l    =    1;    l    <    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
