bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps(j);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j);	      Integer    stages    =    getSteps();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  Integer  stages  =  getEndSteps();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getEndSteps();  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getEndSteps();	      Integer    stages    =    getSteps();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
3	[BUG]  [BUGGY]  Integer  stages  =  getSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps()  +  1;  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps()  +  1;	      Integer    stages    =    getSteps();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
4	[BUG]  [BUGGY]  Integer  stages  =  getSteps().length;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps().length;  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps().length;	      Integer    stages    =    getSteps();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
5	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  double  sum=  y[0]  *  c[0][j];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y[0]  *  c[0][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  c[0][j];	  double    sum=    y[0]    *    b[0][j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(j);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  stages  =  getStandardSteps(j);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(j);	      int    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  double  stages  =  getStandardSteps();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  stages  =  getStandardSteps();  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  stages  =  getStandardSteps();	      int    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
12	[BUG]  [BUGGY]  int  stages  =  getEndSteps();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  stages  =  getEndSteps();  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getEndSteps();	      int    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  int  stages  =  getStandardSteps()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  stages  =  getStandardSteps()  -  1;  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps()  -  1;	      int    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
15	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  i  =  0;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	      for(int    i    =    0;    i    <    y0.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	      for(int    i    =    0;    i    <    y0.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	      for(int    i    =    0;    i    <    y0.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  double  sum=  b[0]  *  yDotK[0][j]  +  2;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  b[0]  *  yDotK[0][j]  +  2;  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  yDotK[0][j]  +  2;	  double    sum=    b[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  double  sum=  y[0]  *  yDotK[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y[0]  *  yDotK[0][j]  +  1;  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yDotK[0][j]  +  1;	  double    sum=    b[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  double  sum=  y[0]  *  b[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y[0]  *  b[0][j]  +  1;  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  b[0][j]  +  1;	  double    sum=    b[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(j);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps(j);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(j);	      Integer    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
25	[BUG]  [BUGGY]  Integer  stages  =  getStandardIntegers();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardIntegers();  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardIntegers();	      Integer    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
26	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps()  -  1;  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps()  -  1;	      Integer    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  double  sum=  yTmp[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  yTmp[0]  *  yDotK[0][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  yTmp[0]  *  yDotK[0][j];	  double    sum=    y0[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
30	[BUG]  [BUGGY]  for(int  k  =  2;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  2;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  2;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  b[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  b[0]  *  yDotK[1][j];  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[1][j];	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  double  sum=  y[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y[0]  *  yDotK[1][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yDotK[1][j];	  double    sum=    b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  double  sum=  b[0]  *  yDotK[1][j]  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  b[0]  *  yDotK[1][j]  +  1;  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  yDotK[1][j]  +  1;	  double    sum=    b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps(k,  j);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k,  j);	      Integer    stages    =    getSteps(k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
44	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0,  k.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps(y0,  k.length);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0,  k.length);	      Integer    stages    =    getSteps(k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
45	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j,  y0.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps(j,  y0.length);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j,  y0.length);	      Integer    stages    =    getSteps(k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
46	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j,  k.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps(j,  k.length);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j,  k.length);	      Integer    stages    =    getSteps(k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(j);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps().get(j);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(j);	      Integer    stages    =    getStandardSteps().get(k);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
51	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(y0.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps().get(y0.length);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(y0.length);	      Integer    stages    =    getStandardSteps().get(k);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
52	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(k  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps().get(k  -  1);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(k  -  1);	      Integer    stages    =    getStandardSteps().get(k);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
53	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps(k);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k);	      Integer    stages    =    getSteps();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
63	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  double  sum=  y[0]  *  yTmp[0][j];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y[0]  *  yTmp[0][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yTmp[0][j];	  double    sum=    y[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
65	[BUG]  [BUGGY]  double  sum=  y0[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y0[0]  *  yDotK[1][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  yDotK[1][j];	  double    sum=    y0[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]  double  sum=  y0[0]  *  yTmp[0][j];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y0[0]  *  yTmp[0][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  yTmp[0][j];	  double    sum=    y0[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  double  sum=  yTmp[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  yTmp[0]  *  yDotK[1][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  yTmp[0]  *  yDotK[1][j];	  double    sum=    b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
70	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
72	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  yTmp.length;  ++k)  {  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  yTmp.length;  ++k)  {	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
73	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
76	[BUG]  [BUGGY]  double  sum=  y0[0]  *  yDotK[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y0[0]  *  yDotK[0][j]  +  1;  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  yDotK[0][j]  +  1;	  double    sum=    b[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  double  sum=  yTmp[0]  *  yDotK[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  yTmp[0]  *  yDotK[0][j]  +  1;  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  yTmp[0]  *  yDotK[0][j]  +  1;	  double    sum=    b[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  i  =  0;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	      for(int    i    =    0;    i    <    y0.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(y0.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  stages  =  getStandardSteps(y0.length);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(y0.length);	      int    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
80	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(k);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  stages  =  getStandardSteps(k);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(k);	      int    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
81	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
82	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(y0.length);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps(y0.length);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(y0.length);	      Integer    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
83	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps()  +  1;  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps()  +  1;	      Integer    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
84	[BUG]  [BUGGY]  Integer  stages  =  getStandardEquations();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardEquations();  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardEquations();	      Integer    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
85	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  double  sum=  y[0]  *  t[0][j];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  double  sum=  y[0]  *  t[0][j];  [BUGGY]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  t[0][j];	  double    sum=    y[0]    *    b[0][j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }	      for(int    i    =    0;    i    <    y0.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
90	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  int  stages  =  getStandardSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  stages  =  getStandardSteps()  +  1;  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps()  +  1;	      int    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
93	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
95	[BUG]  [BUGGY]  Integer  stages  =  getSteps(stepStart,  k,  y0.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getSteps(stepStart,  k,  y0.length);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(stepStart,  k,  y0.length);	      Integer    stages    =    getSteps(k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
96	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
97	[BUG]  [BUGGY]  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  b[0]  *  yDotK[0][j];  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[0][j];	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
98	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(k);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  Integer  stages  =  getStandardSteps(k);  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(k);	      Integer    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
99	[BUG]  [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
101	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {    [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]    double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	      for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
