bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
2	[BUG]  [BUGGY]  final  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  final  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	final  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
3	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
4	[BUG]  [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
5	[BUG]  [BUGGY]  boolean  k  =  0;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
6	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
7	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
8	[BUG]  [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  k;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  k;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  k;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
10	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y1,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
11	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y2,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y2,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y2,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y1,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
12	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y1,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
13	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
14	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
15	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
16	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
17	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
18	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
19	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
20	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(y0,  k);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(y0,  k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(y0,  k);	  Integer    stages    =    getStandardSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
21	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(y0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(y0);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(y0);	  Integer    stages    =    getStandardSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
22	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  yDotK.length;  ++k)  {	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
23	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
24	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
25	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
26	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
27	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
28	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
29	[BUG]  [BUGGY]  double  sum=  t[0]  *  y[0][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  t[0]  *  y[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  t[0]  *  y[0][j];	  double    sum=    y[0]    *    t[0][j];    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
30	[BUG]  [BUGGY]  double  sum=  b[0]  *  t[0][j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  t[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  t[0][j];	  double    sum=    y[0]    *    t[0][j];    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
31	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(y0.length  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(y0.length  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(y0.length  -  1);	  Integer    stages    =    getStandardSteps().get(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
32	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(j,  y0.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(j,  y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(j,  y0.length);	  Integer    stages    =    getStandardSteps().get(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
33	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(j0.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(j0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(j0.length);	  Integer    stages    =    getStandardSteps().get(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
34	[BUG]  [BUGGY]  double  sum=  yDotK[0]  *  yTmp[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  yDotK[0]  *  yTmp[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  yDotK[0]  *  yTmp[0][j]  +  1;	  double    sum=    yTmp[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
35	[BUG]  [BUGGY]  double  sum=  ytmp[0]  *  yDotK[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  ytmp[0]  *  yDotK[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  ytmp[0]  *  yDotK[0][j]  +  1;	  double    sum=    yTmp[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
36	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
37	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
38	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
39	[BUG]  [BUGGY]  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
40	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
41	[BUG]  [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
42	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
43	[BUG]  [BUGGY]  double  sum=  ytmp[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  ytmp[0]  *  yDotK[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  ytmp[0]  *  yDotK[1][j];	  double    sum=    yTmp[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
44	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0.length);	  Integer    stages    =    getSteps(j);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
45	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0,  j);	  Integer    stages    =    getSteps(j);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0);	  Integer    stages    =    getSteps(j);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0,  j.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0,  j.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0,  j.length);	  Integer    stages    =    getSteps(j,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
48	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j,  k);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(j,  k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j,  k);	  Integer    stages    =    getSteps(j,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
49	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
50	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
51	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
52	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
53	[BUG]  [BUGGY]  final  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  final  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	final  int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
54	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
55	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(j,  y0.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(j,  y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(j,  y0.length);	  Integer    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
56	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(y0.length  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(y0.length  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(y0.length  -  1);	  Integer    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
57	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(y0,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(y0,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(y0,  j);	  Integer    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
58	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
59	[BUG]  [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
60	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
61	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps()  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps()  *  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps()  *  1;	  Integer    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
62	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().length  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().length  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().length  -  1;	  Integer    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
63	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k0,  y.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(k0,  y.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k0,  y.length);	  Integer    stages    =    getSteps(y0,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
64	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0,  k,  j);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0,  k,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0,  k,  j);	  Integer    stages    =    getSteps(y0,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
65	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
66	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
67	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
68	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
72	[BUG]  [BUGGY]  double  sum=  y[0]  *  yDotK[1][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y[0]  *  yDotK[1][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yDotK[1][j]  +  1;	  double    sum=    b[0]    *    yDotK[1][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
73	[BUG]  [BUGGY]  double  sum=  b[0]  *  yDotK[1][j]  +  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  yDotK[1][j]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  yDotK[1][j]  +  2;	  double    sum=    b[0]    *    yDotK[1][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
74	[BUG]  [BUGGY]  double  sum=  y0[0]  *  yDotK[1][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y0[0]  *  yDotK[1][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  yDotK[1][j]  +  1;	  double    sum=    b[0]    *    yDotK[1][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
75	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(j  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(j  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(j  -  1);	  Integer    stages    =    getStandardSteps().get(j);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
76	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(j  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(j  +  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(j  +  1);	  Integer    stages    =    getStandardSteps().get(j);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
77	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
78	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
79	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dt.length  -  1;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  dt.length  -  1;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  dt.length  -  1;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    dt.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    dt.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
82	[BUG]  [BUGGY]  b[0]  *  yDotK[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[0][j]  +  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[0][j]  +  1;	  b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
83	[BUG]  [BUGGY]  b[0]  *  yTmp[0][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yTmp[0][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yTmp[0][j];	  b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
84	[BUG]  [BUGGY]  b[0]  *  yDotK[0][j]  +  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[0][j]  +  2;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[0][j]  +  2;	  b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
85	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
89	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(i  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(i  -  1);	  Integer    stages    =    getStandardSteps().get(k    -    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
90	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(j,  y0.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(j,  y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(j,  y0.length);	  int    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
91	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(y0.length  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(y0.length  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(y0.length  -  1);	  int    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
92	[BUG]  [BUGGY]  double  stages  =  getStandardSteps(y0.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  stages  =  getStandardSteps(y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  stages  =  getStandardSteps(y0.length);	  int    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
93	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    System.arraycopy(y,    0,    b[l]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    System.arraycopy(y,    0,    b[l]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
95	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    System.arraycopy(y,    0,    b[l]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  k;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  k;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  k;  }	  for(int    i    =    0;    i    <    k.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
98	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k,  j.length);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(k,  j.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k,  j.length);	  Integer    stages    =    getSteps(j,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
99	[BUG]  [BUGGY]  Integer  stages  =  getSteps(i,  k.length);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(i,  k.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(i,  k.length);	  Integer    stages    =    getSteps(j,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
100	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j,  k,  k.length);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(j,  k,  k.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j,  k,  k.length);	  Integer    stages    =    getSteps(j,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
101	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
102	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
103	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
104	[BUG]  [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
105	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
106	[BUG]  [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
107	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
108	[BUG]  [BUGGY]  int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
109	[BUG]  [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(yTmp,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(yTmp,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[0][j];  System.arraycopy(yTmp,  0,  b[l]  *  y	  b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
110	[BUG]  [BUGGY]  b[0]  *  yTmp[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yTmp[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yTmp[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
111	[BUG]  [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y	  b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
112	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(y0,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(y0,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(y0,  j);	  int    stages    =    getStandardSteps(j);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
113	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(j,  k);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(j,  k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(j,  k);	  int    stages    =    getStandardSteps(j);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
114	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
115	[BUG]  [BUGGY]  double  sum=  b[0]  *  c[0][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  c[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  c[0][j];	  double    sum=    y[0]    *    c[0][j];    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
116	[BUG]  [BUGGY]  double  sum=  c[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  c[0]  *  yDotK[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  c[0]  *  yDotK[0][j];	  double    sum=    y[0]    *    c[0][j];    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
117	[BUG]  [BUGGY]  Integer  stages  =  getSteps().length  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps().length  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps().length  -  1;	  Integer    stages    =    getSteps().length;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
118	[BUG]  [BUGGY]  Integer  stages  =  getSteps().length  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps().length  +  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps().length  +  1;	  Integer    stages    =    getSteps().length;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
119	[BUG]  [BUGGY]  Integer  stages  =  getSteps().length  -  2;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps().length  -  2;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps().length  -  2;	  Integer    stages    =    getSteps().length;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
120	[BUG]  [BUGGY]  Integer  stages  =  getSteps().length  +  2;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps().length  +  2;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps().length  +  2;	  Integer    stages    =    getSteps().length;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
121	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0,  k,  stepStart.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0,  k,  stepStart.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0,  k,  stepStart.length);	  Integer    stages    =    getSteps(stepStart,    k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
122	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j,  k,  y0.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(j,  k,  y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j,  k,  y0.length);	  Integer    stages    =    getSteps(stepStart,    k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
123	[BUG]  [BUGGY]  Integer  stages  =  getSteps(i,  k,  y0.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(i,  k,  y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(i,  k,  y0.length);	  Integer    stages    =    getSteps(stepStart,    k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
124	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(dt.equals(y0[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(dt.equals(y0[i]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(dt.equals(y0[i]))  {  break;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
126	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y[k]))  {  break;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
127	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(y0,  k);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(y0,  k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(y0,  k);	  int    stages    =    getStandardSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
128	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(k,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(k,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(k,  j);	  int    stages    =    getStandardSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
129	[BUG]  [BUGGY]  Integer  stages  =  getStandardEquations(j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardEquations(j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardEquations(j);	  Integer    stages    =    getStandardEquations();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
130	[BUG]  [BUGGY]  Integer  stages  =  getDerivatives();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getDerivatives();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getDerivatives();	  Integer    stages    =    getStandardEquations();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
131	[BUG]  [BUGGY]  Integer  stages  =  getStandardEquations().length;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardEquations().length;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardEquations().length;	  Integer    stages    =    getStandardEquations();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
132	[BUG]  [BUGGY]  Integer  stages  =  getEndEquations();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getEndEquations();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getEndEquations();	  Integer    stages    =    getStandardEquations();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
133	[BUG]  [BUGGY]  Integer  stages  =  getEndSteps(j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getEndSteps(j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getEndSteps(j);	  Integer    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
134	[BUG]  [BUGGY]  Integer  stages  =  getStartSteps();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStartSteps();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStartSteps();	  Integer    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
135	[BUG]  [BUGGY]  Integer  stages  =  getEndSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getEndSteps()  +  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getEndSteps()  +  1;	  Integer    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
136	[BUG]  [BUGGY]  Integer  stages  =  getEndSteps()  -  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getEndSteps()  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getEndSteps()  -  1;	  Integer    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
137	[BUG]  [BUGGY]  if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  null;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
138	[BUG]  [BUGGY]  if(dt  ==  null)  {  if(str.equals(y[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  if(str.equals(y[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  if(str.equals(y[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  null;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
139	[BUG]  [BUGGY]  if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  break;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
140	[BUG]  [BUGGY]  if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
141	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps()  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps()  /  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps()  /  1;	  Integer    stages    =    getStandardSteps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
142	[BUG]  [BUGGY]  double  sum=  b[0]  *  yTmp[0][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  yTmp[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  yTmp[0][j];	  double    sum=    y0[0]    *    yTmp[0][j];    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
143	[BUG]  [BUGGY]  double  sum=  ytmp[0]  *  yTmp[0][j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  ytmp[0]  *  yTmp[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  ytmp[0]  *  yTmp[0][j];	  double    sum=    y0[0]    *    yTmp[0][j];    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
144	[BUG]  [BUGGY]  Integer  stages  =  getStandardIntegers(j);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardIntegers(j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardIntegers(j);	  Integer    stages    =    getStandardIntegers();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
145	[BUG]  [BUGGY]  Integer  stages  =  getIntegers();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getIntegers();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getIntegers();	  Integer    stages    =    getStandardIntegers();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
146	[BUG]  [BUGGY]  Integer  stages  =  getDerivativesIntegers();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getDerivativesIntegers();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getDerivativesIntegers();	  Integer    stages    =    getStandardIntegers();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
147	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
148	[BUG]  [BUGGY]  int  stages  =  getStandardSteps()  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps()  /  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps()  /  1;	  int    stages    =    getStandardSteps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
149	[BUG]  [BUGGY]  for(int  k  =  2;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  2;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  2;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];	  for(int    k    =    2;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
150	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
151	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
152	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
153	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
154	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  y0.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    if(str.equals(y0[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    if(str.equals(y0[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
157	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
158	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    y.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
159	[BUG]  [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    y.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
160	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
161	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
162	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
163	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(!str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(!str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y.length;  ++k)  {  if(!str.equals(y[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
164	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y.length;  ++k)  {  if(dt.equals(y[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
165	[BUG]  [BUGGY]  double  stages  =  getStandardSteps(j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  stages  =  getStandardSteps(j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  stages  =  getStandardSteps(j);	  double    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
166	[BUG]  [BUGGY]  double  stages  =  getStandardSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  stages  =  getStandardSteps()  +  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  stages  =  getStandardSteps()  +  1;	  double    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
167	[BUG]  [BUGGY]  double  stages  =  getEndSteps();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  stages  =  getEndSteps();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  stages  =  getEndSteps();	  double    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
168	[BUG]  [BUGGY]  double  stages  =  getStandardSteps()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  stages  =  getStandardSteps()  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  stages  =  getStandardSteps()  -  1;	  double    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
169	[BUG]  [BUGGY]  int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
170	[BUG]  [BUGGY]  char  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  char  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	char  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
171	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
172	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
173	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y.length;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
174	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0,  k);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0,  k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0,  k);	  Integer    stages    =    getSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
175	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(k  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k  -  1);	  Integer    stages    =    getSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
176	[BUG]  [BUGGY]  b[0]  *  yDotK[1][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[1][j]  +  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[1][j]  +  1;	  b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
177	[BUG]  [BUGGY]  b[0]  *  yDotK[1][j]  +  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[1][j]  +  2;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[1][j]  +  2;	  b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
178	[BUG]  [BUGGY]  b[0]  *  yTmp[1][j];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yTmp[1][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yTmp[1][j];	  b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  j  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  j  <  y0.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  y0.length;  ++i)  {  System.arraycopy(y,  0,  b[l]  *  y	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
183	[BUG]  [BUGGY]  int  stages  =  getStandardSteps()  *  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps()  *  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps()  *  1;	  int    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
184	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(j)-  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(j)-  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(j)-  1;	  int    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
185	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
186	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
187	[BUG]  [BUGGY]  b[0]  *  yTmp[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yTmp[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yTmp[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
188	[BUG]  [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
189	[BUG]  [BUGGY]  final  boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  final  boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	final  boolean  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
190	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
191	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt.equals(y[k]))  {  continue;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(dt.equals(y0[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(dt.equals(y0[i]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  if(dt.equals(y0[i]))  {  continue;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
193	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  y.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
195	[BUG]  [BUGGY]  Integer  stages  =  getSteps()  /  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps()  /  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps()  /  1;	  Integer    stages    =    getSteps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
196	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0.length,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0.length,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0.length,  j);	  Integer    stages    =    getSteps(k,    j);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
197	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(k,  j  +  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k,  j  +  1);	  Integer    stages    =    getSteps(k,    j);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
198	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(str.equals(y0[i]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(str.equals(y0[i]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(str.equals(y0[i]))  {  continue;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
200	[BUG]  [BUGGY]  int  stages  =  getEndSteps(j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getEndSteps(j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getEndSteps(j);	  int    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
201	[BUG]  [BUGGY]  int  stages  =  getEndSteps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getEndSteps()  +  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getEndSteps()  +  1;	  int    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
202	[BUG]  [BUGGY]  int  stages  =  getEndSteps()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getEndSteps()  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getEndSteps()  -  1;	  int    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
203	[BUG]  [BUGGY]  int  stages  =  getStartSteps();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStartSteps();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStartSteps();	  int    stages    =    getEndSteps();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
204	[BUG]  [BUGGY]  double  sum=  ytmp[0]  *  yDotK[0][j];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  ytmp[0]  *  yDotK[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  ytmp[0]  *  yDotK[0][j];	  double    sum=    yTmp[0]    *    yDotK[0][j];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
205	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    yDotK.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
206	[BUG]  [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    yDotK.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
207	[BUG]  [BUGGY]  int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    yDotK.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
208	[BUG]  [BUGGY]  double  sum=  y[0]  *  yDotK[0][j]  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y[0]  *  yDotK[0][j]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yDotK[0][j]  +  2;	  double    sum=    y[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
209	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(j,  k);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(j,  k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(j,  k);	  Integer    stages    =    getStandardSteps(j);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
210	[BUG]  [BUGGY]  if(dt  ==  null)  {  int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
211	[BUG]  [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
212	[BUG]  [BUGGY]  if(str.equals(y0[j]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[j]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[j]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
213	[BUG]  [BUGGY]  if(str.equals(y0[k])||  str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[k])||  str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[k])||  str.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    stage[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  k;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  1;  i  <  k;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  1;  i  <  k;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    stage[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
216	[BUG]  [BUGGY]  double  sum=  y[0]  *  yTmp[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y[0]  *  yTmp[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yTmp[0][j]  +  1;	  double    sum=    y[0]    *    b[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
217	[BUG]  [BUGGY]  double  sum=  b[0]  *  yDotK[0][j]  /  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  yDotK[0][j]  /  2;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  yDotK[0][j]  /  2;	  double    sum=    b[0]    *    yDotK[0][j]    +    2;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
218	[BUG]  [BUGGY]  Integer  stages  =  getStandardEquations(y0.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardEquations(y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardEquations(y0.length);	  Integer    stages    =    getStandardEquations();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
219	[BUG]  [BUGGY]  Integer  stages  =  getStandardEquations()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardEquations()  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardEquations()  -  1;	  Integer    stages    =    getStandardEquations();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
220	[BUG]  [BUGGY]  double  sum=  yTmp[0]  *  yDotK[1][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  yTmp[0]  *  yDotK[1][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  yTmp[0]  *  yDotK[1][j]  +  1;	  double    sum=    b[0]    *    yDotK[1][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
221	[BUG]  [BUGGY]  if(stages  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stages  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(stages  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
222	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stages!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(stages!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
223	[BUG]  [BUGGY]  if(stages  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stages  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(stages  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
224	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stages!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(stages!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue	  if(dt    ==    null)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
225	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  continue;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
226	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(j0.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(j0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(j0.length);	  Integer    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
227	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(k  -  1  +  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(k  -  1  +  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(k  -  1  +  j);	  Integer    stages    =    getStandardSteps().get(k    -    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
228	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(j  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(j  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(j  -  1);	  Integer    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
229	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k,  y0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(k,  y0);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k,  y0);	  Integer    stages    =    getSteps(k,    j);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
230	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(j  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(j  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(j  -  1);	  int    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
231	[BUG]  [BUGGY]  int  stages  =  getStandardSteps().length;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps().length;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps().length;	  int    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
232	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(y0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(y0);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(y0);	  int    stages    =    getStandardSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
233	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[2][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[2][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[2][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  y[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  y[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  y[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    stage[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
235	[BUG]  [BUGGY]  int  k  =  0;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    stage[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
236	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(j0.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(j0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(j0.length);	  int    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
237	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y1;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y1;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y1;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
238	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	System.arraycopy(y0,  0,  b[l]  *  y	  b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
239	[BUG]  [BUGGY]  Integer  stages  =  getStandardIntegers(y0.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardIntegers(y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardIntegers(y0.length);	  Integer    stages    =    getStandardIntegers();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
240	[BUG]  [BUGGY]  Integer  stages  =  getStandardDeltaIntegers();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardDeltaIntegers();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardDeltaIntegers();	  Integer    stages    =    getStandardIntegers();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
241	[BUG]  [BUGGY]  double  sum=  y0[0]  *  y[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y0[0]  *  y[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  y[0][j]  +  1;	  double    sum=    y[0]    *    b[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
242	[BUG]  [BUGGY]  double  sum=  b[0]  *  y[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  y[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  y[0][j]  +  1;	  double    sum=    y[0]    *    b[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
243	[BUG]  [BUGGY]  if(str.equals(y0[i]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[i]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[i]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
244	[BUG]  [BUGGY]  if(str.equals(y0[j]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[j]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[j]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
245	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
246	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
247	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
248	[BUG]  [BUGGY]  double  sum=  y0[0]  *  yTmp[1][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y0[0]  *  yTmp[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  yTmp[1][j];	  double    sum=    y0[0]    *    yTmp[0][j];    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
249	[BUG]  [BUGGY]  double  sum=  yTmp[0]  *  y0[0][j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  yTmp[0]  *  y0[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  yTmp[0]  *  y0[0][j];	  double    sum=    y0[0]    *    yTmp[0][j];    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
250	[BUG]  [BUGGY]  int  k  =  0;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
251	[BUG]  [BUGGY]  int  i  =  0;  i  <  y0.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  i  =  0;  i  <  y0.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  i  =  0;  i  <  y0.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
252	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
253	[BUG]  [BUGGY]  Integer  stages  =  getSteps(y0,  k.length  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(y0,  k.length  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(y0,  k.length  -  1);	  Integer    stages    =    getSteps(y0,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
254	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
255	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y1,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y1,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
256	[BUG]  [BUGGY]  double  sum=  b[0]  *  y[0][j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  y[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  y[0][j];	  double    sum=    y[0]    *    c[0][j];    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
257	[BUG]  [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
258	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
259	[BUG]  [BUGGY]  AssertionFailedError  t0  =  handler.getEventFailedError();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionFailedError  t0  =  handler.getEventFailedError();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	AssertionFailedError  t0  =  handler.getEventFailedError();	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
260	[BUG]  [BUGGY]  AssertionFailedError  t  =  manager.getEventTime();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionFailedError  t  =  manager.getEventTime();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	AssertionFailedError  t  =  manager.getEventTime();	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
261	[BUG]  [BUGGY]  AssertionFailedError  t  =  handler.getEventTime();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionFailedError  t  =  handler.getEventTime();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	AssertionFailedError  t  =  handler.getEventTime();	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
262	[BUG]  [BUGGY]  AssertionFailedError  t  =  handler.getEventFailedError();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionFailedError  t  =  handler.getEventFailedError();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	AssertionFailedError  t  =  handler.getEventFailedError();	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  j  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  j  <  dt.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    dt.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
264	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
265	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  break;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  stages.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  k.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  k.length;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
268	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
269	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
270	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
271	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
272	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y1[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y1[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y1[k]))  {  break;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
273	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j,  k.length  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(j,  k.length  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j,  k.length  -  1);	  Integer    stages    =    getSteps(j,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
274	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
275	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
276	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y1[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y1[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y1[k]))  {  continue;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
277	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  System.arraycopy(y,  0,  b[l]  *  yDotK[1][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    System.arraycopy(y,    0,    b[l]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
278	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
279	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
280	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  y[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  y[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  y[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
281	[BUG]  [BUGGY]  double  sum=  y[0]  *  yTmp[1][j];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y[0]  *  yTmp[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yTmp[1][j];	  double    sum=    y[0]    *    yTmp[0][j];    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
282	[BUG]  [BUGGY]  Integer  stages  =  getSteps(stepStart,  j,  y0.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(stepStart,  j,  y0.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(stepStart,  j,  y0.length);	  Integer    stages    =    getSteps(stepStart,    k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
283	[BUG]  [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
284	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
285	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!str.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
286	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y0[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
287	[BUG]  [BUGGY]  Integer  stages  =  getSteps()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps()  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps()  -  1;	  Integer    stages    =    getSteps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
288	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
289	[BUG]  [BUGGY]  int  k  =  0;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  i  <  k.length;  ++i)  {  stages[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
290	[BUG]  [BUGGY]  double  sum=  y0[0]  *  yDotK[0][j]  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y0[0]  *  yDotK[0][j]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  yDotK[0][j]  +  2;	  double    sum=    b[0]    *    yDotK[0][j]    +    2;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
291	[BUG]  [BUGGY]  double  sum=  yTmp[0]  *  yDotK[0][j]  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  yTmp[0]  *  yDotK[0][j]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  yTmp[0]  *  yDotK[0][j]  +  2;	  double    sum=    b[0]    *    yDotK[0][j]    +    2;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
292	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().get(j.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().get(j.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().get(j.length);	  Integer    stages    =    getStandardSteps().get(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
293	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	For(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
294	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
295	[BUG]  [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y0[k]))  {  return  null;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
296	[BUG]  [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
297	[BUG]  [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(yTmp[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(yTmp[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(yTmp[k]))  {  return  null;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
298	[BUG]  [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y1[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y1[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(steps  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(str.equals(y1[k]))  {  return  null;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
299	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
300	[BUG]  [BUGGY]  int  k  =  0;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
301	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!str.equals(y[k]))  {  return  null;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
302	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k,  y0,  k);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(k,  y0,  k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k,  y0,  k);	  Integer    stages    =    getSteps(stepStart,    k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
303	[BUG]  [BUGGY]  Integer  stages  =  getSteps(k,  y0,  k.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(k,  y0,  k.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(k,  y0,  k.length);	  Integer    stages    =    getSteps(stepStart,    k,    y0.length);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
304	[BUG]  [BUGGY]  double  sum=  b[0]  *  yDotK[1][j]  /  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  b[0]  *  yDotK[1][j]  /  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  b[0]  *  yDotK[1][j]  /  1;	  double    sum=    b[0]    *    yDotK[1][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
305	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
306	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(k  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(k  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(k  -  1);	  int    stages    =    getStandardSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
307	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps().length;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps().length;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps().length;	  Integer    stages    =    getStandardSteps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
308	[BUG]  [BUGGY]  Integer  stages  =  getStandardEquations().size();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardEquations().size();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardEquations().size();	  Integer    stages    =    getStandardEquations();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
309	[BUG]  [BUGGY]  int  k  =  1  <  <  stage.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1  <  <  stage.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1  <  <  stage.length;  ++k)  {  if(str.equals(y[k]))  {  return  null;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
310	[BUG]  [BUGGY]  boolean  k  =  1  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  1  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  1  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
311	[BUG]  [BUGGY]  double  sum=  y0[0]  *  yTmp[0][j]  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y0[0]  *  yTmp[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y0[0]  *  yTmp[0][j]  +  1;	  double    sum=    y0[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
312	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
313	[BUG]  [BUGGY]  if(str.equals(yTmp[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(yTmp[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(yTmp[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }	  if(str.equals(y0[k]))    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
314	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(dt.equals(y0[k]))  {  continue;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
315	[BUG]  [BUGGY]  if(dt.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt.equals(y0[k]))  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  continue;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(dt.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
316	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  j  =  0;  j  <  stages;  ++i)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
317	[BUG]  [BUGGY]  Integer  stages  =  getSteps().size();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps().size();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps().size();	  Integer    stages    =    getSteps().length;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(str.equals(y0[i]))  {  break;  }	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    if(str.equals(y0[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(str.equals(y0[i]))  {  break;  }	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    if(str.equals(y0[i]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
320	[BUG]  [BUGGY]  if(dt  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(dt  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(dt  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
321	[BUG]  [BUGGY]  b[0]  *  yDotK[1][j]  =  t0.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  b[0]  *  yDotK[1][j]  =  t0.doubleValue();  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	b[0]  *  yDotK[1][j]  =  t0.doubleValue();	  b[0]    *    yDotK[1][j];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
322	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(stepStart,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(stepStart,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(stepStart,  j);	  int    stages    =    getStandardSteps(j);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  yTmp[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  k;  ++i)  {  yTmp[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  k;  ++i)  {  yTmp[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k;    ++i)    {    stage[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
324	[BUG]  [BUGGY]  Integer  stages  =  getSteps(stepStart,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(stepStart,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(stepStart,  j);	  Integer    stages    =    getSteps(k,    j);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
325	[BUG]  [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  return  null;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
326	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stageSize;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stageSize;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  stageSize;  ++k)  {	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
327	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  steps.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  steps.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  steps.length;  ++k)  {	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
328	[BUG]  [BUGGY]  boolean  k  =  1  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  1  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  1  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
329	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
330	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  b.length;  ++k)  {  b[0]  *  yDotK[0][j];  System.arraycopy(y0,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y0,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
331	[BUG]  [BUGGY]  Integer  stages  =  getSteps(j,  k  +  1,  k.length);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getSteps(j,  k  +  1,  k.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getSteps(j,  k  +  1,  k.length);	  Integer    stages    =    getSteps(j,    k.length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
332	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  yTmp.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    yTmp.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
333	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(y0.length  -  1,  j);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(y0.length  -  1,  j);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(y0.length  -  1,  j);	  Integer    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
334	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stage.length;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
335	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stageSize;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
336	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y1,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y1,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y1,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
337	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(!str.equals(y0[k]))  {  continue;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
338	[BUG]  [BUGGY]  int  stage  =  0;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stage  =  0;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stage  =  0;  k  <  stage.length;  ++k)  {  if(str.equals(y0[k]))  {  break;  }	  for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(str.equals(y0[k]))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
339	[BUG]  [BUGGY]  if(str.equals(y0[k]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[k]))  {  return  null;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[k]))  {  return  null;  }	  int    k    =    0;    k    <    y0.length;    ++k)    {    if(str.equals(y0[k]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
340	[BUG]  [BUGGY]  double  stages  =  getStandardSteps()  +  j;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  stages  =  getStandardSteps()  +  j;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  stages  =  getStandardSteps()  +  j;	  double    stages    =    getStandardSteps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
341	[BUG]  [BUGGY]  int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  1;  k  <  y.length;  ++k)  {  if(str.equals(y[k]))  {  continue;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(str.equals(y[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
342	[BUG]  [BUGGY]  int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  k  =  0;  k  <  y.length;  ++k)  {  if(dt  ==  null)  {  continue;  }	  for(int    k    =    0;    k    <    y.length;    ++k)    {    if(dt    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
343	[BUG]  [BUGGY]  boolean  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[1][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k.length;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  i  =  0;  i  <  k.length;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  i  =  0;  i  <  k.length;  ++i)  {  stage[i]  =  y[i]  +  stepSize  *  dt;  }	  for(int    i    =    0;    i    <    k.length;    ++i)    {    stages[i]    =    y[i]    +    stepSize    *    dt;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
345	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps(k  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps(k  -  1);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps(k  -  1);	  Integer    stages    =    getStandardSteps(k);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
346	[BUG]  [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	if(str.equals(y0[k]))  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(str.equals(y0[k]))  {  continue;  }	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    if(str.equals(y0[k]))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
347	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  b[0]  *  yTmp[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
348	[BUG]  [BUGGY]  Integer  stages  =  getStandardIntegers(k);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardIntegers(k);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardIntegers(k);	  Integer    stages    =    getStandardIntegers();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
349	[BUG]  [BUGGY]  Integer  stages  =  getStandardSteps()  [j  -  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  stages  =  getStandardSteps()  [j  -  1];  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	Integer  stages  =  getStandardSteps()  [j  -  1];	  Integer    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
350	[BUG]  [BUGGY]  int  stages  =  getStandardSteps().length  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps().length  -  1;  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps().length  -  1;	  int    stages    =    getStandardSteps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
351	[BUG]  [BUGGY]  boolean  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  1;  k  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
352	[BUG]  [BUGGY]  boolean  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  k  <  stages.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
353	[BUG]  [BUGGY]  boolean  k  =  0;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  boolean  k  =  0;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	boolean  k  =  0;  j  <  y0.length;  ++k)  {  b[0]  *  yDotK[0][j];  }	  boolean    k    =    0;    k    <    y0.length;    ++k)    {    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
354	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  System.arraycopy(y0,  0,  b[l]  *  yDotK[0][j];  System.arraycopy(y,  0,  b[l]  *  y	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    System.arraycopy(y,    0,    b[l]    *    yDotK[0][j];    System.arraycopy(y,    0,    b[l]    *    y    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
355	[BUG]  [BUGGY]  double  sum=  y[0]  *  yDotK[0][j]  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum=  y[0]  *  yDotK[0][j]  /  1;  [BUGGY]      for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	double  sum=  y[0]  *  yDotK[0][j]  /  1;	  double    sum=    y[0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
356	[BUG]  [BUGGY]  int  stages  =  getStandardSteps(step.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stages  =  getStandardSteps(step.length);  [BUGGY]      double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	163	163	2	replace	int  stages  =  getStandardSteps(step.length);	  int    stages    =    getStandardSteps(y0.length);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
