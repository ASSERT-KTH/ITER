projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)prototype.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps==null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstepStart=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=t0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)super.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)prototype.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=System.currentTimeMillis();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=0L;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=rki.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepEnd;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<blocks.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=startTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=stopTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)interpolator.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.cloneTree();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.cloneTicks();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=prototype.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=rki.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=y0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=rki.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStepInterpolator();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=forward?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=forward?-step:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=forward?-1:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=step?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=rki.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=interpolator.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(steps>0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages>0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages==0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages!=t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stages;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stages;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t1,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?t0:-step;for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(x,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,this,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=startTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)super.stepStart.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepSize=t0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addStartTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0.doubleValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stepOffset;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=startTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepSize>0){for(intstepStart=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepSize>0){for(intstepStart=t0;stepSize<steps-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length+1;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=proto.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager);}
