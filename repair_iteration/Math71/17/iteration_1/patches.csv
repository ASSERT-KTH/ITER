bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  stepStart  =(Integer)super.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =(Integer)super.clone();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =(Integer)super.clone();	      Integer    stepStart    =(Integer)prototype.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  Integer  stepStart  =(int)prototype.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =(int)prototype.clone();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =(int)prototype.clone();	      Integer    stepStart    =(Integer)prototype.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  stepStart  =  interpolator.stopTime  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.stopTime  -  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.stopTime  -  1;	  stepStart    =    interpolator.stopTime;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  stepStart  =  interpolator.stepTime;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.stepTime;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.stepTime;	  stepStart    =    interpolator.stopTime;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  stepStart  =  interpolator.stopTime  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.stopTime  +  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.stopTime  +  1;	  stepStart    =    interpolator.stopTime;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  stage);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  stage);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  stage);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  stepStart  =  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  1;	  stepStart    =    0;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  stepStart  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  System.currentTimeMillis();  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  System.currentTimeMillis();	  stepStart    =    0;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  stepStart  =  0L;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  0L;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  0L;	  stepStart    =    0;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
12	[BUG]  [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK,  stages  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK,  stages  -  1);  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK,  stages  -  1);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK[stages  -  1],  forward);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK[stages  -  1],  forward);  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK[stages  -  1],  forward);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK,  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK,  stepSize);  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK,  stepSize);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  ((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK);  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	((  RungeKuttaStepInterpolator)prototype).initialize(this,  yTmp,  yDotK);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t0,  t,  manager);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t0,  t,  manager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t0,  t,  manager);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    addEndTimeChecker(t0,    t,    manager);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  addEndTimeChecker(t0,  t,  manager);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  addEndTimeChecker(t0,  t,  manager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  addEndTimeChecker(t0,  t,  manager);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    addEndTimeChecker(t0,    t,    manager);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t0,  t,  managers);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t0,  t,  managers);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t0,  t,  managers);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    addEndTimeChecker(t0,    t,    manager);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  Integer  stepStart  =  y0;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  y0;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  y0;	      Integer    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  Integer  stepStart  =  0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  0;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  0;	      Integer    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  Integer  stepStart  =  t0  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  t0  +  1;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  t0  +  1;	      Integer    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  stepStart  -=  interpolator.stepSize;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  interpolator.stepSize;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  interpolator.stepSize;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  stepStart  -=  interpolator.stepStart;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  interpolator.stepStart;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  interpolator.stepStart;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  stepStart  -=  y0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  y0;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  y0;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  stepStart  -=  interpolator.stopTime;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  interpolator.stopTime;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  interpolator.stopTime;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
26	[BUG]  [BUGGY]  for(int  stepSize  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  stepSize  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  stepSize  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  for(int  stepStart  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  stepStart  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  stepStart  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  int  stepStart  =  y0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepStart  =  y0;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepStart  =  y0;	      int    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
29	[BUG]  [BUGGY]  double  stepStart  =  t0;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  double  stepStart  =  t0;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	double  stepStart  =  t0;	      int    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
30	[BUG]  [BUGGY]  int  stepStart  =  rki.stepSize;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepStart  =  rki.stepSize;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepStart  =  rki.stepSize;	      int    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
31	[BUG]  [BUGGY]  for(int  stepSize  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  managersManager);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  stepSize  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  managersManager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  stepSize  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  managersManager);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    managersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
32	[BUG]  [BUGGY]  for(int  stepStart  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  managersManager);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  stepStart  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  managersManager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  stepStart  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  managersManager);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    managersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  stepStart  =  interpolator.stepStart  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.stepStart  -  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.stepStart  -  1;	  stepStart    =    interpolator.stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  stepStart  =  interpolator.stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.stepStart  +  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.stepStart  +  1;	  stepStart    =    interpolator.stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  stepStart  =  interpolator.stepEnd;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.stepEnd;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.stepEnd;	  stepStart    =    interpolator.stepStart;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(yTmp,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  stepHandlers.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(yTmp,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  blocks.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  blocks.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  blocks.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(yTmp,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  stepStart  =  interpolator.getStep()  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.getStep()  -  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.getStep()  -  1;	  stepStart    =    interpolator.getStep();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  stepStart  =  interpolator.getStep()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.getStep()  +  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.getStep()  +  1;	  stepStart    =    interpolator.getStep();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  stepStart  =  interpolator.getStep(t0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.getStep(t0);  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.getStep(t0);	  stepStart    =    interpolator.getStep();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  stepStart  =  startTime  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  startTime  -  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  startTime  -  1;	  stepStart    =    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  stepStart  =  stopTime  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  stopTime  -  1;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  stopTime  -  1;	  stepStart    =    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  Integer  stepStart  =(int)interpolator.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =(int)interpolator.clone();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =(int)interpolator.clone();	      Integer    stepStart    =(Integer)interpolator.clone();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  Integer  stepStart  =(Integer)interpolator.cloneTree();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =(Integer)interpolator.cloneTree();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =(Integer)interpolator.cloneTree();	      Integer    stepStart    =(Integer)interpolator.clone();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  Integer  stepStart  =(Integer)interpolator.cloneTicks();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =(Integer)interpolator.cloneTicks();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =(Integer)interpolator.cloneTicks();	      Integer    stepStart    =(Integer)interpolator.clone();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  for(int  stepSize  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  stepSize  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  stepSize  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  for(int  stepStart  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  for(int  stepStart  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	for(int  stepStart  =  t0;  stepSize  <  stages.length;  stepEnd++)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  int  stepSize  =  prototype.getStep();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepSize  =  prototype.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepSize  =  prototype.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
50	[BUG]  [BUGGY]  int  stepSize  =  rki.getStep();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepSize  =  rki.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepSize  =  rki.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
51	[BUG]  [BUGGY]  int  stepSize  =  interpolator.getStep();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepSize  =  interpolator.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepSize  =  interpolator.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
52	[BUG]  [BUGGY]  int  stepSize  =  y0.getStep();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepSize  =  y0.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepSize  =  y0.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
53	[BUG]  [BUGGY]  Integer  stepStart  =  prototype.getStep();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  prototype.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  prototype.getStep();	      Integer    stepStart    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
54	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getStep();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  interpolator.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  interpolator.getStep();	      Integer    stepStart    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
55	[BUG]  [BUGGY]  Integer  stepStart  =  y0.getStep();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  y0.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  y0.getStep();	      Integer    stepStart    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
56	[BUG]  [BUGGY]  Integer  stepStart  =  rki.getStep();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  rki.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  rki.getStep();	      Integer    stepStart    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
57	[BUG]  [BUGGY]  stepStart  =  interpolator.getStepInterpolator();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  interpolator.getStepInterpolator();  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  interpolator.getStepInterpolator();	  stepStart    =    interpolator.getStep();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
58	[BUG]  [BUGGY]  Integer  stepStart  =  t0;  stepSize  =  forward?  -step  :  -step;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  t0;  stepSize  =  forward?  -step  :  -step;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  t0;  stepSize  =  forward?  -step  :  -step;	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    managersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
59	[BUG]  [BUGGY]  Integer  stepStart  =  t0;  stepSize  =  forward?  -step  :  -1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  t0;  stepSize  =  forward?  -step  :  -1;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  t0;  stepSize  =  forward?  -step  :  -1;	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    managersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
60	[BUG]  [BUGGY]  Integer  stepStart  =  t0;  stepSize  =  forward?  -1  :  -step;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  t0;  stepSize  =  forward?  -1  :  -step;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  t0;  stepSize  =  forward?  -1  :  -step;	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    managersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
61	[BUG]  [BUGGY]  Integer  stepStart  =  t0;  stepSize=  step?  -step  :  -step;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  t0;  stepSize=  step?  -step  :  -step;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  t0;  stepSize=  step?  -step  :  -step;	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  interpolator);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  interpolator);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  step.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  step.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  step.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  managersManager);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  managersManager);  }  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  managersManager);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
66	[BUG]  [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  manager);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  manager);  }  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getSteps())  {  addEndTimeChecker(t0,  t,  manager);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getStepHandlers())  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getStepHandlers())  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps  >  0)  {  for(RungeKuttaStepInterpolator  step  :  rki.getStepHandlers())  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
68	[BUG]  [BUGGY]  int  stepStart  =  rki.stepStart;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepStart  =  rki.stepStart;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepStart  =  rki.stepStart;	      int    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
69	[BUG]  [BUGGY]  int  stepStart  =  interpolator.stepStart;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepStart  =  interpolator.stepStart;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepStart  =  interpolator.stepStart;	      int    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(steps  >  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Preconditions.checkState(steps  >  0);  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Preconditions.checkState(steps  >  0);	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(stages  >  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Preconditions.checkState(stages  >  0);  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Preconditions.checkState(stages  >  0);	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(stages  ==  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Preconditions.checkState(stages  ==  0);  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Preconditions.checkState(stages  ==  0);	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(stages!=  t0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Preconditions.checkState(stages!=  t0);  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Preconditions.checkState(stages!=  t0);	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
74	[BUG]  [BUGGY]  stepStart  -=  step;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  step;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  step;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  stepStart  -=  stages;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  stages;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  stages;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  stepStart  -=  interpolator.stages;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  interpolator.stages;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  interpolator.stages;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  Integer  stepStart  =(Integer)interpolator.getStep();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =(Integer)interpolator.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =(Integer)interpolator.getStep();	      Integer    stepStart    =(Integer)interpolator.clone();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
78	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(stages!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(stages!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(yTmp,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  step.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  step.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  step.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(yTmp,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t1,  t,  manager);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t1,  t,  manager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addEndTimeChecker(t1,  t,  manager);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    addEndTimeChecker(t0,    t,    manager);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  stepStart  =  t0;  stepSize=  forward?  t0  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  interpolator.storeTime(t0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  t0;  stepSize=  forward?  t0  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  interpolator.storeTime(t0);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  t0;  stepSize=  forward?  t0  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  interpolator.storeTime(t0);  }	      if(steps    ==    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(x,  step);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(x,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(x,  step);  }	      if(steps    ==    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  this,  step);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  this,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(y,  this,  step);  }	      if(steps    ==    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(y,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  manager.getEventsManager());  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  managersManager);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  managersManager);  }  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  managersManager);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  manager);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  manager);  }  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps  >  0)  {  for(int  step  =  0;  step  <  stepHandlers.size();  step++)  {  addEndTimeChecker(t0,  t,  manager);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  stepStart  -=  0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  0;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  0;	  stepStart    =    0;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  int  stepStart  =  t0  +  stepSize;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepStart  =  t0  +  stepSize;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepStart  =  t0  +  stepSize;	      int    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
89	[BUG]  [BUGGY]  int  stepStart  =  startTime;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  int  stepStart  =  startTime;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	int  stepStart  =  startTime;	      int    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
90	[BUG]  [BUGGY]  Integer  stepStart  =(Integer)super.stepStart.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =(Integer)super.stepStart.clone();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =(Integer)super.stepStart.clone();	      Integer    stepStart    =(Integer)prototype.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  double  stepSize  =  t0.getStep();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  double  stepSize  =  t0.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	double  stepSize  =  t0.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
92	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addStartTimeChecker(t0,  t,  manager);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addStartTimeChecker(t0,  t,  manager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  addStartTimeChecker(t0,  t,  manager);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    addEndTimeChecker(t0,    t,    manager);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
93	[BUG]  [BUGGY]  Integer  stepStart  =  t0  +  stepSize;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  t0  +  stepSize;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  t0  +  stepSize;	      Integer    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
94	[BUG]  [BUGGY]  Integer  stepStart  =  t0.doubleValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  t0.doubleValue();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  t0.doubleValue();	      Integer    stepStart    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  stepStart  -=  stepOffset;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  stepOffset;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  stepOffset;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
96	[BUG]  [BUGGY]  stepStart  -=  startTime;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  -=  startTime;  [BUGGY]    stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  -=  startTime;	  stepStart    -=    t0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
97	[BUG]  [BUGGY]  if(stepSize  >  0)  {  for(int  stepStart  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(stepSize  >  0)  {  for(int  stepStart  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(stepSize  >  0)  {  for(int  stepStart  =  t0;  stepSize  <  stages  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
98	[BUG]  [BUGGY]  if(stepSize  >  0)  {  for(int  stepStart  =  t0;  stepSize  <  steps  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(stepSize  >  0)  {  for(int  stepStart  =  t0;  stepSize  <  steps  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(stepSize  >  0)  {  for(int  stepStart  =  t0;  stepSize  <  steps  -  1;  stepStart++)  {  firstOrderDifferentialEquations.add(interpolator);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages    -    1;    stepStart++)    {    firstOrderDifferentialEquations.add(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
99	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step  +  1);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step  +  1);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(yTmp,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
100	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length  +  1;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length  +  1;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	if(steps!=  null)  {  for(int  step  =  0;  step  <  steps.length  +  1;  step++)  {  return  new  RungeKuttaStepInterpolator(yTmp,  step);  }	      if(steps!=    null)    {    for(int    step    =    0;    step    <    steps.length;    step++)    {    return    new    RungeKuttaStepInterpolator(yTmp,    step);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  Integer  stepStart  =  proto.getStep();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  Integer  stepStart  =  proto.getStep();  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	Integer  stepStart  =  proto.getStep();	      Integer    stepStart    =    t0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
102	[BUG]  [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  addEndTimeChecker(t0,  t  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  addEndTimeChecker(t0,  t  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  addEndTimeChecker(t0,  t	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    managersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
103	[BUG]  [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  t0;  stepSize=  forward?  -step  :  -step;	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  handler.reset();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  handler.reset();  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  handler.reset();  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  yDotK[stages  -  1],  forward);  }  interpolator.storeTime(t0);      [BUGGY]  stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [BUGGY]    stepStart  =  t0;  stepSize=  forward  ?  step  :  -step;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	128	128	2	replace	stepStart  =  t0;  stepSize=  forward?  -step  :  -step;  for(StepHandler  stepHandler  :  stepHandlers)  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }	      if(steps    >    0)    {    for(int    stepStart    =    t0;    stepSize    <    stages.length;    stepEnd++)    {    addEndTimeChecker(t0,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
