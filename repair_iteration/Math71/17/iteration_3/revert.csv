projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)prototype.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps==null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstepStart=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=t0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)super.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)prototype.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=System.currentTimeMillis();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=0L;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepStart=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=rki.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepEnd;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<blocks.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=startTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=stopTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)interpolator.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.cloneTree();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.cloneTicks();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=prototype.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=rki.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=y0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=rki.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStepInterpolator();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=forward?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=forward?-step:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=forward?-1:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=step?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(RungeKuttaStepInterpolatorstep:rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=rki.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=interpolator.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(steps>0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages>0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages==0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages!=t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stages;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stages;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t1,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?t0:-step;for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(x,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,this,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps>0){for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=startTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)super.stepStart.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepSize=t0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addStartTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0.doubleValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stepOffset;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=startTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepSize>0){for(intstepStart=t0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepSize>0){for(intstepStart=t0;stepSize<steps-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length+1;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=proto.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.doubleValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0.doubleValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.doubleValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<y.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<y.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stages.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<steps.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,this,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y,this,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<methods.length;step++){returnnewRungeKuttaStepInterpolator(y,this,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepSize-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepSize+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepSize-2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepStart=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128longstepStart=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepStart+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepStart-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y0,yDotK,stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y1,yDotK,stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y2,yDotK,stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:y.getSteps()){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:y0.getSteps()){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.startTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=startTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(steps==0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(steps!=0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(steps>1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.stepStart.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)super.stepStart.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-1:-1;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepSize=step?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepSize=y0?-step:y0;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getEventsManager()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:y.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:y0.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepOffset;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.getStepOffset();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y0,yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y1,yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yDotK,y[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages.length-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=y0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.size();step++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,managerManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<getSize();step++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(interpolator!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(interpolator==null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(interpolator!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHand
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime/1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.steps;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stages-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart/1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart+2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y0,yDotK,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y1,yDotK,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,forward,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.getStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.getStep(stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.startTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepEnd-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepEnd+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=y0+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=yTmp;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(step);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(steps);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)super.interpolator.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+stepSize-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+stepSize+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){addEndTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){addEndTimeChecker(t1,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){addStartTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?step:-step;for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepSize=forward?t0:-step;for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepTime+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepTime-2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=1;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stages.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){addStartTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=rki.getStep(interpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=rki.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepSize=forward?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=back?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-1:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<y.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.size();step++){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,managers.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=startTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=interpolator.startTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){addEndTimeChecker(t1,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t1,yDotK,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t2,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=forward?-1:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0;stepSize=forward?-step:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0;stepSize=forward?-1:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=y.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepSize=y0.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(interpolator!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=forward?-1:-1;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=prototype.getStepInterpolator();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getInitializingStepInterpolator();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStandardStepInterpolator();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages>1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages>=0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t0,t,coaches);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=yTmp.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;stepSize<steps.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=1;step<steps.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length-1;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepStart=t0+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<steps-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<steps-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<steps-1;stepEnd++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=t0;stepSize<steps.length-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:y.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:y0.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=step?-1:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0;stepSize=step?-step:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=System.currentTimeMillis()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=System.currentTimeMillis()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=System.currentTimeMillis()/2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stopTime-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)interpolator.clone()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=interpolator.stepStart-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=interpolator.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=interpolator.stepStart+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.size();step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t1,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=prototype.getStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=prototype.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length+1;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length+2;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<blocks.length+1;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)interpolator.cloneTree();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.cloneTime();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=t0;stepSize<steps.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=3;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=4;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep(stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages==1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages!=0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages==t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages>t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=interpolator.getStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=interpolator.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=interpolator.getStep(steps);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0+stepSize-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=y0+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(x,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(x,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)super.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)prototype.remove();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=rki.stepSize-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=y.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep()/1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<methods.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<methods.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,steps);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0.length;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=yTmp;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=0L;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=1;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stages.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<blocks.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(blocks!=null){for(intstep=0;step<blocks.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(blocks!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.length;step++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.clone();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)interpolator.cloneTicks();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.cloneTicks()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepSize=prototype.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepSize=interpolator.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepSize=rki.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y0,yDotK);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y1,yDotK);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=rki.getStep(interpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128while(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:y.getSteps()){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t0,t,managerManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStandardStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=prototype.getStep()-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luate(t0,rki.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luate(t0,rki.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luate(t0,rki.getSteps()){addEndTimeChecker(t0,t,managers.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepSize=rki.getSteps();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.getStep(steps);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=y0.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=stopTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages==null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages>1){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<steps.length+1;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<steps.length+1;step++){returnnewRungeKuttaStepInterpolator(yTmp,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){stepStart=t0;stepSize=forward?t0:-step;for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages>1){stepStart=t0;stepSize=forward?t0:-step;for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepEnd;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.getStep(0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=step?-step:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,managerManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128AssertionFailedToInit(interpolator,t0,stages,1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128AssertionFailedToInit(interpolator,t0,stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepSize=prototype.getInitialize(this,y0,yTmp);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepSize=prototype.getInitialize(this,y0,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepStart=0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stageHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep(interpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep(steps);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t1,rki);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t1,rki,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.getSteps();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<blocks.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=y0.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0;stepSize=forward?-1:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,this,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages>1){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlers
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages==null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlers
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=y0.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0.getIntValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stageHandlers.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=1;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=proto.getStep(interpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+interpolator.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)super.get();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.storeTime(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length+1;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(y0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(rki);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)interpolator.remove();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){addEndTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stages.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=0;stepSize<stages-1;stepStart++){firstOrderDifferentialEquations.add(interpolator);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepSize=1;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=rki.doubleValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0.doubleValue()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=rki.stepStart-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=rki.stepStart+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=y.stepStart;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stepOffset+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stepOffset-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages>1){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stage.length;step++){returnnewRungeKuttaStepInterpolator(y,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages!=y0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime(t0-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<steps.length+1;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stopTime+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.length;step++){addStartTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addStartTimeChecker(t0,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=interface.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStepInterpolator(t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,interface);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepSize=t0.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,stages+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,y2,yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=startTime+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime+2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)super.interpolator.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(int)prototype.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=System.currentTimeMillis()-2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stages+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorrki:rki.getSteps()){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addStartTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(rki,t0){for(RungeKuttaStepInterpolatorstep:rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luate(t0,rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(rki,t0){for(RungeKuttaStepInterpolatorstep:rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(rki,t0){for(RungeKuttaStepInterpolatorstep:rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager()
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0+step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewrungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=rki.getStep()+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,rki);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(x,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(steps!=null);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorrki:rki.getSteps()){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addEndTimeChecker(t1,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=phases;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){for(intstep=0;step<y.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+3;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstepStart=0;stepSize<stages.length;stepEnd++){addEndTimeChecker(t0,t,eventsHandlersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(t0-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stopTime(t0+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=yTmp.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getStandardSteps()){addEndTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getSteps()){addStartTimeChecker(t0,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepSize!=0){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.size();step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)interpolator.step();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=stopTime-2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepStart!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length+1,step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interface.getStepInterpolator();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=rki.getStep(steps);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepSize!=0){for(intstep=0;step<stepHandlers.length;step++){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?t0:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(t0,rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateStep(t0,rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(t0,rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateStep(t0,rki.getStepHandlers()){addEndTimeChecker(t0,t,manager.getEventsManager());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK[stages-1],back);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(x,stage);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0;stepSize=step?-1:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages>0){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepSize=step?-step:-step;for(StepHandlerstepHandler:stepHandlers){handler.reset();}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=stages-1;stepSize=forward?-1:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=stages-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepStart=t0+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128doublestepStart=t0.doubleValue();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.getStep(stepTime);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=stepTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(RungeKuttaStepInterpolatorstep:rki.getStandardSteps()){addEndTimeChecker(t0,t,manager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=proto.getStep(steps);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(stages!=stages);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128Preconditions.checkState(steps!=t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=prototype.getStep(steps);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=this.prototype.getStep();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=0L;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=prototype.getStep(stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart-=interpolator.stepCount;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(t0,rki.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(t0,rki.getSteps()){addEndTimeChecker(t0,t,manager.getEventsManager());
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(t0,rki.getSteps()){addEndTimeChecker(t0,t,managers.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128luateSteps(t0,rki.getSteps()){addEndTimeChecker(t0,manager.getEventsManager());}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=interpolator.stepStart-2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(x,this,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(y,this,step+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128((RungeKuttaStepInterpolator)prototype).initialize(this,yTmp,yDotK,backwards-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(x,step+1);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages>1){stepStart=t0;stepSize=forward?-1:-1;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t0,t,coachesManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128for(intstep=0;step<stepHandlers.size();step++){addEndTimeChecker(t1,t,managersManager);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=t0;stepSize=forward?t0:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepSize=stepStart?t0:-step;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepSize=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=this.stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepSize=step?t0:-step;for(StepHandlerstepHandler:stepHandlers){interpolator.storeTime(t0);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=(Integer)this.stepStart.clone();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=t0+stepOffset;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128intstepStart=this.stepTime;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepStart!=null){for(intstep=0;step<step.length;step++){returnnewRungeKuttaStepInterpolator(y,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=interpolator.getStep(steps-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){addEndTimeChecker(t1,t,managers);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stepSize!=0){for(intstep=0;step<stepHandlers.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<stepHandlers.size();step++){returnnewRungeKuttaStepInterpolator(yTmp,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128stepStart=stopTime?t0:t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128IntegerstepStart=t0+stepSize/2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128floatstepStart=y0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(yTmp,step+1,step);}
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages>1){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(stages!=null){stepStart=t0;stepSize=forward?-step:-step;for(StepHandlerstepHandler:stepHandlers){addEndTimeChecker(t0,t,eventsHandlersManager
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java128if(steps!=null){for(intstep=0;step<steps.length;step++){returnnewRungeKuttaStepInterpolator(xTmp,step);}
