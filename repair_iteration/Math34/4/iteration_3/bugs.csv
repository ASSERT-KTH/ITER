bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if(chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	compilable	  [FE]  NumberIsTooLargeException  	64	2	replace
2	[BUG]  [BUGGY]  if(chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {  [FE]  NumberIsTooLargeException  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	compilable	  [FE]  NumberIsTooLargeException  	64	2	replace
3	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	6	None	add
4	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  ';'  expected	6	None	add
5	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	6	None	add
6	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
7	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	6	None	add
8	[BUG]  [BUGGY]  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
9	[BUG]  [BUGGY]  If  (chromosomes.size()  *  chromosomeColl.size()  <  populationLimit)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  *  chromosomeColl.size()  <  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  *  chromosomeColl.size()  <  populationLimit)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
10	[BUG]  [BUGGY]  If  (chromosomes.size()  *  populationLimit  >  0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  *  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  *  populationLimit  >  0)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
11	[BUG]  [BUGGY]  if(chromosomes.size()  *  populationLimit  >  0)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  *  populationLimit  >  0)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  *  populationLimit  >  0)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
12	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  chromosomeColl    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  chromosomeColl  =  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  new  LinkedList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  new  LinkedList  <  Chromosome>();	  chromosomeColl    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
15	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  if  (chromosomes.size()  >  PopulationLimit  ||  chromosomes.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  if  (chromosomes.size()  >  PopulationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    if  (chromosomes.size()  >  PopulationLimit  ||  chromosomes.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
16	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  If  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  If  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    If  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
17	[BUG]  [BUGGY]  if(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {  [CE]  incompatible  types  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {	  if    (chromosomes.size()    <    populationLimit)    {    if    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  incompatible  types	34	None	replace
18	[BUG]  [BUGGY]  if  (LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  <  populationLimit)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  <  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  <  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    if    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	34	None	replace
19	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  <  =  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  0  ||  populationLimit  <  =  0)  {	  if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
20	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  this.chromosomes);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  this.chromosomes);	  chromosomeColl    =    Collections.synchronizedList(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
21	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  this.chromosomes.size());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  this.chromosomes.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  this.chromosomes.size());	  chromosomeColl    =    Collections.synchronizedList(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
22	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  true);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  true);	  chromosomeColl    =    Collections.synchronizedList(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
23	[BUG]  [BUGGY]  int  populationLimit  =  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  0;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  0;	  int    populationLimit    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
24	[BUG]  [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  int    populationLimit    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
25	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  populimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    populimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
26	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  populimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;  int  populimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    populimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
27	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  populationLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  this.chromosomes.size();  boolean  populationLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    populimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
28	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  int  populimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  int  populimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    populimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
29	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  false);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  false);	  int    chromosomeLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
30	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  populationLimit);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  populationLimit);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  populationLimit);	  int    chromosomeLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
31	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  true);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  true);	  int    chromosomeLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
32	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Integer  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Integer  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    Int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
33	[BUG]  [BUGGY]  Int  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Int  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Int  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    Int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
34	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
35	[BUG]  [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  not  a  statement	103	None	replace
36	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  LinkedList  <  Chromosome>();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
37	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populationLimit    =    chromosomeCOLl.size();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
38	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>());	  chromosomeColl    =    Collections.synchronizedList(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
39	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  this);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  this);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  this);	  chromosomeColl    =    Collections.synchronizedList(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  false);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  false);	  chromosomeColl    =    Collections.synchronizedList(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	add
42	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    Integer  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	add
43	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	add
44	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  PopulationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  PopulationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  PopulationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	add
45	[BUG]  [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl.size()  <  1)?  this.chromosomeColl.size()  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl.size()  <  1)?  this.chromosomeColl.size()  :  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =(this.chromosomeColl.size()  <  1)?  this.chromosomeColl.size()  :  1;	  int    chromosomeLimit    =    this.chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
46	[BUG]  [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl.size()  >  populationLimit)?  this.chromosomeColl.size()  -  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl.size()  >  populationLimit)?  this.chromosomeColl.size()  -  1  :  0;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =(this.chromosomeColl.size()  >  populationLimit)?  this.chromosomeColl.size()  -  1  :  0;	  int    chromosomeLimit    =    this.chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
47	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
48	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  If  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  If  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    If  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {	  	non-compiled	[CE]  ';'  expected	43	None	add
49	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  *  PopulationLimit  >  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  *  PopulationLimit  >  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    if  (chromosomes.size()  *  PopulationLimit  >  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
50	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    if  (chromosomes.size()  *  populationLimit  <  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
51	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.chromosomes);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.chromosomes);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
52	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  true);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  true);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
53	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.chromosomes.size());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.chromosomes.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.chromosomes.size());	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
54	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  false);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  false);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
55	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	48	None	add
56	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	48	None	add
57	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	48	None	add
58	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populate  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populate  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populate  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	48	None	add
59	[BUG]  [BUGGY]  if  (chromosomes.size()  <  =  populationLimit)  {  If  (chromosomes.size()  <  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  <  =  populationLimit)  {  If  (chromosomes.size()  <  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  <  =  populationLimit)  {  If  (chromosomes.size()  <  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    If    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
60	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  >  populationLimit)  {  [CE]  ';'  expected  [FE]              NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  >  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  >  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    If    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
61	[BUG]  [BUGGY]  If  (chromosomes.size()  <  populationLimit)  {  [CE]  ';'  expected  [FE]                NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  <  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  <  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    If    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
62	[BUG]  [BUGGY]  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    List    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
63	[BUG]  [BUGGY]  chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    List    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
64	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  PopulationLimit)  {  [CE]  cannot  find  symbol  PopulationLimit  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  PopulationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  >  PopulationLimit)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    if    (chromosomes.size()    *    chromosomeColl.size()    >    PopulationLimit)    {    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	66	None	replace
65	[BUG]  [BUGGY]  if(chromosomes.size()  *  populationLimit  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  *  populationLimit  <  =  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  *  populationLimit  <  =  0)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    if    (chromosomes.size()    *    chromosomeColl.size()    >    PopulationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
66	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >=    chromosomeColl.size())    {    if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
67	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit!=  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit!=  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >=    chromosomeColl.size())    {    if  (chromosomes.size()  +  populationLimit!=  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
68	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  >>  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  >>  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >=    chromosomeColl.size())    {    if  (chromosomes.size()  +  populationLimit  >>  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
69	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >=    chromosomeColl.size())    {    if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
71	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
73	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
74	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  chromosomes.clear();  this.chromosomes.clear();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  chromosomes.clear();  this.chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
76	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
78	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	3	1	add
79	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  chromosomesLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  this.chromosomes.size();  boolean  chromosomesLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomesLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
80	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  chromosomesLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomesLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
81	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;  int  chromosomesLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomesLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
82	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
83	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  If  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  [CE]  ';'  expected  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  If  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    If  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
84	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  if  (chromosomes.size()  >  0  ||  PopulationLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  if  (chromosomes.size()  >  0  ||  PopulationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    if  (chromosomes.size()  >  0  ||  PopulationLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
85	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  if  (chromosomes.size()  >  0  ||  populationsLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  if  (chromosomes.size()  >  0  ||  populationsLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    if  (chromosomes.size()  >  0  ||  populationsLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
86	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.unmodifiableList()  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList()  -  1;	  int    populationLimit    =    Collections.emptyList()    -    1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
87	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
88	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
89	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
90	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  PopulationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  PopulationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  PopulationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
91	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl.size());  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.remove(chromosomeColl.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.remove(chromosomeColl.size());	  chromosomes.remove(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
92	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl.clone());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.remove(chromosomeColl.clone());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.remove(chromosomeColl.clone());	  chromosomes.remove(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
93	[BUG]  [BUGGY]  chromosomes.add(chromosomeColl);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.add(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.add(chromosomeColl);	  chromosomes.remove(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
94	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    getChromosomes();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
95	[BUG]  [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    getChromosomes();    	non-compiled	[CE]  not  a  statement	106	None	replace
96	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    getChromosomes();    	non-compiled	[CE]  ')'  expected	106	None	replace
97	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  chromosomeLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  this.chromosomes.size();  boolean  chromosomeLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomeLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
98	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  chromosomeLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomeLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
99	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;  int  chromosomeLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomeLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
100	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomeColl);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.addAll(this.chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(this.chromosomeColl);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
101	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomesColl);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.addAll(this.chromosomesColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(this.chromosomesColl);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
102	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes,  this.chromosomeColl);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.addAll(this.chromosomes,  this.chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(this.chromosomes,  this.chromosomeColl);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
103	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  if  (chromosomes.size()  ==  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  if  (chromosomes.size()  ==  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    ==    populationLimit)    {    if  (chromosomes.size()  ==  populationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
104	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  if  (chromosomes.size()!=  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  if  (chromosomes.size()!=  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    ==    populationLimit)    {    if  (chromosomes.size()!=  populationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
105	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  if  (chromosomes.size()  >=  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  if  (chromosomes.size()  >=  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    ==    populationLimit)    {    if  (chromosomes.size()  >=  populationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
106	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  If  (chromosomes.size()  ==  populationLimit)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  If  (chromosomes.size()  ==  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    ==    populationLimit)    {    If  (chromosomes.size()  ==  populationLimit)  {	  	non-compiled	[CE]  ';'  expected	100	None	add
107	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Integer  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0)  {  if  (chromosomes.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0)  {  if  (chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    0)    {    if  (chromosomes.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
110	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0)  {  If  (chromosomes.size()  >  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0)  {  If  (chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    0)    {    If  (chromosomes.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
111	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newHashSet();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.newHashSet();	  Collection    <    Chromosome>    chromosomesColl    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
112	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList();	  Collection    <    Chromosome>    chromosomesColl    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
113	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newLinkedList();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newLinkedList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.newLinkedList();	  Collection    <    Chromosome>    chromosomesColl    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
114	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
115	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
116	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    Integer  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
117	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populateLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populateLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  populateLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
118	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    numberLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
119	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  numberLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;  int  numberLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    numberLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
120	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  numberLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  this.chromosomes.size();  boolean  numberLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    numberLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
121	[BUG]  [BUGGY]  collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
122	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    bodyLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
123	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  bodyLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;  int  bodyLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    bodyLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
124	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  bodyLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  this.chromosomes.size();  boolean  bodyLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    bodyLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
125	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    bodyLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
126	[BUG]  [BUGGY]  chromosomes.add(null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.add(null);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.add(null);	  chromosomes.add(this);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
127	[BUG]  [BUGGY]  chromosomes.add(new  Chromosome(this));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.add(new  Chromosome(this));  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.add(new  Chromosome(this));	  chromosomes.add(this);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
128	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashMap();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashMap();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashMap();	  Collection    <    Chromosome>    chromosomes    =    Collections.newHashMap();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
129	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    this.chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
130	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    this.chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
131	[BUG]  [BUGGY]  this.chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  this.chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	this.chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    this.chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
132	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
133	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomesLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
134	[BUG]  [BUGGY]  int  chromosomesLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
135	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
136	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
137	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          chromosomes.clear();    chromosomes.clear();    	non-compiled	[CE]  ')'  expected	2	None	replace
138	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	          chromosomes.clear();    chromosomes.clear();    	non-compiled	[CE]  ')'  expected	2	None	replace
139	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
140	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
141	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
142	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
143	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  ')'  expected	7	None	replace
144	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this.chromosomes);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this.chromosomes);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.synchronizedList(this);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
145	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  this);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  this);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  this);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.synchronizedList(this);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
146	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  new  LinkedList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  new  LinkedList  <  Chromosome>());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  new  LinkedList  <  Chromosome>());	  Collection    <    Chromosome>    chromosomesColl    =    Collections.synchronizedList(this);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
147	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size()  -  1;	  int    populationLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
148	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size()  +  1;	  int    populationLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
149	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	105	None	add
150	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();	  	non-compiled	[CE]  ';'  expected	105	None	add
151	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	105	None	add
152	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  getChromosomes();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  getChromosomes();	  	non-compiled	[CE]  cannot  find  symbol	105	None	add
153	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromesomes();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromesomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromesomes();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	105	None	add
154	[BUG]  [BUGGY]  if  (chromosomes.size()  >  1)  {  if  (chromosomes.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  1)  {  if  (chromosomes.size()  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    1)    {    if  (chromosomes.size()  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
155	[BUG]  [BUGGY]  if  (chromosomes.size()  >  1)  {  If  (chromosomes.size()  >  1)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  1)  {  If  (chromosomes.size()  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    1)    {    If  (chromosomes.size()  >  1)  {	  	non-compiled	[CE]  ';'  expected	78	None	add
156	[BUG]  [BUGGY]  if  (chromosomes.size()  >  1)  {  int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  1)  {  int  populationLimit  =  chromosomes.size();  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    1)    {    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
157	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  <  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  <  populationLimit  ||  chromosomes.size()  >  0)  {	  if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	121	2	replace
158	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit  ||  chromosomes.size()  >  0)  {  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  <  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  <  populationLimit  ||  chromosomes.size()  >  0)  {	  if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	121	2	replace
159	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  <  =  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  <  =  0)  {	  if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  1)  {	  if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    	compilable	  [FE]  AssertionError  	121	2	replace
161	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  1)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  1)  {	  if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    	compilable	  [FE]  AssertionError  	121	2	replace
162	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  numberLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
163	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newLinkedList();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newLinkedList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Lists.newLinkedList();	  Collection    <    Chromosome>    chromosomesColl    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
164	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList();	  Collection    <    Chromosome>    chromosomesColl    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
165	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(chromosomes.size());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(chromosomes.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(chromosomes.size());	  Collection    <    Chromosome>    chromosomesColl    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
166	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    bodyLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	88	None	add
167	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    bodyLimit    =    this.chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	88	None	add
168	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    bodyLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	88	None	add
169	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    bodyLimit    =    this.chromosomes.size();    Integer  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	88	None	add
170	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl.size());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList(chromosomeColl.size());	  int    populationLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
171	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  false);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  false);	  int    populationLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
172	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  true);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  true);	  int    populationLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
173	[BUG]  [BUGGY]  double  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  double  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	double  populationLimit  =  chromosomeColl.size();	  int    populationLimit    =    chromosomeColl.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
174	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  ==  0)  {	  if    (chromosomes.size()    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	15	2	replace
175	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  0)  {  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  ==  0)  {	  if    (chromosomes.size()    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	15	2	replace
176	[BUG]  [BUGGY]  if  (chromosomes.size()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  <  =  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  <  =  0)  {	  if    (chromosomes.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
177	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeCollLimit  =  chromosomeColl.size();	  int    chromosomeCollLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
178	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  this.chromosomeColl.size()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeCollLimit  =  this.chromosomeColl.size()  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeCollLimit  =  this.chromosomeColl.size()  -  1;	  int    chromosomeCollLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
179	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  this.chromosomeColl.size()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeCollLimit  =  this.chromosomeColl.size()  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeCollLimit  =  this.chromosomeColl.size()  +  1;	  int    chromosomeCollLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
180	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes.clear();    	non-compiled	[CE]  ';'  expected	5	None	replace
181	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes.clear();    	non-compiled	[CE]  ';'  expected	5	None	replace
182	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes.clear();    	non-compiled	[CE]  ';'  expected	5	None	replace
183	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;	  int    chromosomeLimit    =    Collections.emptyList()    -    1;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
184	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  -  1;	  int    chromosomeLimit    =    Collections.emptyList()    -    1;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
185	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
186	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  numberLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
187	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
188	[BUG]  [BUGGY]  int  numberLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
189	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.synchronizedList(new  LinkedList());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.synchronizedList(new  LinkedList());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.synchronizedList(new  LinkedList());	  Collection    <    Chromosome>    chromosomes    =    Collections.newLinkedList();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
190	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	102	None	add
191	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    Collection  <  Chromosome>  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  ';'  expected	102	None	add
192	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	102	None	add
193	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();  collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol	102	None	add
194	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	102	None	add
195	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  if  (chromosomes.size()  *  populationLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  if  (chromosomes.size()  *  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    0)    {    if  (chromosomes.size()  *  populationLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
196	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  If  (chromosomes.size()  *  populationLimit  >  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  If  (chromosomes.size()  *  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    0)    {    If  (chromosomes.size()  *  populationLimit  >  0)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
197	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  if  (chromosomes.size()  *  PopulationLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  if  (chromosomes.size()  *  PopulationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    0)    {    if  (chromosomes.size()  *  PopulationLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
198	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  if  (chromosomes.size()  *  populationsLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  if  (chromosomes.size()  *  populationsLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    0)    {    if  (chromosomes.size()  *  populationsLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
199	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  <  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  <  1)  {	  if    (chromosomes.size()    >    1)    {    	compilable	  [FE]  NumberIsTooLargeException  	79	2	replace
200	[BUG]  [BUGGY]  if  (chromosomes.size()  <  1)  {  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  <  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  <  1)  {	  if    (chromosomes.size()    >    1)    {    	compilable	  [FE]  NumberIsTooLargeException  	79	2	replace
201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  ==  1)  {	  if    (chromosomes.size()    >    1)    {    	compilable	  [FE]  AssertionError  	79	2	replace
202	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  1)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  ==  1)  {	  if    (chromosomes.size()    >    1)    {    	compilable	  [FE]  AssertionError  	79	2	replace
203	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    populimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	109	None	add
204	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    populimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	109	None	add
205	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    populimit    =    chromosomes.size();    Integer  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	109	None	add
206	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  PopulationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  PopulationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    populimit    =    chromosomes.size();    int  PopulationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	109	None	add
207	[BUG]  [BUGGY]  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [CE]  ';'  expected  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    If    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
208	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [CE]  ';'  expected  [FE]              NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    If    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
209	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [CE]  ';'  expected  [FE]                NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  >  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    If    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
210	[BUG]  [BUGGY]  If  (chromosomes.size()  +  populationLimit  <  =  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]                  NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  +  populationLimit  <  =  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  +  populationLimit  <  =  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    If    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
211	[BUG]  [BUGGY]  if(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    if    (chromosomes.size()    +    PopulationLimit    >    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	68	None	replace
212	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	107	None	add
213	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	107	None	add
214	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	107	None	add
215	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  populate  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  populate  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    int  populate  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	107	None	add
216	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  ';'  expected  [FE]            NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    int  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  ';'  expected	107	None	add
217	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptySet();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptySet();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptySet();	  final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
218	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyArray();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyArray();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyArray();	  final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
219	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptySet();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptySet();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.emptySet();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Set    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
220	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    bodyLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	76	None	add
221	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    bodyLimit    =    chromosomeColl.size();    Integer  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	76	None	add
222	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populateLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populateLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    bodyLimit    =    chromosomeColl.size();    int  populateLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	76	None	add
223	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  PopulationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  PopulationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    bodyLimit    =    chromosomeColl.size();    int  PopulationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	76	None	add
224	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  int    chromosomeLimit    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
225	[BUG]  [BUGGY]  int  chromosomeLimit  =  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  0;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  0;	  int    chromosomeLimit    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
226	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST  +  1;	  int    chromosomeLimit    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
227	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_SIZE;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_SIZE;	  int    chromosomeLimit    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
228	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST  |  Collections.EMPTY_LIST_LIST;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST  |  Collections.EMPTY_LIST_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST  |  Collections.EMPTY_LIST_LIST;	  int    chromosomeLimit    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
229	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST  +  1;	  int    chromosomeLimit    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
230	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
231	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
232	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    Integer  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
233	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
234	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  Collection    <    Chromosome>    chromosomesColl    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
235	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1;	  chromosomeColl    =    Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
236	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  |  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_P  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  |  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_P  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  |  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_P	  chromosomeColl    =    Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;    	non-compiled	[CE]  ';'  expected	113	None	replace
237	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  |  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  |  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  |  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_	  chromosomeColl    =    Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;    	non-compiled	[CE]  ';'  expected	113	None	replace
238	[BUG]  [BUGGY]  int  chromosomes  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomes  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomes  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomes    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
239	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]              NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomeColl.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomes    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
240	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomes.size();  [CE]  ';'  expected  [FE]                NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomes.size();    	non-compiled	[CE]  ';'  expected	53	None	replace
241	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl.size());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl.size());	  Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList(this.chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
242	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl,  this.chromosomeColl);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl,  this.chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl,  this.chromosomeColl);	  Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList(this.chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
243	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl.size());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl.size());	  Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList(this.chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
244	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
245	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
246	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	4	None	replace
247	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	4	None	replace
248	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE.size())  {  [CE]  cannot  find  symbol  EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  >  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE.size())  {	  if    (chromosomes.size()    +    populationLimit    >    this.chromosomeColl.size())    {    	non-compiled	[CE]  cannot  find  symbol  EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE	63	None	replace
249	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {  [CE]  cannot  find  symbol  EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [FE]              NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  >  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {	  if    (chromosomes.size()    +    populationLimit    >    this.chromosomeColl.size())    {    	non-compiled	[CE]  cannot  find  symbol  EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE	63	None	replace
250	[BUG]  [BUGGY]  chromosomeColl  =  Lists.  <  Chromosome>emptyList();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Lists.  <  Chromosome>emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Lists.  <  Chromosome>emptyList();	  chromosomeColl    =    Collections.    <    Chromosome>emptyList();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
251	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    Int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
252	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableSet(chromosomeColl);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableSet(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableSet(chromosomeColl);	  int    chromosomeLimit    =    Collections.emptySet();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
253	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    populimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	92	None	add
254	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    populimit    =    this.chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  populimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	92	None	add
255	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    populimit    =    this.chromosomes.size();    Integer  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	92	None	add
256	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    populimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  populimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	92	None	add
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	1	1	add
258	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	1	1	add
259	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	1	1	add
260	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	1	1	add
261	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  chromosomes.clear();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	1	1	add
263	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	1	1	add
264	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedList();  chromosomes.clear();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedList();  chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
265	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
266	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newLinkedList();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newLinkedList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newLinkedList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
267	[BUG]  [BUGGY]  list.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  list.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	list.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
268	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashSet();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashSet();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashSet();	  Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
269	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet(chromosomeColl);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet(chromosomeColl);	  Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  populationLimit  >  1)  {	  if    (chromosomes.size()    *    populationLimit    >    0)    {    	compilable	  [FE]  AssertionError  	46	2	replace
271	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  >  1)  {	  if    (chromosomes.size()    *    populationLimit    >    0)    {    	compilable	  [FE]  AssertionError  	46	2	replace
272	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  <  =  this.chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  <  =  this.chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  <  =  this.chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    <    =    chromosomeColl.size())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
273	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    numberLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	86	None	add
274	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    numberLimit    =    this.chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  numberLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	86	None	add
275	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    numberLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	86	None	add
276	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    numberLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	86	None	add
277	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    Int    populationLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
278	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    Int    populationLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
279	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
280	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  populationLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
281	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  populimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  populimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  populimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
282	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl);	  Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
283	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  bodyLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  bodyLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    bodyLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
284	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size()  +  1;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size()  +  1;	          int    populationLimit    =    chromosomeColl.size();    int    bodyLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
285	[BUG]  [BUGGY]  if  (chromosomes.size()  >  PopulationLimit)  {  [CE]  cannot  find  symbol  PopulationLimit  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  PopulationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  PopulationLimit)  {	  if    (chromosomes.size()    >    populationLimit)    {    if    (chromosomes.size()    >    PopulationLimit)    {    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	39	None	replace
286	[BUG]  [BUGGY]  chromosomes.addAll(Chromosome.EMPTY);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.addAll(Chromosome.EMPTY);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(Chromosome.EMPTY);	  chromosomes.addAll(this);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
287	[BUG]  [BUGGY]  if  (chromosomes.size()  +  PopulationLimit  >  chromosomeColl.size())  {  [CE]  cannot  find  symbol  PopulationLimit  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  PopulationLimit  >  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  PopulationLimit  >  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    if    (chromosomes.size()    +    PopulationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	58	None	replace
288	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  chromosomeColl.size()  -  1;	  int    chromosomeLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
289	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  chromosomeColl.size()  +  1;	  int    chromosomeLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
290	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size()  -  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size()  -  2;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  chromosomeColl.size()  -  2;	  int    chromosomeLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
291	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomesLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	84	None	add
292	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomesLimit    =    this.chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	84	None	add
293	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomesLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	84	None	add
294	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  PopulationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  PopulationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomesLimit    =    this.chromosomes.size();    int  PopulationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	84	None	add
295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  ==  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  populationLimit  ==  chromosomeColl.size())  {	  if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	44	2	replace
296	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  ==  chromosomeColl.size())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  ==  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  ==  chromosomeColl.size())  {	  if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	44	2	replace
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >=  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  populationLimit  >=  chromosomeColl.size())  {	  if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	44	2	replace
298	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >=  chromosomeColl.size())  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >=  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  >=  chromosomeColl.size())  {	  if    (chromosomes.size()    *    populationLimit    >    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	44	2	replace
299	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
300	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  populimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
301	[BUG]  [BUGGY]  If  (chromosomes.size()  >  populationLimit)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  >  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  >  populationLimit)  {	  if    (chromosomes.size()    >    populationLimit)    {    If    (chromosomes.size()    >    populationLimit)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
302	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {  [CE]  ';'  expected  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    If    (chromosomes.size()    +    populationLimit    >    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
303	[BUG]  [BUGGY]  If  (chromosomes.size()  >  0)  {  [CE]  ';'  expected  [FE]              NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    If    (chromosomes.size()    +    populationLimit    >    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
304	[BUG]  [BUGGY]  if(chromosomes.size()  >  0)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {  [CE]  ';'  expected  [FE]                NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  >  0)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  >  0)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    If    (chromosomes.size()    +    populationLimit    >    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
305	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomeLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  chromosomeLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomeLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
306	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomeLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
307	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  <  =  this.chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  <  =  this.chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  <  =  this.chromosomeColl.size())  {	  if    (chromosomes.size()    *    populationLimit    <    =    chromosomeColl.size())    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
308	[BUG]  [BUGGY]  int  chromosomeColl  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeColl  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeColl  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
309	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  chromosomeColl  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  chromosomeColl  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  chromosomeColl  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
310	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes  =  Collections.emptyList();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	3	1	add
311	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  this.chromosomes.clear();  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes  =  Collections.emptyList();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	3	1	add
312	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromososomes.clear();  [CE]  cannot  find  symbol  chromososomes  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromososomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromososomes.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromososomes	3	None	add
313	[BUG]  [BUGGY]  chromosomes.add(this.chromosomeColl);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.add(this.chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.add(this.chromosomeColl);	  chromosomes.remove(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
314	[BUG]  [BUGGY]  chromosomeColl  =  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  new  ArrayList  <  Chromosome>();	  chromosomeColl    =    Collections.    <    Chromosome>emptyList();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
315	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  0  ||  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  ==  0  ||  populationLimit  >  0)  {	  if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	17	2	replace
316	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  0  ||  populationLimit  >  0)  {  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  ==  0  ||  populationLimit  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  ==  0  ||  populationLimit  >  0)  {	  if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	17	2	replace
317	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
318	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  >=  1)?  0  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(chromosomes.size()  >=  1)?  0  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(chromosomes.size()  >=  1)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
319	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  chromosomeColl);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  chromosomeColl);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.synchronizedList(this);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
320	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  chromosomeColl.size());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  chromosomeColl.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList(chromosomeColl,  chromosomeColl.size());	  int    populationLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
321	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  populimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size();  int  populimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    populimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
322	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  populimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  boolean  populimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  this.chromosomes.size();  boolean  populimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    populimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
323	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
324	[BUG]  [BUGGY]  if  (LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  >  populationLimit)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  >  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  >  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    if    (chromosomes.size()    <    PopulationLimit)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	35	None	replace
325	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;  collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;  collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;  collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
326	[BUG]  [BUGGY]  float  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  float  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	float  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
327	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  numberLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size();  int  numberLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    numberLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
328	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    numberLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
329	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populitiveLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populitiveLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    bodyLimit    =    chromosomeColl.size();    int  populitiveLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	76	None	add
330	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(chromosomeColl);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(chromosomeColl);	  Collection    <    Chromosome>    chromosomesColl    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
331	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Lists.newArrayList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomeColl  =  Lists.newArrayList();	  Collection    <    Chromosome>    chromosomesColl    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	102	1	add
333	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	102	1	add
334	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	102	None	add
335	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes.clear();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    Collection  <  Chromosome>  chromosomes.clear();	  	non-compiled	[CE]  ';'  expected	102	None	add
336	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  int  populationLimit  =  chromosomes.size();  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    populationLimit    >    0)    {    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
337	[BUG]  [BUGGY]  if(!chromosomes.isEmpty())  {  If  (chromosomes.size()  <  populationLimit)  {  [CE]  ';'  expected  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(!chromosomes.isEmpty())  {  If  (chromosomes.size()  <  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(!chromosomes.isEmpty())  {  If  (chromosomes.size()  <  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    If    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
338	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	48	None	add
339	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  Collections.emptyList())  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  Collections.emptyList())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  >  Collections.emptyList())  {	  if    (chromosomes.size()    +    populationLimit    >    this.chromosomeColl.size())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	63	None	replace
340	[BUG]  [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  chromosomeColl.size()  :  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  chromosomeColl.size()  :  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(chromosomeColl.size()  <  1)?  chromosomeColl.size()  :  chromosomeColl.size();	  int    populationLimit    =    chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
341	[BUG]  [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();	  int    populationLimit    =    chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
342	[BUG]  [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST  +  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.EMPTY_LIST  +  1;	  int    populationLimit    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
343	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  chromosomeLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomeLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
344	[BUG]  [BUGGY]  if(chromosomes.size()  *  populationLimit  <  =  0)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  *  populationLimit  <  =  0)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  *  populationLimit  <  =  0)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
345	[BUG]  [BUGGY]  If  (chromosomes.size()  *  chromosomeColl.size()  >=  populationLimit)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  *  chromosomeColl.size()  >=  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  *  chromosomeColl.size()  >=  populationLimit)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
346	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populitiveLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populitiveLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  populitiveLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
347	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    bodyLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	88	None	add
348	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populateLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populateLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    bodyLimit    =    this.chromosomes.size();    int  populateLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  bodyLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	88	None	add
349	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()!=  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()!=  0)  {	  if    (chromosomes.size()    >    0)    {    	compilable	  [FE]  AssertionError  	15	2	replace
350	[BUG]  [BUGGY]  if  (chromosomes.size()!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()!=  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()!=  0)  {	  if    (chromosomes.size()    >    0)    {    	compilable	  [FE]  AssertionError  	15	2	replace
351	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populateLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populateLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  populateLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
352	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
353	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
354	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  int  populationLimit  =  chromosomes.size();  int  chromosomes.size();  }  [CE]  ';'  expected  [FE]                NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  int  populationLimit  =  chromosomes.size();  int  chromosomes.size();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  int  populationLimit  =  chromosomes.size();  int  chromosomes.size();  }	          int    populationLimit    =    chromosomes.size();    int    chromosomes.size();    	non-compiled	[CE]  ';'  expected	53	None	replace
355	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  chromosomes.size();  [CE]  ';'  expected  [FE]                  NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size()  +  1;  int  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomes.size();    	non-compiled	[CE]  ';'  expected	53	None	replace
356	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
357	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  bodyLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  +  1;  int  bodyLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    bodyLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
358	[BUG]  [BUGGY]  int  populationLimit  =  chromosomecoll.size();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomecoll.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomecoll.size();	  int    populationLimit    =    chromosomeColl.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
359	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size();  int  chromosomesLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomesLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
360	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  ')'  expected	103	None	replace
361	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0)  {  int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  0)  {  int  populationLimit  =  chromosomes.size();  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    0)    {    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
362	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
363	[BUG]  [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
364	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
365	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    populimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	109	None	add
366	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populationsLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populationsLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    populimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  populationsLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	109	None	add
367	[BUG]  [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl!=  null)?  this.chromosomeColl.size()  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl!=  null)?  this.chromosomeColl.size()  :  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =(this.chromosomeColl!=  null)?  this.chromosomeColl.size()  :  1;	  int    chromosomeLimit    =    this.chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
368	[BUG]  [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl!=  null)?  this.chromosomeColl.size()  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl!=  null)?  this.chromosomeColl.size()  :  0;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =(this.chromosomeColl!=  null)?  this.chromosomeColl.size()  :  0;	  int    chromosomeLimit    =    this.chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
369	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.  <  Chromosome>emptySet();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.  <  Chromosome>emptySet();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.  <  Chromosome>emptySet();	  int    chromosomeLimit    =    Collections.emptySet();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
370	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    numberLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	86	None	add
371	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    populimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	92	None	add
372	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populationsLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populationsLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    populimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  populationsLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	92	None	add
373	[BUG]  [BUGGY]  chromosomes.clear();  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
374	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  bodyLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size();  int  bodyLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    bodyLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
375	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  Int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  Int  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size();  Int  populationLimit  =  chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    Int    populationLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
376	[BUG]  [BUGGY]  Int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Int  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Int  populationLimit  =  chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    Int    populationLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
377	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()!=  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()!=  populationLimit)  {	  if    (chromosomes.size()    <    =    populationLimit)    {    	compilable	  [FE]  NumberIsTooLargeException  	31	2	replace
378	[BUG]  [BUGGY]  if  (chromosomes.size()!=  populationLimit)  {  [FE]  NumberIsTooLargeException  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()!=  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()!=  populationLimit)  {	  if    (chromosomes.size()    <    =    populationLimit)    {    	compilable	  [FE]  NumberIsTooLargeException  	31	2	replace
379	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populateLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populateLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomesLimit    =    this.chromosomes.size();    int  populateLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	84	None	add
380	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomesLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	84	None	add
381	[BUG]  [BUGGY]  Int  populationLimit  =  chromosomeColl.size();  Int  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Int  populationLimit  =  chromosomeColl.size();  Int  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Int  populationLimit  =  chromosomeColl.size();  Int  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    Int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
382	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (!chromosomes.isEmpty())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (!chromosomes.isEmpty())  {	  if    (chromosomes.size()    >    populationLimit)    {    if    (chromosomes.size()    >    PopulationLimit)    {    	compilable	  [FE]  AssertionError  	39	2	replace
383	[BUG]  [BUGGY]  if  (!chromosomes.isEmpty())  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (!chromosomes.isEmpty())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (!chromosomes.isEmpty())  {	  if    (chromosomes.size()    >    populationLimit)    {    if    (chromosomes.size()    >    PopulationLimit)    {    	compilable	  [FE]  AssertionError  	39	2	replace
384	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    <    =    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	60	1	replace
385	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {  [FE]  AssertionError  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    <    =    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	60	1	replace
386	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    <    =    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	60	2	replace
387	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {  [FE]  AssertionError  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  ==  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    <    =    chromosomeColl.size())    {    	compilable	  [FE]  AssertionError  	60	2	replace
388	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
389	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  chromosomeColl);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>(),  chromosomeColl);	  chromosomeColl    =    Collections.synchronizedList(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
390	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
391	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashArray();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashArray();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashArray();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
392	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.populationSize);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.populationSize);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.populationSize);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
393	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
394	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes.clear();    	non-compiled	[CE]  ';'  expected	5	None	replace
395	[BUG]  [BUGGY]  if  (chromosomes.size()  >  1)  {  if  (chromosomes.size()  >  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >  1)  {  if  (chromosomes.size()  >  2)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    1)    {    if  (chromosomes.size()  >  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
396	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  chromosomeColl);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  chromosomeColl);	  chromosomeColl    =    Collections.synchronizedList(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
397	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  new  LinkedList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  new  LinkedList  <  Chromosome>());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(this.chromosomes,  new  LinkedList  <  Chromosome>());	  chromosomeColl    =    Collections.synchronizedList(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
398	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomecoll.size();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  this.chromosomecoll.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  this.chromosomecoll.size();	  int    chromosomeLimit    =    this.chromosomeColl.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
399	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populitiveLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populitiveLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  populitiveLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
400	[BUG]  [BUGGY]  chromosomes.addAll(this,  chromosomeColl);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.addAll(this,  chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(this,  chromosomeColl);	  chromosomes.addAll(this);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
401	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populationsLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populationsLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  populationsLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	add
402	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.size()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeCollLimit  =  chromosomeColl.size()  -  1;	  int    chromosomeCollLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
403	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomes.size();    Int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
404	[BUG]  [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST_LIST  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST_LIST  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.EMPTY_LIST_LIST  -  1;	  int    populationLimit    =    Collections.emptyList()    -    1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
405	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomeColl();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomeColl();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomeColl();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    getChromosomes();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
406	[BUG]  [BUGGY]  if(chromosomes.size()  *  populationLimit  >  Collection.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {  [CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  *  populationLimit  >  Collection.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  *  populationLimit  >  Collection.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    if    (chromosomes.size()    *    chromosomeColl.size()    >    PopulationLimit)    {    	non-compiled	[CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE	66	None	replace
407	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
408	[BUG]  [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
409	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  -  1;	  chromosomeColl    =    Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
410	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  *  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  *  2;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  *  2;	  chromosomeColl    =    Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
411	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	6	1	add
412	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	6	1	add
413	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  List  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  List  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    List  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	6	None	add
414	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST_LIST;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST_LIST;	  int    chromosomeLimit    =    Collections.emptyList()    -    1;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
415	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST_SIZE  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST_SIZE  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST_SIZE  -  1;	  int    chromosomeLimit    =    Collections.emptyList()    -    1;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
416	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	105	2	add
417	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	105	2	add
418	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  List  <  Chromosome>  chromosomes  =  getChromosomes();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  List  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    List  <  Chromosome>  chromosomes  =  getChromosomes();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	105	None	add
419	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  ==  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  populationLimit  ==  0)  {	  if    (chromosomes.size()    *    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	46	2	replace
420	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  ==  0)  {  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  ==  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  ==  0)  {	  if    (chromosomes.size()    *    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	46	2	replace
421	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >=  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  populationLimit  >=  0)  {	  if    (chromosomes.size()    *    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	46	2	replace
422	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >=  0)  {  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  *  populationLimit  >=  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  >=  0)  {	  if    (chromosomes.size()    *    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	46	2	replace
423	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
424	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  Collections.emptyList();  chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	1	1	add
425	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  Collections.emptyList();  chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	1	1	add
426	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  chromosomes.clear();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
427	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;	  final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
428	[BUG]  [BUGGY]  final  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	  final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
429	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList(chromosomeColl);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList(chromosomeColl);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
430	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  new  ArrayList  <  Chromosome>();	  Collection    <    Chromosome>    chromosomesColl    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
431	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Collections.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomeColl  =  Collections.EMPTY_LIST;	  Collection    <    Chromosome>    chromosomesColl    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
432	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTYList();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTYList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTYList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
433	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
434	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROM  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROM  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROM	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  ')'  expected	29	None	replace
435	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CH  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CH  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl!=  null)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CH	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  ')'  expected	29	None	replace
436	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_BIGGER_THAN_POPULATION_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_BIGGER_THAN_POPULATION_SIZE;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_BIGGER_THAN_POPULATION_SIZE;	  int    chromosomeLimit    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
437	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap(chromosomeColl);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap(chromosomeColl);	  Collection    <    Chromosome>    chromosomes    =    Collections.newHashMap();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
438	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	107	None	add
439	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	107	None	add
440	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomes.get(chromosomeColl);  [CE]  illegal  start  of  type  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomes.get(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomes.get(chromosomeColl);	          int    populationLimit    =    chromosomes.size();    int    chromosomes    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
441	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomes  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]              NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomes  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  chromosomes  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomes    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
442	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >=  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  >=  populationLimit  ||  chromosomes.size()  >  0)  {	  if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    	compilable	  [FE]  AssertionError  	121	2	replace
443	[BUG]  [BUGGY]  if  (chromosomes.size()  >=  populationLimit  ||  chromosomes.size()  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if  (chromosomes.size()  >=  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >=  populationLimit  ||  chromosomes.size()  >  0)  {	  if    (chromosomes.size()    >    populationLimit    ||    chromosomes.size()    >    0)    {    	compilable	  [FE]  AssertionError  	121	2	replace
444	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size();  int  chromosomeLimit  =  this.chromosomes.size();	          int    populationLimit    =    this.chromosomes.size();    int    chromosomeLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
445	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(this.chromosomes);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(this.chromosomes);	  Collection    <    Chromosome>    chromosomesColl    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
446	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(0);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(0);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList(0);	  Collection    <    Chromosome>    chromosomesColl    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
447	[BUG]  [BUGGY]  If  (chromosomes.size()  <  =  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  <  =  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  <  =  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    If    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
448	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    getChromosomes();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
449	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    getChromosomes();    	non-compiled	[CE]  ')'  expected	106	None	replace
450	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  >  0  ||  populationLimit  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if(chromosomes.size()  >  0  ||  populationLimit  >  1)  {	  if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	17	2	replace
451	[BUG]  [BUGGY]  if(chromosomes.size()  >  0  ||  populationLimit  >  1)  {  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  >  0  ||  populationLimit  >  1)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  >  0  ||  populationLimit  >  1)  {	  if    (chromosomes.size()    >    0    ||    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	17	2	replace
452	[BUG]  [BUGGY]  If  (chromosomes.size()  *  populationLimit  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  *  populationLimit  <  =  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  *  populationLimit  <  =  0)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
453	[BUG]  [BUGGY]  double  populationLimit  =  this.chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  double  populationLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	double  populationLimit  =  this.chromosomes.size();	  int    populationLimit    =    this.chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
454	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
455	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  new  ArrayList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  new  ArrayList  <  Chromosome>());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this,  new  ArrayList  <  Chromosome>());	  Collection    <    Chromosome>    chromosomesColl    =    Collections.synchronizedList(this);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
456	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.length();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.length();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeCollLimit  =  chromosomeColl.length();	  int    chromosomeCollLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
457	[BUG]  [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  chromosomeColl.size()  :  1;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  chromosomeColl.size()  :  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(chromosomeColl.size()  <  1)?  chromosomeColl.size()  :  1;	  int    populationLimit    =    chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
458	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  int  bodyLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    bodyLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeCOLl.size();  int  bodyLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	76	None	add
459	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeCOLl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeCOLl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    bodyLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeCOLl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	76	None	add
460	[BUG]  [BUGGY]  chromosomes.addAll(Arrays.asList(this));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.addAll(Arrays.asList(this));  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(Arrays.asList(this));	  chromosomes.addAll(this);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
461	[BUG]  [BUGGY]  chromosomes.addAll(new  LinkedList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.addAll(new  LinkedList  <  Chromosome>());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(new  LinkedList  <  Chromosome>());	  chromosomes.addAll(this);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
462	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.clear();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
463	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Lists.newArrayList();  chromosomes.clear();  [CE]  cannot  find  symbol  Lists  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Lists.newArrayList();  chromosomes.clear();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  Lists.newArrayList();  chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol  Lists	1	None	add
464	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
465	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  numberLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  -  1;  int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
466	[BUG]  [BUGGY]  int  numberLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
467	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.get(0);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.get(0);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.get(0);	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
468	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashSet();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashSet();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedHashSet();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
469	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	6	None	add
470	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	6	None	add
471	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(this.chromosomeColl);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(this.chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableList(this.chromosomeColl);	  int    chromosomeLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
472	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  this.chromosomes);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl,  this.chromosomes);	  int    chromosomeLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
473	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl.size());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl.size());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl.size());	  int    chromosomeLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
474	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.get(0);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.get(0);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.get(0);	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
475	[BUG]  [BUGGY]  int  populationLimit  =(this.chromosomeColl!=  null?  this.chromosomeColl.size()  :  0);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(this.chromosomeColl!=  null?  this.chromosomeColl.size()  :  0);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(this.chromosomeColl!=  null?  this.chromosomeColl.size()  :  0);	  int    populationLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
476	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomeCollLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomeCollLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  chromosomeCollLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	48	None	add
477	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
478	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
479	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
480	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedSet(new  LinkedList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedSet(new  LinkedList  <  Chromosome>());  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedSet(new  LinkedList  <  Chromosome>());	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Set    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
481	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  0)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  0)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  0)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    List    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
482	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    bodyLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	88	None	add
483	[BUG]  [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  If  (chromosomes.size()  >  0)  {  [CE]  ';'  expected  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  If  (chromosomes.size()  >  0)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  ==  populationLimit)  {  If  (chromosomes.size()  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    If    (chromosomes.size()    +    populationLimit    >    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
484	[BUG]  [BUGGY]  if(chromosomes.size()  <  PopulationLimit)  {  [CE]  cannot  find  symbol  PopulationLimit  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomes.size()  <  PopulationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  <  PopulationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    if    (chromosomes.size()    <    PopulationLimit)    {    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	35	None	replace
485	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
486	[BUG]  [BUGGY]  if(chromosomesColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomesColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomesColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
487	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.cloneThan);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.cloneThan);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.cloneThan);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
488	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.dataset);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.dataset);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.dataset);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
489	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.groups);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.groups);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes,  this.groups);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.binarySearch(this.chromosomes);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
490	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    populimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	92	None	add
491	[BUG]  [BUGGY]  double  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  double  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	double  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
492	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  }	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
493	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	26	None	replace
494	[BUG]  [BUGGY]  If  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {  [CE]  ';'  expected  [FE]            NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  If  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	If  (chromosomes.size()  +  populationLimit  <  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    If    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
495	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this.chromosomes);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this.chromosomes);	  final    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
496	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    numberLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	86	None	add
497	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  super.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  super.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomeLimit    =    this.chromosomes.size();    int  populationLimit  =  super.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	90	None	add
498	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes  =  getChromosomes();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();  chromosomes  =  getChromosomes();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    getChromosomes();    chromosomes  =  getChromosomes();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	105	None	add
499	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST;	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
500	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.unmodifiableList();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.unmodifiableList();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.unmodifiableList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
501	[BUG]  [BUGGY]  int  populationLimit  =(this.chromosomes.size()  <  1)?  this.chromosomes.size()  :  1;  [CE]  illegal  start  of  type  [FE]        NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(this.chromosomes.size()  <  1)?  this.chromosomes.size()  :  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(this.chromosomes.size()  <  1)?  this.chromosomes.size()  :  1;	  int    populationLimit    =    this.chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
502	[BUG]  [BUGGY]  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
503	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(this.chromosomeColl);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(this.chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList(this.chromosomeColl);	  int    populationLimit    =    Collections.unmodifiableList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
504	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  chromosomeColl.size()  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]          NumberIsTooLargeException      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  chromosomeColl.size()  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  chromosomeColl.size()  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
505	[BUG]  [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  chromosomeCollLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  int  chromosomeCollLimit  =  this.chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        this.chromosomes.size();        int    chromosomesLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();  int  chromosomeCollLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	84	None	add
506	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.length;  Int  populationLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.length;  Int  populationLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.length;  Int  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    Int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
507	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList(this.chromosomes);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList(this.chromosomes);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList(this.chromosomes);	  Collection    <    Chromosome>    chromosomesColl    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
508	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
509	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl.size()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl.size()  -  1);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList(chromosomeColl.size()  -  1);	  int    populationLimit    =    Collections.emptyList()    -    1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
510	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomeLimit    =    chromosomes.size();    Integer  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	107	None	add
511	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.get();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.get();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomes.size();        int    populimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.get();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	109	None	add
512	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeCOLl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
513	[BUG]  [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl.size()  >  populationLimit)?  this.chromosomeColl.size()  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  chromosomeLimit  =(this.chromosomeColl.size()  >  populationLimit)?  this.chromosomeColl.size()  :  1;  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =(this.chromosomeColl.size()  >  populationLimit)?  this.chromosomeColl.size()  :  1;	  int    chromosomeLimit    =    this.chromosomeColl.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
514	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl,  this.populationSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl,  this.populationSize);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl,  this.populationSize);	  Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList(this.chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
515	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	boolean  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    bodyLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
516	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  bodyLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  -  1;  int  bodyLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    bodyLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
517	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.getBody();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.getBody();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.getBody();	          int    populationLimit    =    chromosomeColl.size();    int    bodyLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
518	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomes  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomes  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomes	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    this.chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  not  a  statement	27	None	replace
519	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.	          Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    this.chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
520	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayListWithCapacity(chromosomeColl);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayListWithCapacity(chromosomeColl);  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newArrayListWithCapacity(chromosomeColl);	  Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList(chromosomeColl);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
521	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeCOLl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	add
