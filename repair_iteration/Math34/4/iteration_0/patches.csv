bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  populationLimit  =  chromosomeColl.size();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	    int  populationLimit  =  chromosomeColl.size();		compilable	  [FE]  AssertionError  	8	2	add
2	[BUG]  [BUGGY]    int  populationLimit  =  chromosomeColl.size();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  populationLimit  =  chromosomeColl.size();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    int  populationLimit  =  chromosomeColl.size();		compilable	  [FE]  AssertionError  	8	2	add
3	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  populationLimit  =  chromosomes.size();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	    int  populationLimit  =  chromosomes.size();		compilable	  [FE]  NumberIsTooLargeException  	8	2	add
4	[BUG]  [BUGGY]    int  populationLimit  =  chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  populationLimit  =  chromosomes.size();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    int  populationLimit  =  chromosomes.size();		compilable	  [FE]  NumberIsTooLargeException  	8	2	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    chromosomes.clear();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	    chromosomes.clear();		compilable	  [FE]  AssertionError  	8	1	add
6	[BUG]  [BUGGY]    chromosomes.clear();  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    chromosomes.clear();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    chromosomes.clear();		compilable	  [FE]  AssertionError  	8	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	    Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();		compilable	  [FE]  AssertionError  	8	1	add
8	[BUG]  [BUGGY]    Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();		compilable	  [FE]  AssertionError  	8	1	add
9	[BUG]  [BUGGY]    Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();		non-compiled	[CE]  cannot  find  symbol	8	None	add
10	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  NumberIsTooLargeException  	7	3	replace
11	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [FE]  NumberIsTooLargeException  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  NumberIsTooLargeException  	7	3	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  AssertionError  	7	2	replace
13	[BUG]  [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  AssertionError  	7	2	replace
14	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]        AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  +  populationLimit  >  0)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  NumberIsTooLargeException  	7	2	replace
15	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  [FE]  NumberIsTooLargeException  [FE]        AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  >  0)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  NumberIsTooLargeException  	7	2	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  >  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  AssertionError  	7	2	replace
17	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  AssertionError  	7	2	replace
18	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  <  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  NumberIsTooLargeException  	7	2	replace
19	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  <  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  NumberIsTooLargeException  	7	2	replace
20	[BUG]  [BUGGY]    chromosomeColl  =  Collections.emptyList();  [CE]  final  parameter  chromosomeColl  may  not  be  assigned  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    chromosomeColl  =  Collections.emptyList();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    chromosomeColl  =  Collections.emptyList();		non-compiled	[CE]  final  parameter  chromosomeColl  may  not  be  assigned	8	None	add
21	[BUG]  [BUGGY]    int  populationLimit  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]      AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  populationLimit  =  Collections.emptyList();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    int  populationLimit  =  Collections.emptyList();		non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	8	None	add
22	[BUG]  [BUGGY]    int  chromosomeLimit  =  this.chromosomeColl.size();  [CE]  cannot  find  symbol  chromosomeColl  [FE]        AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  chromosomeLimit  =  this.chromosomeColl.size();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    int  chromosomeLimit  =  this.chromosomeColl.size();		non-compiled	[CE]  cannot  find  symbol  chromosomeColl	8	None	add
23	[BUG]  [BUGGY]    int  chromosomeLimit  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]          AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  chromosomeLimit  =  Collections.emptyList();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    int  chromosomeLimit  =  Collections.emptyList();		non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	8	None	add
24	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  populationLimit  =  this.chromosomes.size();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	    int  populationLimit  =  this.chromosomes.size();		compilable	  [FE]  NumberIsTooLargeException  	8	2	add
25	[BUG]  [BUGGY]    int  populationLimit  =  this.chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]    AssertionError  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]    int  populationLimit  =  this.chromosomes.size();  [BUGGY]  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	    int  populationLimit  =  this.chromosomes.size();		compilable	  [FE]  NumberIsTooLargeException  	8	2	add
