bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  chromosomes.clear();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	5	1	add
2	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  chromosomes.clear();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	5	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	5	1	add
4	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	5	1	add
5	[BUG]  [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes.clear();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes.clear();	  	non-compiled	[CE]  ';'  expected	5	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	5	1	add
7	[BUG]  [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	5	1	add
8	[BUG]  [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
9	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size()  +  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomes.size()  -  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  chromosomeColl  =  Collections.  <  Chromosome>emptyList();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomeColl  =  Collections.  <  Chromosome>emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.  <  Chromosome>emptyList();	      chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST;	      chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
13	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>());  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>());	      chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    	compilable	  [FE]  AssertionError  	15	2	replace
15	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0)  {  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    	compilable	  [FE]  AssertionError  	15	2	replace
16	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	15	2	replace
17	[BUG]  [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  0  ||  populationLimit  >  0)  {	  if    (chromosomes.size()    +    populationLimit    >    0)    {    	compilable	  [FE]  NumberIsTooLargeException  	15	2	replace
18	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomes.addAll(this.chromosomes);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(this.chromosomes);	      chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomes.remove(chromosomeColl);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.remove(chromosomeColl);	      chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  chromosomes.add(this);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomes.add(this);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.add(this);	      chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  Collections.EMPTY_LIST;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.EMPTY_LIST;	      int    populationLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
22	[BUG]  [BUGGY]  int  populationLimit  =  Collections.emptyList()  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  Collections.emptyList()  -  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.emptyList()  -  1;	      int    populationLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
23	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();	      Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(chromosomeColl);	      Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedList();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newLinkedList();	      Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	7	None	add
27	[BUG]  [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();  [CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  this.chromosomesColl  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	7	None	add
28	[BUG]  [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
29	[BUG]  [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	7	None	add
30	[BUG]  [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    List  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomesColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	7	None	add
31	[BUG]  [BUGGY]  if  (chromosomes.size()  <  =  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  <  =  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  <  =  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
32	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;	      int    populationLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  +  1;  [CE]  illegal  start  of  type  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  this.chromosomes.size()  +  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomes.size()  +  1;	      int    populationLimit    =    this.chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
34	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    <    populationLimit)    {    if  (chromosomes.size()  <  populationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
35	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  PopulationLimit)  {  [CE]  illegal  start  of  expression  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  PopulationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    <    populationLimit)    {    if  (chromosomes.size()  <  PopulationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
36	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  <  populationLimit)  {  [CE]  ';'  expected  [FE]        NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  <  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    <    populationLimit)    {    If  (chromosomes.size()  <  populationLimit)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
37	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  if  (chromosomes.size()  >  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  if  (chromosomes.size()  >  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    populationLimit)    {    if  (chromosomes.size()  >  populationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
38	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  If  (chromosomes.size()  >  populationLimit)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  If  (chromosomes.size()  >  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    populationLimit)    {    If  (chromosomes.size()  >  populationLimit)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
39	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  if  (chromosomes.size()  >  PopulationLimit)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  populationLimit)  {  if  (chromosomes.size()  >  PopulationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    >    populationLimit)    {    if  (chromosomes.size()  >  PopulationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
40	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  chromosomeColl.size();	      int    chromosomeLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
41	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  this.chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeCollLimit  =  this.chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeCollLimit  =  this.chromosomeColl.size();	      int    chromosomeLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
42	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomeColl.size()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  this.chromosomeColl.size()  -  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  this.chromosomeColl.size()  -  1;	      int    chromosomeLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	13	2	replace
44	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  >  chromosomeColl.size())  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	13	2	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  *  populationLimit  >  0)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	13	2	replace
46	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  populationLimit  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  >  0)  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	13	2	replace
47	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	3	None	add
48	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
49	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
50	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomes.size();  [CE]  int  cannot  be  dereferenced  [FE]        NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomes  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    int  chromosomes  =  chromosomes.size();	  	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	add
51	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
52	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
53	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomes.size();  [CE]  ';'  expected  [FE]            NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    int  chromosomes.size();	  	non-compiled	[CE]  ';'  expected	3	None	add
54	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST;	      int    chromosomeLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
55	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.unmodifiableList(chromosomeColl);	      int    chromosomeLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
56	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.emptySet();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  Collections.emptySet();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.emptySet();	      int    chromosomeLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
57	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
58	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  +  PopulationLimit  >  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  if  (chromosomes.size()  +  PopulationLimit  >  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    if  (chromosomes.size()  +  PopulationLimit  >  chromosomeColl.size())  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
59	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [CE]  ';'  expected  [FE]        NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    If  (chromosomes.size()  +  populationLimit  >  chromosomeColl.size())  {	  	non-compiled	[CE]  ';'  expected	10	None	add
60	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  <  =  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  <  =  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  <  =  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	compilable	  [FE]  NumberIsTooLargeException  	11	3	replace
62	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  >=  chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	compilable	  [FE]  NumberIsTooLargeException  	11	3	replace
63	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  this.chromosomeColl.size())  {  [CE]  cannot  find  symbol  chromosomeColl  [FE]        NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  this.chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  +  populationLimit  >  this.chromosomeColl.size())  {	  if    (chromosomes.size()    +    populationLimit    >    chromosomeColl.size())    {    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	11	None	replace
64	[BUG]  [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
65	[BUG]  [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    If  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
66	[BUG]  [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  if  (chromosomes.size()  *  chromosomeColl.size()  >  PopulationLimit)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  chromosomeColl.size()  >  populationLimit)  {  if  (chromosomes.size()  *  chromosomeColl.size()  >  PopulationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    if  (chromosomes.size()  *  chromosomeColl.size()  >  PopulationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
67	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  if  (chromosomes.size()  +  populationLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  if  (chromosomes.size()  +  populationLimit  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >    0)    {    if  (chromosomes.size()  +  populationLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
68	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  if  (chromosomes.size()  +  PopulationLimit  >  0)  {  [CE]  illegal  start  of  expression  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  if  (chromosomes.size()  +  PopulationLimit  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >    0)    {    if  (chromosomes.size()  +  PopulationLimit  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
69	[BUG]  [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {  [CE]  ';'  expected  [FE]        NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  +  populationLimit  >  0)  {  If  (chromosomes.size()  +  populationLimit  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if    (chromosomes.size()    +    populationLimit    >    0)    {    If  (chromosomes.size()  +  populationLimit  >  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
70	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  +  1;	      int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  chromosomeColl.size()  -  1;	      int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	1	None	add
73	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.size();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    int  chromosomeColl  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	1	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	1	2	add
75	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	1	2	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	1	2	add
77	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  bodyLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    int  bodyLimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	1	2	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  1)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  >  1)  {	  if    (chromosomes.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	17	2	replace
79	[BUG]  [BUGGY]  if  (chromosomes.size()  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  1)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  1)  {	  if    (chromosomes.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	17	2	replace
80	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.EMPTY_LIST;	      Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	final  Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	      Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.newArrayList();	      Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	24	None	add
84	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
85	[BUG]  [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  chromosomesLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    this.chromosomes.size();    int  chromosomesLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
86	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]        NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
87	[BUG]  [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]        NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  numberLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    this.chromosomes.size();    int  numberLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
88	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
89	[BUG]  [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  bodyLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    this.chromosomes.size();    int  bodyLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
90	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
91	[BUG]  [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
92	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
93	[BUG]  [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  int  populimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    this.chromosomes.size();    int  populimit  =  this.chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	24	2	add
94	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList(this.chromosomeColl);	      Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
95	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    Integer  populationLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	1	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	1	2	add
97	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	1	2	add
98	[BUG]  [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Set  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      Collection  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  Set  <  Chromosome>  chromosomesColl  =  Collections.emptyList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    Set  <  Chromosome>  chromosomesColl  =  Collections.emptyList();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
99	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  this.chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  this.chromosomeColl.size();	      int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  ==  populationLimit)  {	  if    (chromosomes.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	17	2	replace
101	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  ==  populationLimit)  {	  if    (chromosomes.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	17	2	replace
102	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	5	1	add
103	[BUG]  [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	5	1	add
104	[BUG]  [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  cannot  find  symbol  Lists	5	None	add
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();	  	compilable	  [FE]  AssertionError  	5	1	add
106	[BUG]  [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  getChromosomes();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  getChromosomes();	  	compilable	  [FE]  AssertionError  	5	1	add
107	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
108	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    int  chromosomeLimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
109	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	        int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
110	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  int  populimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    int  populimit  =  chromosomes.size();	  	compilable	  [FE]  NumberIsTooLargeException  	3	2	add
111	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Lists.newArrayList();	      Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
112	[BUG]  [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  populationLimit  =  Collections.unmodifiableList(chromosomeColl);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  populationLimit  =  Collections.unmodifiableList(chromosomeColl);	      int    populationLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
113	[BUG]  [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;	      chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
114	[BUG]  [BUGGY]  if  (chromosomes.size()  *  populationLimit  <  =  chromosomeColl.size())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  *  populationLimit  <  =  chromosomeColl.size())  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  *  populationLimit  <  =  chromosomeColl.size())  {	  if    (chromosomes.size()    *    chromosomeColl.size()    >    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
115	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomeColl.size()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  this.chromosomeColl.size()  +  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  this.chromosomeColl.size()  +  1;	      int    chromosomeLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
116	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.EMPTY_LIST_LIST;	      int    chromosomeLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
117	[BUG]  [BUGGY]  int  chromosomeLimit  =  Collections.emptyList()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  int  chromosomeLimit  =  Collections.emptyList()  -  1;  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	int  chromosomeLimit  =  Collections.emptyList()  -  1;	      int    chromosomeLimit    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
118	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  Int  populationLimit  =  chromosomeColl.size();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  Int  populationLimit  =  chromosomeColl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    Int  populationLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
119	[BUG]  [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeCOLl.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeCOLl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	1	None	add
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {	  if    (chromosomes.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	17	2	replace
121	[BUG]  [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if  (chromosomes.size()  >  populationLimit  ||  chromosomes.size()  >  0)  {	  if    (chromosomes.size()    >    populationLimit)    {    	compilable	  [FE]  AssertionError  	17	2	replace
122	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();	      Collection    <    Chromosome>    chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
123	[BUG]  [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomeColl  =  Collections.synchronizedList(this.chromosomes);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomeColl  =  Collections.synchronizedList(this.chromosomes);	      chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
124	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.synchronizedList(this);	      Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
125	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	Collection  <  Chromosome>  chromosomesColl  =  Collections.binarySearch(this.chromosomes);	      Collection    <    Chromosome>    chromosomesColl    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
126	[BUG]  [BUGGY]  chromosomes.addAll(this);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]  chromosomes.addAll(this);  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	chromosomes.addAll(this);	      chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]      int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  chromosomes.size();  [CE]  cannot  find  symbol  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  chromosomes.size();  Int  populationLimit  =  chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    chromosomes.size();    Int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
128	[BUG]  [BUGGY]      int  populationLimit  =  this.chromosomes.size();  Int  populationLimit  =  this.chromosomes.size();  [CE]  cannot  find  symbol  [FE]    NumberIsTooLargeException    [CONTEXT]    public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {    [BUGGY]      int  populationLimit  =  this.chromosomes.size();  Int  populationLimit  =  this.chromosomes.size();  [BUGGY]    if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	        int    populationLimit    =    this.chromosomes.size();    Int  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
