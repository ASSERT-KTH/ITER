bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(chromosomes  ==  null  ||  populationLimit  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if(chromosomes  ==  null  ||  populationLimit  <  =  0)  {  [BUGGY]  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	if(chromosomes  ==  null  ||  populationLimit  <  =  0)  {	if  (chromosomes  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    [BUGGY]  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	  	if  (chromosomes  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]    this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit));  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit));  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit));		non-compiled	[CE]  cannot  find  symbol	26	None	add
4	[BUG]  [BUGGY]    this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit);		non-compiled	[CE]  cannot  find  symbol	26	None	add
5	[BUG]  [BUGGY]    this.chromosomes  =  chromosomes.get(populationLimit);  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    this.chromosomes  =  chromosomes.get(populationLimit);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    this.chromosomes  =  chromosomes.get(populationLimit);		non-compiled	[CE]  incompatible  types	26	None	add
6	[BUG]  [BUGGY]    this.chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]          AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    this.chromosomes  =  Lists.newArrayList();  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    this.chromosomes  =  Lists.newArrayList();		non-compiled	[CE]  cannot  find  symbol  Lists	26	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    this.chromosomes  =  Collections.emptyList();  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	add	    this.chromosomes  =  Collections.emptyList();		compilable	  [FE]  AssertionError  	26	1	add
8	[BUG]  [BUGGY]    this.chromosomes  =  Collections.emptyList();  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    this.chromosomes  =  Collections.emptyList();  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    this.chromosomes  =  Collections.emptyList();		compilable	  [FE]  AssertionError  	26	1	add
9	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  >  populationLimit)  {  [BUGGY]  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	add	if(chromosomes  ==  null  ||  chromosomes.size()  >  populationLimit)  {	if  (chromosomes  ==  null)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	25	4	replace
10	[BUG]  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  >  populationLimit)  {  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  >  populationLimit)  {  [BUGGY]  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	if(chromosomes  ==  null  ||  chromosomes.size()  >  populationLimit)  {	if  (chromosomes  ==  null)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	25	4	replace
11	[BUG]  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  <  =  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  <  =  populationLimit)  {  [BUGGY]  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	if(chromosomes  ==  null  ||  chromosomes.size()  <  =  populationLimit)  {	if  (chromosomes  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
12	[BUG]  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	26	None	add
13	[BUG]  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	26	None	add
14	[BUG]  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit);  [CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN  [FE]        AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit);		non-compiled	[CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN	26	None	add
15	[BUG]  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	26	None	add
16	[BUG]  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION);  [CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [FE]            AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION);		non-compiled	[CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	26	None	add
17	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  <  populationLimit)  {  [BUGGY]  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	add	if(chromosomes  ==  null  ||  chromosomes.size()  <  populationLimit)  {	if  (chromosomes  ==  null)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	25	6	replace
18	[BUG]  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  <  populationLimit)  {  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if(chromosomes  ==  null  ||  chromosomes.size()  <  populationLimit)  {  [BUGGY]  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	if(chromosomes  ==  null  ||  chromosomes.size()  <  populationLimit)  {	if  (chromosomes  ==  null)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	25	6	replace
19	[BUG]  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomes  =  chromosomes;  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomes  =  chromosomes;  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomes  =  chromosomes;		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	26	None	add
20	[BUG]  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.populationLimit  =  0;  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.populationLimit  =  0;  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	65	65	1	replace	    super(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.populationLimit  =  0;		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	26	None	add
