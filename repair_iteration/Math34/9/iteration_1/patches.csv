bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
2	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
3	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
4	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
5	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	15	None	add
6	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }	  	non-compiled	[CE]  ')'  expected	15	None	add
7	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }	  	non-compiled	[CE]  ')'  expected	15	None	add
8	[BUG]  [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit,  populationLimit));  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit,  populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit,  populationLimit));	      this.chromosomes.add(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	5	None	replace
9	[BUG]  [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit),  populationLimit);  [CE]  no  suitable  method  found  for  add(ArrayList<Chromosome>,int)  [FE]              AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit),  populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit),  populationLimit);	      this.chromosomes.add(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  add(ArrayList<Chromosome>,int)	5	None	replace
10	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes,  new  ArrayList  <  Chromosome>(populationLimit));  [CE]  no  suitable  method  found  for  addAll(List<Chromosome>,ArrayList<Chromosome>)  [FE]                AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(chromosomes,  new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(chromosomes,  new  ArrayList  <  Chromosome>(populationLimit));	      this.chromosomes.add(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  addAll(List<Chromosome>,ArrayList<Chromosome>)	5	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	7	1	add
12	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	7	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
14	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
16	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	7	1	add
18	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	7	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(this.chromosomes);    this.chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	7	1	add
20	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    this.chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	7	1	add
21	[BUG]  [BUGGY]  chromosomes.addAll(this.populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.addAll(this.populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	chromosomes.addAll(this.populationLimit);	      chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	2	None	replace
22	[BUG]  [BUGGY]  chromosomes.add(this.chromosomes);  [CE]  no  suitable  method  found  for  add(List<Chromosome>)  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.add(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	chromosomes.add(this.chromosomes);	      chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(List<Chromosome>)	2	None	replace
23	[BUG]  [BUGGY]  chromosomes.add(this.populationLimit);  [CE]  no  suitable  method  found  for  add(int)  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.add(this.populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	chromosomes.add(this.populationLimit);	      chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	2	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(chromosomes);    this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  AssertionError  	3	1	add
25	[BUG]  [BUGGY]      this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(chromosomes);    this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  AssertionError  	3	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	3	1	add
27	[BUG]  [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	3	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  AssertionError  	3	1	add
29	[BUG]  [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  AssertionError  	3	1	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  this.chromosomes.removeAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(chromosomes);    this.chromosomes.removeAll(chromosomes);	  	compilable	  [FE]  AssertionError  	3	1	add
31	[BUG]  [BUGGY]      this.chromosomes.addAll(chromosomes);  this.chromosomes.removeAll(chromosomes);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  this.chromosomes.removeAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(chromosomes);    this.chromosomes.removeAll(chromosomes);	  	compilable	  [FE]  AssertionError  	3	1	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  chromosomes.addAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(chromosomes);    chromosomes.addAll(chromosomes);	  	compilable	  [FE]  AssertionError  	3	1	add
33	[BUG]  [BUGGY]      this.chromosomes.addAll(chromosomes);  chromosomes.addAll(chromosomes);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  chromosomes.addAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(chromosomes);    chromosomes.addAll(chromosomes);	  	compilable	  [FE]  AssertionError  	3	1	add
34	[BUG]  [BUGGY]  this.chromosomes.addAll(populationLimit,  false);  [CE]  no  suitable  method  found  for  addAll(int,boolean)  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(populationLimit,  false);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(populationLimit,  false);	  this.chromosomes.addAll(populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,boolean)	9	None	replace
35	[BUG]  [BUGGY]  this.chromosomes.addAll(populationLimit,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(populationLimit,  populationLimit);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(populationLimit,  populationLimit);	  this.chromosomes.addAll(populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	9	None	replace
36	[BUG]  [BUGGY]  this.chromosomes.addAll(count,  populationLimit);  [CE]  cannot  find  symbol  count  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(count,  populationLimit);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(count,  populationLimit);	  this.chromosomes.addAll(populationLimit);    	non-compiled	[CE]  cannot  find  symbol  count	9	None	replace
37	[BUG]  [BUGGY]  this.chromosomes.add(chromosomes,  populationLimit);  [CE]  no  suitable  method  found  for  add(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(chromosomes,  populationLimit);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(chromosomes,  populationLimit);	  this.chromosomes.add(chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(List<Chromosome>,int)	12	None	replace
38	[BUG]  [BUGGY]  this.chromosomes.add(chromosomes.size(),  populationLimit);  [CE]  no  suitable  method  found  for  add(int,int)  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(chromosomes.size(),  populationLimit);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(chromosomes.size(),  populationLimit);	  this.chromosomes.add(chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,int)	12	None	replace
39	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit),  false);  [CE]  no  suitable  method  found  for  addAll(ArrayList<Chromosome>,boolean)  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit),  false);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit),  false);	  this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ArrayList<Chromosome>,boolean)	11	None	replace
40	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit,  false));  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit,  false));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit,  false));	  this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	11	None	replace
41	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));	  this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	11	3	replace
42	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));	  this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	11	3	replace
43	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	      this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	8	3	replace
44	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	      this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	8	3	replace
45	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	      this.chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  ')'  expected	8	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
47	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
49	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
50	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.addAll(this.chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	1	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
52	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
54	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);  this.chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
55	[BUG]  [BUGGY]  this.chromosomes.addAll(this.populationLimit,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(this.populationLimit,  populationLimit);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(this.populationLimit,  populationLimit);	  this.chromosomes.addAll(this.populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	13	None	replace
56	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(populationLimit,  new  ArrayList  <  Chromosome>());  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	this.chromosomes.addAll(populationLimit,  new  ArrayList  <  Chromosome>());	  this.chromosomes.addAll(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	13	7	replace
57	[BUG]  [BUGGY]  this.chromosomes.addAll(populationLimit,  new  ArrayList  <  Chromosome>());  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(populationLimit,  new  ArrayList  <  Chromosome>());  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(populationLimit,  new  ArrayList  <  Chromosome>());	  this.chromosomes.addAll(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	13	7	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	  	compilable	  [FE]  AssertionError  	10	1	add
59	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [FE]  AssertionError  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	  	compilable	  [FE]  AssertionError  	10	1	add
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	  	compilable	  [FE]  AssertionError  	10	1	add
61	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [FE]  AssertionError  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	  	compilable	  [FE]  AssertionError  	10	1	add
62	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  new  ArrayList  <  Chromosome>(populationLimit));  [CE]  ';'  expected  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    new  ArrayList  <  Chromosome>(populationLimit));	  	non-compiled	[CE]  ';'  expected	10	None	add
63	[BUG]  [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit,  populationLimit));  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit,  populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit,  populationLimit));	      this.chromosomes.add(new    LinkedHashMap    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
64	[BUG]  [BUGGY]  this.chromosomes.add(new  HashMap  <  Chromosome>(populationLimit));  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  HashMap  <  Chromosome>(populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  HashMap  <  Chromosome>(populationLimit));	      this.chromosomes.add(new    LinkedHashMap    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
65	[BUG]  [BUGGY]  this.chromosomes.add(new  TreeMap  <  Chromosome>(populationLimit));  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  TreeMap  <  Chromosome>(populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  TreeMap  <  Chromosome>(populationLimit));	      this.chromosomes.add(new    LinkedHashMap    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
66	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	      chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	16	3	replace
67	[BUG]  [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	      chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	16	3	replace
68	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));	      chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	16	3	replace
69	[BUG]  [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	chromosomes.addAll(new  ArrayList  <  Chromosome>(this.populationLimit));	      chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	16	3	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	      this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  AssertionError  	4	1	replace
71	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	      this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  AssertionError  	4	1	replace
72	[BUG]  [BUGGY]  this.chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit));  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit));	      this.chromosomes.add(new    LinkedList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
73	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(populationLimit));  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(populationLimit));	      this.chromosomes.add(new    LinkedList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	3	1	add
75	[BUG]  [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	3	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.addAll(this.chromosomes);    synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	1	1	add
77	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.addAll(this.chromosomes);    synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	1	1	add
78	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	      this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	8	3	replace
79	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	      this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	8	3	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
81	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
82	[BUG]  [BUGGY]  this.chromosomes.addAll(populationLimit,  true);  [CE]  no  suitable  method  found  for  addAll(int,boolean)  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(populationLimit,  true);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(populationLimit,  true);	  this.chromosomes.addAll(this.populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,boolean)	13	None	replace
83	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	chromosomes.removeAll(this.chromosomes);	      chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	16	3	replace
84	[BUG]  [BUGGY]  chromosomes.removeAll(this.chromosomes);  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.removeAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	chromosomes.removeAll(this.chromosomes);	      chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	16	3	replace
85	[BUG]  [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit),  false);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit),  false);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit),  false);	      this.chromosomes.add(new    LinkedHashMap    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
86	[BUG]  [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit,  false));  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit,  false));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit,  false));	      this.chromosomes.add(new    LinkedHashMap    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
87	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  This.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [CE]  package  This  does  not  exist  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  This.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    This.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	  	non-compiled	[CE]  package  This  does  not  exist	10	None	add
88	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	      this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  ')'  expected	4	None	replace
89	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	      this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  ')'  expected	4	None	replace
90	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.clear();    chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
91	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
92	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.clear();    chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
93	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    chromosomes.clear();  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
94	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        chromosomes.clear();    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
95	[BUG]  [BUGGY]      chromosomes.clear();  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.clear();  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.clear();    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	15	3	add
96	[BUG]  [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit),  false);  [CE]  no  suitable  method  found  for  add(ArrayList<Chromosome>,boolean)  [FE]            AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit),  false);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit),  false);	      this.chromosomes.add(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  add(ArrayList<Chromosome>,boolean)	5	None	replace
97	[BUG]  [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit,  false));  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]              AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit,  false));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  ArrayList  <  Chromosome>(populationLimit,  false));	      this.chromosomes.add(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	5	None	replace
98	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit  +  1));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit  +  1));	  this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	11	3	replace
99	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit  +  1));  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit  +  1));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit  +  1));	  this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	11	3	replace
100	[BUG]  [BUGGY]  this.chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit),  false);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit),  false);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit),  false);	      this.chromosomes.add(new    LinkedList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
101	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	      this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	8	3	replace
102	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	      this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	8	3	replace
103	[BUG]  [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit),  populationLimit);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit),  populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit),  populationLimit);	      this.chromosomes.add(new    LinkedHashMap    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
104	[BUG]  [BUGGY]  chromosomes.addAll(this);  [CE]  no  suitable  method  found  for  addAll(ListPopulation)  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  chromosomes.addAll(this);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	chromosomes.addAll(this);	      chromosomes.clear();    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation)	16	None	replace
105	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit),  true);  [CE]  no  suitable  method  found  for  addAll(ArrayList<Chromosome>,boolean)  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit),  true);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit),  true);	  this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ArrayList<Chromosome>,boolean)	11	None	replace
106	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  }  else  {  chromosomes.addAll(this.chromosomes);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  }  else  {  chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);  }  else  {  chromosomes.addAll(this.chromosomes);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
108	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  AssertionError  	7	1	add
109	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(this.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(this.  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	        this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(this.	  	non-compiled	[CE]  <identifier>  expected	7	None	add
110	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }	      this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	4	3	replace
111	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }	      this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	4	3	replace
112	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	      this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	4	None	replace
113	[BUG]  [BUGGY]  this.chromosomes.addAll(populationLimit,  0);  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]        AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(populationLimit,  0);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(populationLimit,  0);	  this.chromosomes.addAll(populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	9	None	replace
114	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }	      chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	2	3	replace
115	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }	      chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	2	3	replace
116	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	      chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	2	3	replace
117	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	      chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	2	3	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  this.chromosomes.removeAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	add	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    this.chromosomes.removeAll(new  ArrayList  <  Chromosome>(populationLimit));	  	compilable	  [FE]  AssertionError  	10	1	add
119	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  this.chromosomes.removeAll(new  ArrayList  <  Chromosome>(populationLimit));  [FE]  AssertionError  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  this.chromosomes.removeAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(new    ArrayList    <    Chromosome>(populationLimit));    this.chromosomes.removeAll(new  ArrayList  <  Chromosome>(populationLimit));	  	compilable	  [FE]  AssertionError  	10	1	add
120	[BUG]  [BUGGY]  this.chromosomes.addAll(populationLimit,  this.populationLimit);  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]          AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.addAll(populationLimit,  this.populationLimit);  [BUGGY]    }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.addAll(populationLimit,  this.populationLimit);	  this.chromosomes.addAll(this.populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	13	None	replace
121	[BUG]  [BUGGY]  this.chromosomes.add(new  TreeSet  <  Chromosome>(populationLimit));  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);    [BUGGY]  this.chromosomes.add(new  TreeSet  <  Chromosome>(populationLimit));  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	77	77	1	replace	this.chromosomes.add(new  TreeSet  <  Chromosome>(populationLimit));	      this.chromosomes.add(new    LinkedList    <    Chromosome>(populationLimit));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
