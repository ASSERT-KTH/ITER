bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	75	1	add
2	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	75	1	add
3	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	75	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	75	1	add
5	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	75	1	add
6	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  This  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  This	75	None	add
7	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
8	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
9	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_P  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_P  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_P	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
10	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
11	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	119	3	add
12	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	119	3	add
13	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit;  [CE]  cannot  find  symbol  PopulationLimit  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	119	None	add
14	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	119	3	add
15	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	119	3	add
16	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationsLimit;  [CE]  cannot  find  symbol  populationsLimit  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationsLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationsLimit;	  	non-compiled	[CE]  cannot  find  symbol  populationsLimit	119	None	add
17	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	new  ArrayList  <  Chromosome>(chromosomes.size());	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
18	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	new  ArrayList  <  Chromosome>(chromosomes.size());	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
19	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
20	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;	  	compilable	  [FE]  AssertionError  	7	1	add
22	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;	  	compilable	  [FE]  AssertionError  	7	1	add
23	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    this.populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;	  	non-compiled	[CE]  not  a  statement	7	None	add
24	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  PopulationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [CE]  cannot  find  symbol  PopulationLimit  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  PopulationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  PopulationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	7	None	add
25	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  PopulationLimit  -  1;  [CE]  cannot  find  symbol  PopulationLimit  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  PopulationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  PopulationLimit  -  1;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	7	None	add
26	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  numberLimit  -  1;  [CE]  cannot  find  symbol  numberLimit  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  numberLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  numberLimit  -  1;	  	non-compiled	[CE]  cannot  find  symbol  numberLimit	7	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;	  	compilable	  [FE]  AssertionError  	1	1	add
28	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;	  	compilable	  [FE]  AssertionError  	1	1	add
29	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(chromosomes  ==  null)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    if(chromosomes  ==  null)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }	  	compilable	  [FE]  AssertionError  	1	1	add
31	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(chromosomes  ==  null)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(chromosomes  ==  null)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    if(chromosomes  ==  null)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }	  	compilable	  [FE]  AssertionError  	1	1	add
32	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  PopulationLimit;  this.populationLimit  -=  populationLimit;  [CE]  cannot  find  symbol  PopulationLimit  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  PopulationLimit;  this.populationLimit  -=  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    this.populationLimit  -=  PopulationLimit;  this.populationLimit  -=  populationLimit;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	1	None	add
33	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  PopulationLimit;  [CE]  cannot  find  symbol  PopulationLimit  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  PopulationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  -=  PopulationLimit;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	1	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  this.populationLimit  -=  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    -=    1;    this.populationLimit  -=  1;	  	compilable	  [FE]  AssertionError  	47	1	add
35	[BUG]  [BUGGY]  this.populationLimit  -=  1;  this.populationLimit  -=  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  this.populationLimit  -=  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    this.populationLimit  -=  1;	  	compilable	  [FE]  AssertionError  	47	1	add
36	[BUG]  [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	47	None	add
37	[BUG]  [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	47	None	add
38	[BUG]  [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	47	None	add
39	[BUG]  [BUGGY]  this.populationLimit  -=  1;  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	47	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  this.populationLimit  -=  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    -=    populationLimit    +    1;    this.populationLimit  -=  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	45	1	add
41	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  this.populationLimit  -=  populationLimit  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  this.populationLimit  -=  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    this.populationLimit  -=  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	45	1	add
42	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	45	None	add
43	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	45	None	add
44	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
45	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit  +  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit  +  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	45	None	add
46	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
47	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
48	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
49	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
50	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.clear();  this.populationLimit  =  populationLimit;	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    numberLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	122	3	replace
51	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.clear();  this.populationLimit  =  populationLimit;	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    numberLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	122	3	replace
52	[BUG]  [BUGGY]  null.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [CE]  <null>  cannot  be  dereferenced  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	null.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    numberLimit;    	non-compiled	[CE]  <null>  cannot  be  dereferenced	122	None	replace
53	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	int  numberLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	compilable	  [FE]  NumberIsTooLargeException  	21	2	replace
54	[BUG]  [BUGGY]  int  numberLimit  =  chromosomes.size();  [FE]  NumberIsTooLargeException  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  numberLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	compilable	  [FE]  NumberIsTooLargeException  	21	2	replace
55	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	Integer  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	21	None	replace
56	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>();	  chromosomes    =    new    ArrayList();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	86	None	replace
57	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  LinkedList();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList();	  chromosomes    =    new    ArrayList();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  ==  0)?  0  :  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =(populationLimit  ==  0)?  0  :  populationLimit;	  this.populationLimit    =(populationLimit    <    =    0)?    0    :    populationLimit;    	compilable	  [FE]  AssertionError  	91	1	replace
59	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  ==  0)?  0  :  populationLimit;  [FE]  AssertionError  [FE]        NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  ==  0)?  0  :  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =(populationLimit  ==  0)?  0  :  populationLimit;	  this.populationLimit    =(populationLimit    <    =    0)?    0    :    populationLimit;    	compilable	  [FE]  AssertionError  	91	1	replace
60	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  >=  0)?  0  :  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =(populationLimit  >=  0)?  0  :  populationLimit;	  this.populationLimit    =(populationLimit    <    =    0)?    0    :    populationLimit;    	compilable	  [FE]  NumberIsTooLargeException  	91	2	replace
61	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  >=  0)?  0  :  populationLimit;  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  >=  0)?  0  :  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =(populationLimit  >=  0)?  0  :  populationLimit;	  this.populationLimit    =(populationLimit    <    =    0)?    0    :    populationLimit;    	compilable	  [FE]  NumberIsTooLargeException  	91	2	replace
62	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
63	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
64	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
65	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [CE]  illegal  start  of  expression  [FE]              NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
66	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
67	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
68	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
69	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	50	1	add
71	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	50	1	add
72	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	50	None	add
73	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  This  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  cannot  find  symbol  This	50	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	50	1	add
75	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	50	1	add
76	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	82	None	replace
77	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
78	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]                      AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	82	None	replace
79	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }	  this.populationLimit    -=    populationLimit;    this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NO  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NO  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NO	  this.populationLimit    -=    populationLimit;    this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
81	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  0,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  0,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  0,  populationLimit);  }	  this.populationLimit    -=    populationLimit;    this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
82	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
83	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]                      AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	83	None	replace
84	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	64	2	replace
85	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	64	2	replace
86	[BUG]  [BUGGY]  int  populationLimit  =  populationLimit  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  populationLimit  -  1;	  this.populationLimit    =    populationLimit    -    1;    int    populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	10	None	replace
87	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit;  int  populationLimit  =  populationLimit  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit;  int  populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit;  int  populationLimit  =  populationLimit  -  1;	  this.populationLimit    =    populationLimit    -    1;    int    populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	10	None	replace
88	[BUG]  [BUGGY]  chromosomes.addAll(this.populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.populationLimit);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	16	None	replace
89	[BUG]  [BUGGY]  chromosomes.add(this.chromosomes);  [CE]  no  suitable  method  found  for  add(List<Chromosome>)  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.add(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.add(this.chromosomes);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(List<Chromosome>)	16	None	replace
90	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes,  false);  [CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean)  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes,  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes,  false);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean)	16	None	replace
91	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
92	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
93	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	compilable	  [FE]  AssertionError  	97	1	add
95	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	compilable	  [FE]  AssertionError  	97	1	add
96	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	non-compiled	[CE]  not  a  statement	97	None	add
97	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	non-compiled	[CE]  not  a  statement	97	None	add
98	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  PopulationLimit;  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  PopulationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  PopulationLimit;  }	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	97	None	add
99	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    this.populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=	  	non-compiled	[CE]  not  a  statement	97	None	add
100	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	23	4	replace
101	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	23	4	replace
102	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  NumberIsTooLargeException  	23	2	replace
103	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  NumberIsTooLargeException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  NumberIsTooLargeException  	23	2	replace
104	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  index++;  }  [CE]  cannot  find  symbol  index  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  index++;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  else  {  index++;  }	          chromosomes.clear();    chromosomes.clear();    	non-compiled	[CE]  cannot  find  symbol  index	23	None	replace
105	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasNext();)    {    chromosomes.next();    }    	non-compiled	[CE]  ')'  expected	115	None	replace
106	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasNext();)    {    chromosomes.next();    }    	non-compiled	[CE]  ')'  expected	115	None	replace
107	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasNext();)    {    chromosomes.next();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
108	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasNext();)    {    chromosomes.next();    }    	non-compiled	[CE]  ')'  expected	115	None	replace
109	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
110	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
111	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
112	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [CE]  cannot  find  symbol  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());	  this.populationLimit    =    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
113	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [CE]  cannot  find  symbol  [FE]              NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);	  this.populationLimit    =    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
114	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  cannot  find  symbol  [FE]                NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  this.populationLimit    =    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
115	[BUG]  [BUGGY]  this.populationLimit  -=  PopulationLimit.MILLIS_PER_SIZE;  [CE]  cannot  find  symbol  PopulationLimit  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  PopulationLimit.MILLIS_PER_SIZE;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  PopulationLimit.MILLIS_PER_SIZE;	  this.populationLimit    -=    numberLimit;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	94	None	replace
116	[BUG]  [BUGGY]  chromosomes.removeAll(this.populationLimit);  [CE]  no  suitable  method  found  for  removeAll(int)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.removeAll(this.populationLimit);	  chromosomes.removeAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  removeAll(int)	135	None	replace
117	[BUG]  [BUGGY]  chromosomes.removeAll(this,  populationLimit);  [CE]  no  suitable  method  found  for  removeAll(ListPopulation,int)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(this,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.removeAll(this,  populationLimit);	  chromosomes.removeAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  removeAll(ListPopulation,int)	135	None	replace
118	[BUG]  [BUGGY]  chromosomes.removeAll(populationLimit);  [CE]  no  suitable  method  found  for  removeAll(int)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.removeAll(populationLimit);	  chromosomes.removeAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  removeAll(int)	135	None	replace
119	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit,  populationLimit);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit,  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
120	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>(this.populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
121	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
122	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol  length	84	None	replace
123	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size())    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	replace
124	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  this.chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  this.chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  this.chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size())    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	replace
125	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.addAll(this.chromosomes);  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.addAll(this.chromosomes);  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size())    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	replace
126	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
127	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
128	[BUG]  [BUGGY]  null.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  [CE]  <null>  cannot  be  dereferenced  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	null.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.intValue();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	121	None	replace
129	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  [CE]  cannot  find  symbol  PopulationLimit  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.intValue();    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	121	None	replace
130	[BUG]  [BUGGY]  This.populationLimit  =  populationLimit  +  1;  [CE]  cannot  find  symbol  This  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  This.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	This.populationLimit  =  populationLimit  +  1;	  this.populationLimit    =    populationLimit    +    1;    This.populationLimit    =    populationLimit    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	38	None	replace
131	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
132	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
133	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
134	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  AssertionError  	67	1	add
136	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  AssertionError  	67	1	add
137	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	67	None	add
138	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  This	67	None	add
139	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  populationLimit  +  3;	  this.populationLimit    -=    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	46	3	replace
141	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit  +  3;	  this.populationLimit    -=    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	46	3	replace
142	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	61	1	add
144	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	61	1	add
145	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	61	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	61	1	add
147	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	61	1	add
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	61	1	add
149	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	61	1	add
150	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;)    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	27	None	replace
151	[BUG]  [BUGGY]  this.chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  this.chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  this.chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  this.chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;)    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	27	None	replace
152	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.addAll(this.chromosomes);  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                    java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.addAll(this.chromosomes);  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;)    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	27	None	replace
153	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
154	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  expression  [FE]              NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
155	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    -    1);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	12	None	replace
156	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    -    1);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	12	None	replace
157	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                    AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    -    1);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	12	None	replace
158	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
159	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	133	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  this.populationLimit  =  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    1;    this.populationLimit  =  1;	  	compilable	  [FE]  AssertionError  	78	1	add
161	[BUG]  [BUGGY]  this.populationLimit  =  1;  this.populationLimit  =  1;  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  this.populationLimit  =  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    this.populationLimit  =  1;	  	compilable	  [FE]  AssertionError  	78	1	add
162	[BUG]  [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	78	None	add
163	[BUG]  [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	78	None	add
164	[BUG]  [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	78	None	add
165	[BUG]  [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	78	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  /  2;	  this.populationLimit    =    populationLimit    +    2;    	compilable	  [FE]  AssertionError  	113	1	replace
167	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  2;	  this.populationLimit    =    populationLimit    +    2;    	compilable	  [FE]  AssertionError  	113	1	replace
168	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [CE]  ')'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.remove(chromosomes.next());    }    	non-compiled	[CE]  ')'  expected	24	None	replace
169	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [CE]  ')'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.remove(chromosomes.next());    }    	non-compiled	[CE]  ')'  expected	24	None	replace
170	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remov  [CE]  ')'  expected  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remov  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remov	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.remove(chromosomes.next());    }    	non-compiled	[CE]  ')'  expected	24	None	replace
171	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.remove(chromosomes.next());    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
172	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.next();    }    	non-compiled	[CE]  ')'  expected	25	None	replace
173	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.next();    }    	non-compiled	[CE]  ')'  expected	25	None	replace
174	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.next();    }    	non-compiled	[CE]  ')'  expected	25	None	replace
175	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.n  [CE]  ')'  expected  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.n  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.n	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.next();    }    	non-compiled	[CE]  ')'  expected	25	None	replace
176	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
177	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
178	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	22	None	add
179	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
180	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
181	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  false;  [CE]  incompatible  types  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  false;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  false;	  	non-compiled	[CE]  incompatible  types	22	None	add
182	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.remove();  chromosomes.clear();  [CE]  no  suitable  method  found  for  remove()  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.remove();  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.remove();  chromosomes.clear();	  	non-compiled	[CE]  no  suitable  method  found  for  remove()	22	None	add
183	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
184	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  this.populationLimit  =  0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  this.populationLimit  =  0;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  this.populationLimit  =  0;  }	  this.populationLimit    =    0;    this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
185	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }	  this.populationLimit    =    0;    this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	33	1	add
187	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	33	1	add
188	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  This.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [CE]  cannot  find  symbol  This  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  This.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    This.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	33	None	add
189	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  PopulationLimit  +  1;  [CE]  cannot  find  symbol  PopulationLimit  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  PopulationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  PopulationLimit  +  1;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	33	None	add
190	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;	  	non-compiled	[CE]  not  a  statement	33	None	add
191	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  PopulationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [CE]  cannot  find  symbol  PopulationLimit  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  PopulationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  PopulationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	33	None	add
192	[BUG]  [BUGGY]  chromosomes.addAll(this,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,int)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this,  populationLimit);	  chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,int)	17	None	replace
193	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	  chromosomes.addAll(this);    	compilable	  [FE]  NumberIsTooLargeException  	17	2	replace
194	[BUG]  [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [FE]  NumberIsTooLargeException  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(new  ArrayList  <  Chromosome>(populationLimit));	  chromosomes.addAll(this);    	compilable	  [FE]  NumberIsTooLargeException  	17	2	replace
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	compilable	  [FE]  AssertionError  	104	1	add
196	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	compilable	  [FE]  AssertionError  	104	1	add
197	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	non-compiled	[CE]  not  a  statement	104	None	add
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  AssertionError  	104	1	add
199	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  AssertionError  	104	1	add
200	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  PopulationLimit  -  1;  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  PopulationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  PopulationLimit  -  1;  }	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	104	None	add
201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.populationLimit  =  populationLimit  -  1;	  	compilable	  [FE]  AssertionError  	104	1	add
202	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.populationLimit  =  populationLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.populationLimit  =  populationLimit  -  1;	  	compilable	  [FE]  AssertionError  	104	1	add
203	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
204	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
205	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  0,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  0,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  0,  populationLimit);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
206	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  1,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  1,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  System.arraycopy(chromosomes,  0,  this.populationLimit,  1,  populationLimit);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
207	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
208	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POP  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POP  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POP	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
209	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
210	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
211	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)	134	None	replace
212	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
213	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)  [FE]                      AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)	134	None	replace
214	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int)  [FE]                        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int)	134	None	replace
215	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    ++populationLimit)    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	114	None	replace
216	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  this.chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  this.chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  this.chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    ++populationLimit)    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	114	None	replace
217	[BUG]  [BUGGY]  this.chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  this.chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  this.chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  this.chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    ++populationLimit)    {    chromosomes.clear();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	114	None	replace
218	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);	  chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
219	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	70	None	replace
220	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  This  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol  This	70	None	replace
221	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size()  -  1;	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	5	None	replace
222	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  populationLimit;  int  numberLimit  =  chromosomes.size();	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    	compilable	  [FE]  AssertionError  	5	3	replace
223	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  int  numberLimit  =  chromosomes.size();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  int  numberLimit  =  chromosomes.size();	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    	compilable	  [FE]  AssertionError  	5	3	replace
224	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	62	2	replace
225	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	62	2	replace
226	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	65	1	add
227	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	65	1	add
228	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	65	None	add
229	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	65	1	add
230	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	65	1	add
231	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol  This	65	None	add
232	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
233	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_P  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_P  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_P	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
234	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	28	5	add
235	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	28	5	add
236	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	28	None	add
237	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  int  populationLimit  =  chromosomes.size()  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  int  populationLimit  =  chromosomes.size()  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    int  populationLimit  =  chromosomes.size()  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	28	None	add
238	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	28	5	add
239	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	28	5	add
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  this.populationLimit  =  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    +    2;    this.populationLimit  =  populationLimit  +  2;	  	compilable	  [FE]  AssertionError  	112	1	add
241	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  this.populationLimit  =  populationLimit  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  this.populationLimit  =  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    this.populationLimit  =  populationLimit  +  2;	  	compilable	  [FE]  AssertionError  	112	1	add
242	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	112	None	add
243	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	112	None	add
244	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	112	None	add
245	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  int  populationLimit  =  populationLimit  +  2;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  int  populationLimit  =  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    int  populationLimit  =  populationLimit  +  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	112	None	add
246	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	41	None	replace
247	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
248	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size(),    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
249	[BUG]  [BUGGY]  int  populationLimit  =  populationLimit  +  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  populationLimit  +  1;	  this.populationLimit    =    populationLimit    +    1;    int    populationLimit    =    populationLimit    +    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	37	None	replace
250	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit;  int  populationLimit  =  populationLimit  +  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit;  int  populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit;  int  populationLimit  =  populationLimit  +  1;	  this.populationLimit    =    populationLimit    +    1;    int    populationLimit    =    populationLimit    +    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	37	None	replace
251	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	15	7	add
252	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	15	7	add
253	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	15	None	add
254	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	15	7	add
255	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	15	7	add
256	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	15	7	add
257	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	15	7	add
258	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	15	None	add
259	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
260	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>();  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
261	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
262	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
263	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	9	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	compilable	  [FE]  AssertionError  	9	1	replace
265	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	compilable	  [FE]  AssertionError  	9	1	replace
266	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	compilable	  [FE]  AssertionError  	30	1	add
267	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	compilable	  [FE]  AssertionError  	30	1	add
268	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	30	None	add
269	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [CE]  cannot  find  symbol  This  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	30	None	add
270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);	  	compilable	  [FE]  AssertionError  	30	1	add
271	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);	  	compilable	  [FE]  AssertionError  	30	1	add
272	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,boolean)  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,boolean)	127	None	replace
273	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  true);  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  true);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  true);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	127	None	replace
274	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  false);  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	127	None	replace
275	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	99	None	add
276	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	99	None	add
277	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	99	None	add
278	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	99	None	add
279	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	99	None	add
280	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  this.populationLimit  =  populationLimit  /  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    /    1;    this.populationLimit  =  populationLimit  /  1;	  	compilable	  [FE]  AssertionError  	13	1	add
281	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  this.populationLimit  =  populationLimit  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  this.populationLimit  =  populationLimit  /  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    this.populationLimit  =  populationLimit  /  1;	  	compilable	  [FE]  AssertionError  	13	1	add
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  this.populationLimit  =  populationLimit  /  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    /    1;    this.populationLimit  =  populationLimit  /  2;	  	compilable	  [FE]  AssertionError  	13	1	add
283	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  this.populationLimit  =  populationLimit  /  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  this.populationLimit  =  populationLimit  /  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    this.populationLimit  =  populationLimit  /  2;	  	compilable	  [FE]  AssertionError  	13	1	add
284	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	13	None	add
285	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  int  populationLimit  =  populationLimit  /  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  int  populationLimit  =  populationLimit  /  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    int  populationLimit  =  populationLimit  /  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	13	None	add
286	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol  This	42	None	replace
287	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	120	3	replace
288	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	120	3	replace
289	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  NumberIsTooLargeException  	120	2	replace
290	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  NumberIsTooLargeException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  NumberIsTooLargeException  	120	2	replace
291	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	120	4	replace
292	[BUG]  [BUGGY]  if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	120	4	replace
293	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  =  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  <  =  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
294	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  NumberIsTooLargeException  	100	2	replace
295	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  NumberIsTooLargeException  	100	2	replace
296	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
297	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  NumberIsTooLargeException  	100	2	replace
298	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  NumberIsTooLargeException  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  NumberIsTooLargeException  	100	2	replace
299	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  this.populationLimit  -=  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    -=    populationLimit    +    2;    this.populationLimit  -=  populationLimit  +  2;	  	compilable	  [FE]  AssertionError  	117	1	add
300	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  this.populationLimit  -=  populationLimit  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  this.populationLimit  -=  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    this.populationLimit  -=  populationLimit  +  2;	  	compilable	  [FE]  AssertionError  	117	1	add
301	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	117	None	add
302	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
303	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	117	None	add
304	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit  +  2;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit  +  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	117	None	add
305	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(populationLimit);	  chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	128	None	replace
306	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit,  populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit,  populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(this.populationLimit,  populationLimit);	  chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	128	None	replace
307	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit  +  1);  [CE]  cannot  find  symbol  Lists  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(this.populationLimit  +  1);	  chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	128	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	39	1	add
309	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	39	1	add
310	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	39	None	add
311	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	39	None	add
312	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	39	1	add
313	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	39	1	add
314	[BUG]  [BUGGY]  chromosomes  =  Collections.newHashSet();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Collections.newHashSet();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Collections.newHashSet();	  chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
315	[BUG]  [BUGGY]  chromosomes  =  Collections.newLinkedList();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Collections.newLinkedList();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Collections.newLinkedList();	  chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
316	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [CE]  not  a  statement  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size()    >    0;)    {    chromosomes.clear();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
317	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  this.chromosomes.clear();  }  [CE]  not  a  statement  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  this.chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  this.chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size()    >    0;)    {    chromosomes.clear();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
318	[BUG]  [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  1)  {  chromosomes.clear();  }  [CE]  not  a  statement  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  1)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  1)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size()    >    0;)    {    chromosomes.clear();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
319	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(1);  [CE]  cannot  find  symbol  Lists  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(1);	  chromosomes    =    Lists.newArrayList(0);    	non-compiled	[CE]  cannot  find  symbol  Lists	101	None	replace
320	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.chromosomes.size());  [CE]  cannot  find  symbol  Lists  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(this.chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(this.chromosomes.size());	  chromosomes    =    Lists.newArrayList(0);    	non-compiled	[CE]  cannot  find  symbol  Lists	101	None	replace
321	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	11	None	replace
322	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.remove(chromosomes.size()  -  1);	  chromosomes.remove(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	19	6	replace
323	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size()  -  1);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size()  -  1);	  chromosomes.remove(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	19	6	replace
324	[BUG]  [BUGGY]  chromosomes.addAll(chromosomes.size());  [CE]  no  suitable  method  found  for  addAll(int)  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(chromosomes.size());	  chromosomes.remove(chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	19	None	replace
325	[BUG]  [BUGGY]  chromosomes.add(chromosomes.size());  [CE]  no  suitable  method  found  for  add(int)  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.add(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.add(chromosomes.size());	  chromosomes.remove(chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	19	None	replace
326	[BUG]  [BUGGY]  chromosomes.add(chromosomes.size()  -  1);  [CE]  no  suitable  method  found  for  add(int)  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.add(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.add(chromosomes.size()  -  1);	  chromosomes.remove(chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	19	None	replace
327	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  LinkedList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  LinkedList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  LinkedList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
328	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	76	2	replace
329	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	76	2	replace
330	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	new  ArrayList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	76	2	replace
331	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  NumberIsTooLargeException  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	new  ArrayList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	76	2	replace
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;	  	compilable	  [FE]  AssertionError  	92	1	add
333	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;	  	compilable	  [FE]  AssertionError  	92	1	add
334	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }	  	compilable	  [FE]  AssertionError  	92	1	add
335	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }	  	compilable	  [FE]  AssertionError  	92	1	add
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }	  	compilable	  [FE]  AssertionError  	92	1	add
337	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }	  	compilable	  [FE]  AssertionError  	92	1	add
338	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    if(populationLimit  <  0)  {  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  	non-compiled	[CE]  ')'  expected	92	None	add
339	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  int  populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  int  populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =(populationLimit    <    0)?    0    :    populationLimit;    int  populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	92	None	add
340	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  2;	  this.populationLimit    -=    1;    	compilable	  [FE]  AssertionError  	48	3	replace
341	[BUG]  [BUGGY]  this.populationLimit  -=  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  2;	  this.populationLimit    -=    1;    	compilable	  [FE]  AssertionError  	48	3	replace
342	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  4;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  4;	  this.populationLimit    -=    1;    	compilable	  [FE]  AssertionError  	48	3	replace
343	[BUG]  [BUGGY]  this.populationLimit  -=  4;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  4;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  4;	  this.populationLimit    -=    1;    	compilable	  [FE]  AssertionError  	48	3	replace
344	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  3;	  this.populationLimit    -=    1;    	compilable	  [FE]  AssertionError  	48	3	replace
345	[BUG]  [BUGGY]  this.populationLimit  -=  3;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  3;	  this.populationLimit    -=    1;    	compilable	  [FE]  AssertionError  	48	3	replace
346	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POP  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POP  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POP	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
347	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  expression  [FE]                NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size()    -    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
348	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size  [CE]  illegal  start  of  expression  [FE]                  NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size()    -    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
349	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	71	1	add
350	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	71	1	add
351	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	71	None	add
352	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	71	1	add
353	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	71	1	add
354	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	71	1	add
355	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	71	1	add
356	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size()  -  1;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size()  -  1;	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	20	None	replace
357	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  >  0)?  chromosomes.size()  -  1  :  0;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  >  0)?  chromosomes.size()  -  1  :  0;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =(chromosomes.size()  >  0)?  chromosomes.size()  -  1  :  0;	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	20	None	replace
358	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  4;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  /  4;	  this.populationLimit    =    populationLimit    /    1;    	compilable	  [FE]  NumberIsTooLargeException  	14	2	replace
359	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  4;  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  4;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  4;	  this.populationLimit    =    populationLimit    /    1;    	compilable	  [FE]  NumberIsTooLargeException  	14	2	replace
360	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>();	  this.chromosomes    =    new    LinkedList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
361	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	6	None	replace
362	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  }	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
363	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOS  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOS  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOS	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
364	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populations);  [CE]  cannot  find  symbol  populations  [FE]        NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populations);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populations);	  this.populationLimit    =    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  cannot  find  symbol  populations	77	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  this.populationLimit  =  populationLimit  -  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    -    2;    this.populationLimit  =  populationLimit  -  2;	  	compilable	  [FE]  AssertionError  	59	1	add
366	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  this.populationLimit  =  populationLimit  -  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  this.populationLimit  =  populationLimit  -  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    this.populationLimit  =  populationLimit  -  2;	  	compilable	  [FE]  AssertionError  	59	1	add
367	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  2;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  2;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  2;  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
368	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	59	None	add
369	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  int  populationLimit  =  populationLimit  -  2;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  int  populationLimit  =  populationLimit  -  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    int  populationLimit  =  populationLimit  -  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	59	None	add
370	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	59	None	add
371	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	110	1	add
372	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	110	1	add
373	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	110	None	add
374	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  This  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	110	None	add
375	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	110	1	add
376	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	110	1	add
377	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
378	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);  [CE]  cannot  find  symbol  length  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol  length	51	None	replace
379	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  [CE]  cannot  find  symbol  PopulationLimit  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	123	None	replace
380	[BUG]  [BUGGY]  null.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  [CE]  <null>  cannot  be  dereferenced  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	null.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.UNKNOWN;    	non-compiled	[CE]  <null>  cannot  be  dereferenced	123	None	replace
381	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	compilable	  [FE]  NumberIsTooLargeException  	111	2	replace
382	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	compilable	  [FE]  NumberIsTooLargeException  	111	2	replace
383	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	89	1	add
385	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	89	1	add
386	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	89	None	add
387	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [CE]  cannot  find  symbol  This  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	89	None	add
388	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	89	1	add
389	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [FE]  AssertionError  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	89	1	add
390	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol  This	31	None	replace
391	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.chromosomes,  this.populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(this.chromosomes,  this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(this.chromosomes,  this.populationLimit);	  chromosomes    =    Lists.newArrayList(this.chromosomes);    	non-compiled	[CE]  cannot  find  symbol  Lists	102	None	replace
392	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
393	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
394	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.add(chromosomes.size());  [CE]  no  suitable  method  found  for  add(int)  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.add(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());    chromosomes.add(chromosomes.size());	  	non-compiled	[CE]  no  suitable  method  found  for  add(int)	18	None	add
395	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	18	None	add
396	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.get(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.remove(chromosomes.size());    chromosomes.get(chromosomes.size());	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
397	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.get(chromosomes.size());  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.get(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());    chromosomes.get(chromosomes.size());	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
398	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	43	1	add
399	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	43	1	add
400	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	43	None	add
401	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	43	None	add
402	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	43	1	add
403	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	43	1	add
404	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  this.populationLimit  =  0;  this.populationLimit  =  0;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        0;        this.populationLimit    =    0;    this.populationLimit  =  0;  this.populationLimit  =  0;	  	compilable	  [FE]  AssertionError  	53	1	add
405	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  this.populationLimit  =  0;  this.populationLimit  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  this.populationLimit  =  0;  this.populationLimit  =  0;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    this.populationLimit  =  0;  this.populationLimit  =  0;	  	compilable	  [FE]  AssertionError  	53	1	add
406	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
407	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	53	None	add
408	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	53	None	add
409	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  NumberIsTooLargeException  	100	2	replace
410	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  NumberIsTooLargeException  	100	2	replace
411	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
412	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
413	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
414	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;)    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
415	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes  >=  null;)  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes  >=  null;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes  >=  null;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;)    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
416	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	104	None	add
417	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	104	1	add
418	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	104	1	add
419	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	104	None	add
420	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	72	2	replace
421	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	72	2	replace
422	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	72	2	replace
423	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	72	2	replace
424	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	72	2	replace
425	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  NumberIsTooLargeException  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	72	2	replace
426	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                    AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	83	None	replace
427	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  cannot  find  symbol  This  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	non-compiled	[CE]  cannot  find  symbol  This	28	None	add
428	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
429	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	33	1	add
430	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	33	1	add
431	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  2;	  	compilable	  [FE]  AssertionError  	33	1	add
432	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  2;	  	compilable	  [FE]  AssertionError  	33	1	add
433	[BUG]  [BUGGY]  chromosomes  =  Collections.newArrayList(this.chromosomes);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Collections.newArrayList(this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Collections.newArrayList(this.chromosomes);	  chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
434	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	62	2	replace
435	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	62	2	replace
436	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
437	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
438	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
439	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
440	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)	39	None	add
441	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	39	1	add
442	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	39	1	add
443	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [CE]  not  a  statement  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size()    >    0;)    {    chromosomes.clear();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
444	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosome  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [CE]  not  a  statement  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosome  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosome  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size()    >    0;)    {    chromosomes.clear();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
445	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.chromosomes.remove(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());  this.chromosomes.remove(chromosomes.size());	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
446	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.chromosomes.remove(chromosomes.size());  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.chromosomes.remove(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());  this.chromosomes.remove(chromosomes.size());	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
447	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
448	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.populationLimit  =  populationLimit;  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.populationLimit  =  populationLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
449	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
450	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  chromosomes.remove(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());    chromosomes.remove(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	18	6	add
451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	75	1	add
452	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	75	1	add
453	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
454	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
455	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
456	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	66	2	replace
457	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  This	71	None	add
458	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)	71	None	add
459	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  /  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  /  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  /  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	13	None	add
460	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  this.populationLimit    =    0;    this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
461	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    =    0;    this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
462	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Collections.sort(this.chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Collections.sort(this.chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    Collections.sort(this.chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	99	None	add
463	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  AssertionError  <  NoClass>  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  AssertionError  <  NoClass>  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    AssertionError  <  NoClass>  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
464	[BUG]  [BUGGY]  chromosomes.addAll(populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(populationLimit);	  chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	17	None	replace
465	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)	61	None	add
466	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	61	1	add
467	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	61	1	add
468	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	123	None	replace
469	[BUG]  [BUGGY]  if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	123	None	replace
470	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
471	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2);  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
472	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2;  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
473	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
474	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	20	None	replace
475	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	20	None	replace
476	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
477	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
478	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
479	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	44	2	replace
480	[BUG]  [BUGGY]  this.populationLimit  -=  PopulationLimit.UNKNOWN;  [CE]  cannot  find  symbol  PopulationLimit  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  PopulationLimit.UNKNOWN;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  PopulationLimit.UNKNOWN;	  this.populationLimit    -=    numberLimit;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	94	None	replace
481	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  1;  }	  this.populationLimit    =    populationLimit    +    1;    int    populationLimit    =    populationLimit    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
482	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	64	2	replace
483	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	64	2	replace
484	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [CE]  cannot  find  symbol  This  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol  This	64	None	replace
485	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  /  3;	  this.populationLimit    =    populationLimit    /    1;    	compilable	  [FE]  AssertionError  	14	1	replace
486	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  3;	  this.populationLimit    =    populationLimit    /    1;    	compilable	  [FE]  AssertionError  	14	1	replace
487	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
488	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
489	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(true,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(boolean,boolean)  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(true,  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(true,  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(boolean,boolean)	127	None	replace
490	[BUG]  [BUGGY]  chromosomes  =  new  java.util.ArrayList();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  java.util.ArrayList();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  java.util.ArrayList();	  chromosomes    =    new    ArrayList();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	86	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        0;        this.populationLimit    =    0;    if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }	  	compilable	  [FE]  AssertionError  	53	1	add
492	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(chromosomes.size()  >  populationLimit)  {  this.populationLimit  =  0;  this.populationLimit  =  0;  }	  	compilable	  [FE]  AssertionError  	53	1	add
493	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)	53	None	add
494	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  	non-compiled	[CE]  ')'  expected	53	None	add
495	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	65	1	add
496	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	65	1	add
497	[BUG]  [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.populationLimit  =  1;  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.populationLimit  =  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.populationLimit  =  1;	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	78	None	add
498	[BUG]  [BUGGY]  this.populationLimit  =  1;  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	78	None	add
499	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  this.populationLimit  =  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    1;    this.populationLimit  =  2;	  	compilable	  [FE]  AssertionError  	78	1	add
500	[BUG]  [BUGGY]  this.populationLimit  =  1;  this.populationLimit  =  2;  [FE]  AssertionError  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  this.populationLimit  =  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    this.populationLimit  =  2;	  	compilable	  [FE]  AssertionError  	78	1	add
501	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  }	  this.populationLimit    =    populationLimit    -    1;    int    populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
502	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  this.populationLimit    =    populationLimit    -    1;    int    populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
503	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
504	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    this.populationLimit    -=    populationLimit;    }    	compilable	  [FE]  NumberIsTooLargeException  	3	2	replace
505	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    this.populationLimit    -=    populationLimit;    }    	compilable	  [FE]  NumberIsTooLargeException  	3	2	replace
506	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  NumberIsTooLargeException  	23	2	replace
507	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  NumberIsTooLargeException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  NumberIsTooLargeException  	23	2	replace
508	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  This	74	None	replace
509	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	73	None	replace
510	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	73	None	replace
511	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  BevölkerungLimit;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  BevölkerungLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  BevölkerungLimit;  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
512	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
513	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
514	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
515	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.intValue();    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	121	None	replace
516	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.intValue();    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	121	None	replace
517	[BUG]  [BUGGY]  if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  0)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.intValue();    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	121	None	replace
518	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;  }  [CE]  cannot  find  symbol  numberLimit  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    numberLimit;    	non-compiled	[CE]  cannot  find  symbol  numberLimit	122	None	replace
519	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	119	3	add
520	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	119	3	add
521	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  indexOutOfBoundsException:  Index:  0  [CE]  not  a  statement  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  indexOutOfBoundsException:  Index:  0  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    if(chromosomes.size()  >  populationLimit)  {  indexOutOfBoundsException:  Index:  0	  	non-compiled	[CE]  not  a  statement	119	None	add
522	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	119	None	add
523	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  this.populationLimit  +=  populationLimit  +  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  this.populationLimit  +=  populationLimit  +  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    if(populationLimit  <  =  0)  {  this.populationLimit  +=  populationLimit  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
524	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  +  3;	  this.populationLimit    =    populationLimit    +    1;    This.populationLimit    =    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	38	2	replace
525	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  3;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  3;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  3;	  this.populationLimit    =    populationLimit    +    1;    This.populationLimit    =    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	38	2	replace
526	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	42	2	replace
527	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	42	2	replace
528	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  cannot  find  symbol  This  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol  This	42	None	replace
529	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationL  [CE]  illegal  start  of  expression  [FE]                NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationL	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size()    -    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
530	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes);    List  <  Chromosome>  chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	15	None	add
531	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
532	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit  +  1;	  this.populationLimit    -=    populationLimit;    this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	2	3	replace
533	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit  +  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit  +  1;	  this.populationLimit    -=    populationLimit;    this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	2	3	replace
534	[BUG]  [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.populationLimit  -=  1;  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.populationLimit  -=  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.populationLimit  -=  1;	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	47	None	add
535	[BUG]  [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.populationLimit  -=  1;  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.populationLimit  -=  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.populationLimit  -=  1;	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	47	None	add
536	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
537	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	97	None	add
538	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationsLimit;  }  [CE]  cannot  find  symbol  populationsLimit  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationsLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationsLimit;  }	  	non-compiled	[CE]  cannot  find  symbol  populationsLimit	97	None	add
539	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  this.populationLimit    =    populationLimit    +    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	35	None	replace
540	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  %  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  %  2;	  this.populationLimit    =    populationLimit    -    2;    	compilable	  [FE]  NumberIsTooLargeException  	60	2	replace
541	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  %  2;  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  %  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  %  2;	  this.populationLimit    =    populationLimit    -    2;    	compilable	  [FE]  NumberIsTooLargeException  	60	2	replace
542	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  NumberIsTooLargeException  	120	2	replace
543	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  NumberIsTooLargeException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  NumberIsTooLargeException  	120	2	replace
544	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	120	4	replace
545	[BUG]  [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	120	4	replace
546	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
547	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit  +  2;  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
548	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
549	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }	  	compilable	  [FE]  AssertionError  	7	1	add
550	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }	  	compilable	  [FE]  AssertionError  	7	1	add
551	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.next();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
552	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  NumberIsTooLargeException  	51	2	replace
553	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  NumberIsTooLargeException  	51	2	replace
554	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	63	None	replace
555	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	63	None	replace
556	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	1	None	add
557	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  =  0;  this.populationLimit  -=  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    this.populationLimit  =  0;  this.populationLimit  -=  populationLimit;	  	compilable	  [FE]  AssertionError  	1	1	add
558	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  =  0;  this.populationLimit  -=  populationLimit;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit  =  0;  this.populationLimit  -=  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    this.populationLimit  =  0;  this.populationLimit  -=  populationLimit;	  	compilable	  [FE]  AssertionError  	1	1	add
559	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit;  this.populationLimit  -=  populationLimit;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  this.populationLimit;  this.populationLimit  -=  populationLimit;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    this.populationLimit;  this.populationLimit  -=  populationLimit;	  	non-compiled	[CE]  not  a  statement	1	None	add
560	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);  [CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);	  this.populationLimit    =    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol  LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	80	None	replace
561	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size())    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
562	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosome  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosome  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosome  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size())    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
563	[BUG]  [BUGGY]  chromosomes.add(0,  this.chromosomes);  [CE]  no  suitable  method  found  for  add(int,List<Chromosome>)  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.add(0,  this.chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.add(0,  this.chromosomes);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,List<Chromosome>)	16	None	replace
564	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();  [CE]  illegal  start  of  expression  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
565	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                chromosomes.clear();        chromosomes.clear();    synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
566	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    synchronized(chromosomes)  {  chromosomes.clear();  chromosomes.clear();  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
567	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    ++populationLimit)    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
568	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    ++populationLimit)    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
569	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  NotPositiveException(LocalizedFormats)	67	None	add
570	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  2;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    -    2;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  2;  }	  	compilable	  [FE]  AssertionError  	59	1	add
571	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  2;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  2;  }	  	compilable	  [FE]  AssertionError  	59	1	add
572	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  2);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  2);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  2);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	59	None	add
573	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	41	None	replace
574	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.  [CE]  ')'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.hasMore();)    {    chromosomes.remove(chromosomes.next());    }    	non-compiled	[CE]  ')'  expected	24	None	replace
575	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
576	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
577	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
578	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
579	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
580	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	41	None	replace
581	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	41	2	replace
582	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	41	2	replace
583	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
584	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
585	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  2);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
586	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
587	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  2;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  2;	  this.populationLimit    =    populationLimit    +    1;    int    populationLimit    =    populationLimit    +    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	37	None	replace
588	[BUG]  [BUGGY]  this.populationLimit  -=  PopulationLimit.INFINITY;  [CE]  cannot  find  symbol  PopulationLimit  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  PopulationLimit.INFINITY;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  PopulationLimit.INFINITY;	  this.populationLimit    -=    numberLimit;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	94	None	replace
589	[BUG]  [BUGGY]  this.populationLimit  -=  PopulationLimit.ZERO;  [CE]  cannot  find  symbol  PopulationLimit  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  PopulationLimit.ZERO;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  PopulationLimit.ZERO;	  this.populationLimit    -=    numberLimit;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	94	None	replace
590	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  false);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	127	None	replace
591	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false,  chromosomes);  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean,List<Chromosome>)  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false,  chromosomes);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false,  chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean,List<Chromosome>)	127	None	replace
592	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }	  this.populationLimit    =    populationLimit    -    1;    this.populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
593	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_	  this.populationLimit    =    populationLimit    -    1;    this.populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
594	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT	  this.populationLimit    =    populationLimit    -    1;    this.populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
595	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
596	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]              NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
597	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]                NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
598	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]                  NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
599	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
600	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
601	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
602	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
603	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
604	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
605	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    /    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
606	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size(),    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
607	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size(),    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
608	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationL  [CE]  illegal  start  of  expression  [FE]              NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationL	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size(),    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
609	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]                NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size(),    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
610	[BUG]  [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	47	None	add
611	[BUG]  [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	47	None	add
612	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
613	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
614	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
615	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
616	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
617	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
618	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
619	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
620	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
621	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
622	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
623	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
624	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        if(populationLimit    >    0)    {    this.populationLimit    =    populationLimit    -    1;    }    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
625	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomes.size());  [CE]  no  suitable  method  found  for  removeAll(int)  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.removeAll(chromosomes.size());	  chromosomes.remove(chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  removeAll(int)	19	None	replace
626	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;)    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
627	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
628	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
629	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
630	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
631	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	75	1	add
632	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	75	1	add
633	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	62	2	replace
634	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	62	2	replace
635	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  chromosomes.size()  -  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]                NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  chromosomes.size()  -  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  chromosomes.size()  -  populationLimit,  false);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size()    -    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
636	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  chromosomes.size()  -  populationL  [CE]  illegal  start  of  expression  [FE]                  NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  chromosomes.size()  -  populationL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  chromosomes.size()  -  populationL	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size()    -    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
637	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    -=    populationLimit;    this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
638	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
639	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
640	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
641	[BUG]  [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    0;    this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        0;        this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
642	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES  [CE]  ')'  expected  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
643	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  ')'  expected  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
644	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
645	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
646	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size())    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
647	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  this.chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  this.chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  this.chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size())    {    chromosomes.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
648	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	compilable	  [FE]  NumberIsTooLargeException  	111	2	replace
649	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [FE]  NumberIsTooLargeException  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	compilable	  [FE]  NumberIsTooLargeException  	111	2	replace
650	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
651	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
652	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        +        1;        this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
653	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  List  <  Chromosome>(this.populationLimit);  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  List  <  Chromosome>(this.populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  List  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	71	None	add
654	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit  +  1);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]                  AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit  +  1);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit  +  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	134	None	replace
655	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
656	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    +    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
657	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [CE]  not  a  statement  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }	          chromosomes.clear();    for(int    chromosomes    =    0;    chromosomes!=    null;    chromosomes.size()    >    0;)    {    chromosomes.clear();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
658	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    0;    this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
659	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    0;    this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
660	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  }	  this.populationLimit    =    0;    this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
661	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
662	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
663	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
664	[BUG]  [BUGGY]  chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);	  chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
665	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
666	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
667	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
668	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  *  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  populationLimit  *  2;	  this.populationLimit    -=    populationLimit    +    2;    	compilable	  [FE]  AssertionError  	118	3	replace
669	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  *  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  *  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit  *  2;	  this.populationLimit    -=    populationLimit    +    2;    	compilable	  [FE]  AssertionError  	118	3	replace
670	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  /  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  populationLimit  /  2;	  this.populationLimit    -=    populationLimit    +    2;    	compilable	  [FE]  AssertionError  	118	3	replace
671	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  /  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit  /  2;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit  /  2;	  this.populationLimit    -=    populationLimit    +    2;    	compilable	  [FE]  AssertionError  	118	3	replace
672	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  numberLimit;  [CE]  cannot  find  symbol  numberLimit  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  this.populationLimit  =  numberLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.clear();  this.populationLimit  =  numberLimit;	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    numberLimit;    	non-compiled	[CE]  cannot  find  symbol  numberLimit	122	None	replace
673	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
674	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
675	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
676	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
677	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  -  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
678	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
679	[BUG]  [BUGGY]  this.populationLimit  =  numberLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  numberLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  numberLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
680	[BUG]  [BUGGY]  chromosomes  =  Collections.EMPTY_LIST;  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Collections.EMPTY_LIST;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Collections.EMPTY_LIST;	  chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	85	None	replace
681	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;  [CE]  cannot  find  symbol  numberLimit  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;	  	non-compiled	[CE]  cannot  find  symbol  numberLimit	119	None	add
682	[BUG]  [BUGGY]  chromosomes.addAll(this,  new  ArrayList  <  Chromosome>(populationLimit));  [CE]  no  suitable  method  found  for  addAll(ListPopulation,ArrayList<Chromosome>)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this,  new  ArrayList  <  Chromosome>(populationLimit));	  chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,ArrayList<Chromosome>)	17	None	replace
683	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.intValue();    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	121	None	replace
684	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.intValue();    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
685	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	43	1	add
686	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	43	1	add
687	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	                chromosomes.clear();        chromosomes.clear();    if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
688	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                chromosomes.clear();        chromosomes.clear();    if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	22	3	add
689	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList(0);  [CE]  cannot  find  symbol  Lists  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes  =  Lists.newLinkedList(0);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newLinkedList(0);	  chromosomes    =    Lists.newArrayList(0);    	non-compiled	[CE]  cannot  find  symbol  Lists	101	None	replace
690	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes);  [CE]  cannot  find  symbol  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes);	  this.populationLimit    =    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
691	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    -=    populationLimit;    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
692	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationL  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationL	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
693	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
694	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  false	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
695	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
696	[BUG]  [BUGGY]  if(populationLimit  >  populationLimit)  {  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  >  populationLimit)  {  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  >  populationLimit)  {  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }	  this.populationLimit    =    populationLimit    -    1;    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	11	None	replace
697	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
698	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
699	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	40	2	replace
700	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  List  <  Chromosome>(populationLimit);  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  List  <  Chromosome>(populationLimit);  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  List  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	67	None	add
701	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);	  this.populationLimit    =    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	77	None	replace
702	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
703	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
704	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]      NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
705	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
706	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
707	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
708	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  PopulationLimit.UNKNOWN;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  PopulationLimit.UNKNOWN;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  PopulationLimit.UNKNOWN;  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    <    =    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
709	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  List  <  Chromosome>(chromosomes.size());  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  List  <  Chromosome>(chromosomes.size());  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  List  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	61	None	add
710	[BUG]  [BUGGY]  int  populationLimit  =  populations.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  populations.size()  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  populations.size()  -  1;	  this.populationLimit    =    populationLimit    -    1;    int    populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	10	None	replace
711	[BUG]  [BUGGY]  int  populationLimit  =  numberLimit  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  numberLimit  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  numberLimit  -  1;	  this.populationLimit    =    populationLimit    -    1;    int    populationLimit    =    populationLimit    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	10	None	replace
712	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
713	[BUG]  [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        =        populationLimit        -        1;        this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
714	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  populationLimit  +  2;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    2;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
715	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]              java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	123	None	replace
716	[BUG]  [BUGGY]  if(chromosomes.size()  >  1)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [CE]  cannot  find  symbol  PopulationLimit  [FE]                java.lang.IndexOutOfBoundsException:  Index:  0      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  1)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(chromosomes.size()  >  1)  {  chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  }	          chromosomes.clear();    chromosomes.clear();    this.populationLimit    =    PopulationLimit.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	123	None	replace
717	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
718	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
719	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
720	[BUG]  [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit        -=        populationLimit;        this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
721	[BUG]  [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
722	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
723	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  true);  }  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  true);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit,  true);  }	  this.populationLimit    =    0;    if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
724	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  this.populationLimit    =    populationLimit    -    1;    if(populationLimit    <    =    0)    {    this.populationLimit    =    populationLimit    -    1;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
725	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  else  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	  this.populationLimit    -=    populationLimit;    if(populationLimit    >    0)    {    this.populationLimit    -=    populationLimit;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
