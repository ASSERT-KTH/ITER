bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;	  	compilable	  [FE]  AssertionError  	15	1	add
2	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  this.populationLimit  -=  populationLimit;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    this.populationLimit  -=  populationLimit;	  	compilable	  [FE]  AssertionError  	15	1	add
3	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  this.populationLimit  -=  populationLimit;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
4	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	15	None	add
5	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	15	None	add
6	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    int  populationLimit  =  chromosomes.size();  this.populationLimit  -=  populationLimit;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	15	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;	  	compilable	  [FE]  AssertionError  	13	1	add
8	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  this.populationLimit  =  populationLimit  -  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    this.populationLimit  =  populationLimit  -  1;	  	compilable	  [FE]  AssertionError  	13	1	add
9	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	13	None	add
10	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  int  populationLimit  =  populationLimit  -  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    int  populationLimit  =  populationLimit  -  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	13	None	add
11	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	13	None	add
12	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  -  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	13	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  /  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  /  1;	  this.populationLimit    =    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	12	1	replace
14	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  /  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  /  1;	  this.populationLimit    =    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	12	1	replace
15	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes.addAll(this.chromosomes);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.addAll(this.chromosomes);	      chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	7	replace
16	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes.addAll(this.chromosomes);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this.chromosomes);	      chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	7	replace
17	[BUG]  [BUGGY]  chromosomes.addAll(this);  [CE]  no  suitable  method  found  for  addAll(ListPopulation)  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes.addAll(this);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.addAll(this);	      chromosomes.clear();    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation)	21	None	replace
18	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes.remove(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	chromosomes.remove(chromosomes.size());	      chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	6	replace
19	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes.remove(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.remove(chromosomes.size());	      chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	6	replace
20	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  chromosomes.size()  -  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	1	None	replace
21	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  chromosomes.size()  +  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	1	None	replace
22	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  chromosomes.clear();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	20	3	add
23	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  chromosomes.clear();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	20	3	add
24	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [CE]  ')'  expected  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.remove(chromosomes.next());  }	  	non-compiled	[CE]  ')'  expected	20	None	add
25	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  chromosomes.next();  }	  	non-compiled	[CE]  ')'  expected	20	None	add
26	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	20	None	add
27	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;)  {  chromosomes.clear();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	20	None	add
28	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	3	5	replace
29	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	3	5	replace
30	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	3	2	replace
31	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  NumberIsTooLargeException  	3	2	replace
32	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	11	1	add
34	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  this.populationLimit  =  populationLimit  +  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    this.populationLimit  =  populationLimit  +  1;	  	compilable	  [FE]  AssertionError  	11	1	add
35	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	11	None	add
36	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	11	None	add
37	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  int  populationLimit  =  populationLimit  +  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    int  populationLimit  =  populationLimit  +  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	11	None	add
38	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  This.populationLimit  =  populationLimit  +  1;  [CE]  cannot  find  symbol  This  [FE]            AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  This.populationLimit  =  populationLimit  +  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    This.populationLimit  =  populationLimit  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	11	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	17	1	add
40	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	17	1	add
41	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	17	None	add
42	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	17	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	17	1	add
44	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	17	1	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  populationLimit  +  1;	  this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	16	3	replace
46	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit  +  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit  +  1;	  this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	16	3	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  1;	  this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	16	3	replace
48	[BUG]  [BUGGY]  this.populationLimit  -=  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  1;	  this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	16	3	replace
49	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
50	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	18	2	replace
51	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  NumberIsTooLargeException  	18	2	replace
52	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  this.populationLimit  =  0;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    0;    this.populationLimit  =  0;	  	compilable	  [FE]  AssertionError  	9	1	add
54	[BUG]  [BUGGY]  this.populationLimit  =  0;  this.populationLimit  =  0;  [FE]  AssertionError  [FE]    NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  this.populationLimit  =  0;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    0;    this.populationLimit  =  0;	  	compilable	  [FE]  AssertionError  	9	1	add
55	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]      NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
56	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
57	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]          NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
58	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]            NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationLimit,  false);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  2;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  -  2;	  this.populationLimit    =    populationLimit    -    1;    	compilable	  [FE]  AssertionError  	14	1	replace
60	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  2;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  2;	  this.populationLimit    =    populationLimit    -    1;    	compilable	  [FE]  AssertionError  	14	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	2	1	add
62	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	2	1	add
63	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	2	None	add
64	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol  This	2	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	2	1	add
66	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	2	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  AssertionError  	5	1	add
68	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	compilable	  [FE]  AssertionError  	5	1	add
69	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	5	None	add
70	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  This	5	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	7	1	add
72	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	7	1	add
73	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	7	None	add
74	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  This	7	None	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	7	1	add
76	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	7	1	add
77	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  cannot  find  symbol  [FE]    NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  this.populationLimit    =    0;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
78	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  1;	  this.populationLimit    =    0;    	compilable	  [FE]  NumberIsTooLargeException  	10	2	replace
79	[BUG]  [BUGGY]  this.populationLimit  =  1;  [FE]  NumberIsTooLargeException  [FE]      NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  1;	  this.populationLimit    =    0;    	compilable	  [FE]  NumberIsTooLargeException  	10	2	replace
80	[BUG]  [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  cannot  find  symbol  [FE]        NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  this.populationLimit    =    0;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
81	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
82	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]              AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	4	None	replace
83	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	4	None	replace
84	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                  AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	4	None	replace
85	[BUG]  [BUGGY]  chromosomes  =  Collections.newArrayList();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  Collections.newArrayList();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Collections.newArrayList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
86	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  new  ArrayList();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	19	None	replace
87	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList();  [CE]  cannot  find  symbol  Lists  [FE]              AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  Lists.newLinkedList();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newLinkedList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	19	None	replace
88	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
89	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	8	2	replace
90	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	8	2	replace
91	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  <  =  0)?  0  :  populationLimit;  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =(populationLimit  <  =  0)?  0  :  populationLimit;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =(populationLimit  <  =  0)?  0  :  populationLimit;	  this.populationLimit    =    0;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;	  this.populationLimit    =    0;    	compilable	  [FE]  AssertionError  	10	1	replace
93	[BUG]  [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [FE]  AssertionError  [FE]      NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =(populationLimit  <  0)?  0  :  populationLimit;	  this.populationLimit    =    0;    	compilable	  [FE]  AssertionError  	10	1	replace
94	[BUG]  [BUGGY]  this.populationLimit  -=  numberLimit;  [CE]  cannot  find  symbol  numberLimit  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  numberLimit;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  numberLimit;	  this.populationLimit    -=    populationLimit;    	non-compiled	[CE]  cannot  find  symbol  numberLimit	16	None	replace
95	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
96	[BUG]  [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      NumberIsTooLargeException    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  0;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    0;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	compilable	  [FE]  AssertionError  	15	1	add
98	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    if(populationLimit  >  0)  {  this.populationLimit  -=  populationLimit;  }	  	compilable	  [FE]  AssertionError  	15	1	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	17	1	add
100	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	17	1	add
101	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(0);  [CE]  cannot  find  symbol  Lists  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  Lists.newArrayList(0);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(0);	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	19	None	replace
102	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.chromosomes);  [CE]  cannot  find  symbol  Lists  [FE]            AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  Lists.newArrayList(this.chromosomes);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(this.chromosomes);	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	19	None	replace
103	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	compilable	  [FE]  AssertionError  	13	1	add
105	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    if(populationLimit  >  0)  {  this.populationLimit  =  populationLimit  -  1;  }	  	compilable	  [FE]  AssertionError  	13	1	add
106	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
107	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
108	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1;  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
109	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
110	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	6	2	replace
111	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	compilable	  [FE]  NumberIsTooLargeException  	6	2	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  2;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  +  2;	  this.populationLimit    =    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	12	2	replace
113	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  2;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  +  2;	  this.populationLimit    =    populationLimit    +    1;    	compilable	  [FE]  AssertionError  	12	2	replace
114	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  ++populationLimit)  {  chromosomes.clear();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	20	None	add
115	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [CE]  ')'  expected  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasNext();)  {  chromosomes.next();  }	  	non-compiled	[CE]  ')'  expected	20	None	add
116	[BUG]  [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [CE]  not  a  statement  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }	  	non-compiled	[CE]  not  a  statement	20	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  -=  populationLimit  +  2;	  this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	16	3	replace
118	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit  +  2;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  -=  populationLimit  +  2;	  this.populationLimit    -=    populationLimit;    	compilable	  [FE]  AssertionError  	16	3	replace
119	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	        chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	20	3	add
120	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	20	3	add
121	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  [CE]  cannot  find  symbol  PopulationLimit  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  PopulationLimit.intValue();	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	20	None	add
122	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;  [CE]  cannot  find  symbol  numberLimit  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  numberLimit;  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  numberLimit;	  	non-compiled	[CE]  cannot  find  symbol  numberLimit	20	None	add
123	[BUG]  [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  [CE]  cannot  find  symbol  PopulationLimit  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]      chromosomes.clear();  chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	        chromosomes.clear();    chromosomes.clear();  this.populationLimit  =  PopulationLimit.UNKNOWN;	  	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	20	None	add
124	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
125	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
126	[BUG]  [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  -=  populationLimit;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    -=    populationLimit;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
127	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	6	None	replace
128	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  Lists.newArrayList(this.populationLimit);	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	19	None	replace
129	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
130	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
131	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
132	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  -  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    -    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
133	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	4	None	replace
134	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]              AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	4	None	replace
135	[BUG]  [BUGGY]  chromosomes.removeAll(this);  [CE]  no  suitable  method  found  for  removeAll(ListPopulation)  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  chromosomes.removeAll(this);  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	chromosomes.removeAll(this);	      chromosomes.clear();    	non-compiled	[CE]  no  suitable  method  found  for  removeAll(ListPopulation)	21	None	replace
136	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
137	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  this.populationLimit  =  populationLimit  +  1;  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit    =    populationLimit    +    1;    if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.PLIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
138	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]    if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [BUGGY]    this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	int  populationLimit  =  chromosomes.size()  -  2;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	1	None	replace
