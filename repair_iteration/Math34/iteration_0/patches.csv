bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action3	[BUG]  [BUGGY]  this.populationLimit  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  incompatible  types  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]  this.populationLimit  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  new  ArrayList  <  Chromosome>(populationLimit);	this.populationLimit  =  populationLimit;  	non-compiled	[CE]  incompatible  types	13	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  testIterator  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  [BUGGY]  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	this.populationLimit  =  populationLimit  -  1;	this.populationLimit  =  populationLimit;  	compilable	  [FE]  AssertionError  testIterator	13	1
5	[BUG]  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  [FE]  AssertionError  testIterator  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]  this.populationLimit  =  populationLimit  -  1;  [BUGGY]  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	this.populationLimit  =  populationLimit  -  1;	this.populationLimit  =  populationLimit;  	compilable	  [FE]  AssertionError  testIterator	13	1	replace
12	[BUG]  [BUGGY]    this.population  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  population  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]    this.population  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	    this.population  =  new  ArrayList  <  Chromosome>(populationLimit);		non-compiled	[CE]  cannot  find  symbol  population	14	None	add
13	[BUG]  [BUGGY]    this.populationLimit  =  chromosomes.get(populationLimit);  [CE]  incompatible  types  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]    this.populationLimit  =  chromosomes.get(populationLimit);  [BUGGY]  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	    this.populationLimit  =  chromosomes.get(populationLimit);		non-compiled	[CE]  incompatible  types	14	None	add
14	[BUG]  [BUGGY]    if(populationLimit  >  0)  {  throw  new  NumberIsTooLargeException( " ");  }  [CE]  no  suitable  constructor  found  for  NumberIsTooLargeException(String)  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]    if(populationLimit  >  0)  {  throw  new  NumberIsTooLargeException( " ");  }  [BUGGY]  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	    if(populationLimit  >  0)  {  throw  new  NumberIsTooLargeException( " ");  }		non-compiled	[CE]  no  suitable  constructor  found  for  NumberIsTooLargeException(String)	14	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  testIterator  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]    this.populationLimit  =  chromosomes.size();  [BUGGY]  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	add	    this.populationLimit  =  chromosomes.size();		compilable	  [FE]  AssertionError  testIterator	14	1
16	[BUG]  [BUGGY]    this.populationLimit  =  chromosomes.size();  [FE]  AssertionError  testIterator  [CONTEXT]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [BUGGY]    this.populationLimit  =  chromosomes.size();  [BUGGY]  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	75	75	1	replace	    this.populationLimit  =  chromosomes.size();		compilable	  [FE]  AssertionError  testIterator	14	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  testIterator  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if(chromosomes.size()  >  populationLimit  ||  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	add	if(chromosomes.size()  >  populationLimit  ||  chromosomeColl.size()  >  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  AssertionError  testIterator	7	1
23	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit  ||  chromosomeColl.size()  >  populationLimit)  {  [FE]  AssertionError  testIterator  [CONTEXT]  public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  [BUGGY]  if(chromosomes.size()  >  populationLimit  ||  chromosomeColl.size()  >  populationLimit)  {  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.5773502691896258	108	108	1	replace	if(chromosomes.size()  >  populationLimit  ||  chromosomeColl.size()  >  populationLimit)  {	if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  	compilable	  [FE]  AssertionError  testIterator	7	1	replace
