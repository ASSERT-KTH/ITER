bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	10	1	add
2	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	10	1	add
3	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	10	None	add
4	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	10	None	add
5	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  these.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  these  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  these.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    these.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  these	10	None	add
6	[BUG]  [BUGGY]  chromosomes  =  Collections.newArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  chromosomes  =  Collections.newArrayList();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	chromosomes  =  Collections.newArrayList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	int  populationLimit  =  chromosomes.size()  -  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	int  populationLimit  =  chromosomes.size()  +  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  [FE]  NotPositiveException  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  0  ||  populationLimit  >  chromosomes.size())  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	if(populationLimit  <  0  ||  populationLimit  >  chromosomes.size())  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  NotPositiveException  	9	5	replace
12	[BUG]  [BUGGY]  if(populationLimit  <  0  ||  populationLimit  >  chromosomes.size())  {  [FE]  NotPositiveException  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  0  ||  populationLimit  >  chromosomes.size())  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  0  ||  populationLimit  >  chromosomes.size())  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  NotPositiveException  	9	5	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  1)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	if(populationLimit  <  1)  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  AssertionError  	9	1	replace
14	[BUG]  [BUGGY]  if(populationLimit  <  1)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  1)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  1)  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  AssertionError  	9	1	replace
15	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  ==  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	if(populationLimit  ==  0)  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	3	replace
16	[BUG]  [BUGGY]  if(populationLimit  ==  0)  {  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  ==  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  ==  0)  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	3	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	3	1	add
18	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	3	1	add
19	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	3	None	add
20	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol  This	3	None	add
21	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  these.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  these  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  these.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    these.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol  these	3	None	add
22	[BUG]  [BUGGY]  if(populationLimit  <  =  0  ||  populationLimit  >  chromosomes.size())  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  =  0  ||  populationLimit  >  chromosomes.size())  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  =  0  ||  populationLimit  >  chromosomes.size())  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  if(populationLimit  <  =  0  ||  populationLimit  >  chromosomes.size())  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  =  0  ||  populationLimit  >  chromosomes.size())  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  =  0  ||  populationLimit  >  chromosomes.size())  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
26	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	final  int  populationLimit  =  chromosomes.size()  -  1;	      final    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  final  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	final  int  populationLimit  =  chromosomes.size()  +  1;	      final    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  if(populationLimit  <  0)  {  if(populationLimit  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  0)  {  if(populationLimit  <  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit    <    0)    {    if(populationLimit  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
33	[BUG]  [BUGGY]  if(populationLimit  <  0)  {  If(populationLimit  <  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  0)  {  If(populationLimit  <  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit    <    0)    {    If(populationLimit  <  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
34	[BUG]  [BUGGY]  if(populationLimit  <  0)  {  if(populationLimit  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  0)  {  if(populationLimit  >=  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit    <    0)    {    if(populationLimit  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
35	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  0  ||  populationLimit  >  chromosomes.size())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes.size()  <  =  0  ||  populationLimit  >  chromosomes.size())  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes.size()  <  =  0  ||  populationLimit  >  chromosomes.size())  {	  if(populationLimit    <    =    0    ||    populationLimit    >    chromosomes.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  if(populationLimit  <  =  0  ||  populationLimit  <  chromosomes.size())  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  =  0  ||  populationLimit  <  chromosomes.size())  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  =  0  ||  populationLimit  <  chromosomes.size())  {	  if(populationLimit    <    =    0    ||    populationLimit    >    chromosomes.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>();	      chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	      chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit  +  1);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  numberLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  numberLimit);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  numberLimit);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  if(chromosomes  <  =  0  ||  populationLimit  >  chromosomes.size())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes  <  =  0  ||  populationLimit  >  chromosomes.size())  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes  <  =  0  ||  populationLimit  >  chromosomes.size())  {	  if(populationLimit    <    =    0    ||    populationLimit    >    chromosomes.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  chromosomes  =  Lists.newLinkedList();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	chromosomes  =  Lists.newLinkedList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	chromosomes  =  Lists.newArrayList(this.populationLimit);	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	10	1	add
46	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	10	1	add
47	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	3	1	add
49	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	3	1	add
50	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  >  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	add	if(populationLimit  >  0)  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	8	replace
51	[BUG]  [BUGGY]  if(populationLimit  >  0)  {  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  >  0)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  >  0)  {	  if(populationLimit    <    0)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	8	replace
52	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(0);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(0);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(0);	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_SETTING,  populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_SETTING,  populationLimit);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_SETTING,  populationLimit);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
55	[BUG]  [BUGGY]  if(populationLimit  <  =  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  =  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  =  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
58	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit  ||  populationLimit  >  chromosomes.size())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(chromosomes.size()  <  =  populationLimit  ||  populationLimit  >  chromosomes.size())  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(chromosomes.size()  <  =  populationLimit  ||  populationLimit  >  chromosomes.size())  {	  if(populationLimit    <    =    0    ||    populationLimit    >    chromosomes.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  1)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }	      if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,    populationLimit);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	int  populationLimit  =  chromosomes.size()  -  2;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  if(populationLimit  <  0  ||  populationLimit  >  List.POPULATION_LIMIT_NOT_POSITIVE)  {  [CE]  cannot  find  symbol  POPULATION_LIMIT_NOT_POSITIVE  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  if(populationLimit  <  0  ||  populationLimit  >  List.POPULATION_LIMIT_NOT_POSITIVE)  {  [BUGGY]    throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	if(populationLimit  <  0  ||  populationLimit  >  List.POPULATION_LIMIT_NOT_POSITIVE)  {	  if(populationLimit    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  POPULATION_LIMIT_NOT_POSITIVE	9	None	replace
65	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  2;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }    [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  2;  [BUGGY]    if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	68	68	1	replace	final  int  populationLimit  =  chromosomes.size()  -  2;	      final    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
