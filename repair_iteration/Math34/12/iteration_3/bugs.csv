bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this(final  Set  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(final  Set  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Set  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);	  this(final    Set    <    Chromosome>    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
2	[BUG]  [BUGGY]  this(final  int  populationLimit,  final  Set  <  Chromosome>  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  final  Set  <  Chromosome>  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  final  Set  <  Chromosome>  chromosomes,  false);	  this(final    Set    <    Chromosome>    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
3	[BUG]  [BUGGY]  this(final  Set  <  Chromosome>,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  this(final  Set  <  Chromosome>,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Set  <  Chromosome>,  final  int  populationLimit,  true);	  this(final    Set    <    Chromosome>    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
4	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
5	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationLimit,  true);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
6	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
7	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit);	  chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
8	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(populationLimit),  populationLimit));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(populationLimit),  populationLimit));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(populationLimit),  populationLimit));	  this(new    LinkedList    <    Chromosome>(populationLimit),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
9	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(populationLimit),  populationLimit,  false);	  this(new    LinkedList    <    Chromosome>(populationLimit),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
10	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit),  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit),  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(populationLimit),  populationLimit,  true);	  this(new    LinkedList    <    Chromosome>(populationLimit),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
11	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit));	  this(new    ArrayList    <    Chromosome>(chromosomes),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
12	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes.size()),  populationLimit));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes.size()),  populationLimit));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(chromosomes.size()),  populationLimit));	  this(new    ArrayList    <    Chromosome>(chromosomes),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
13	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    true));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
14	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  true));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  true));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  true));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    true));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
15	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  true));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  true));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  true));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    true));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
16	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  int  chromosomes)  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  int  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  int  chromosomes)  {	  Public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
17	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  Set  <  Chromosome>  chromosomes)  {  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  Set  <  Chromosome>  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  Set  <  Chromosome>  chromosomes)  {	  Public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
18	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  LinkedList  <  Chromosome>  chromosomes)  {  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  LinkedList  <  Chromosome>  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  LinkedList  <  Chromosome>  chromosomes)  {	  Public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
19	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    false));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
21	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  false));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  false));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  false));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    false));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
22	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  false));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  false));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(populationLimit,  false));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    false));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
23	[BUG]  [BUGGY]  static  final  int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  static  final  int  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	static  final  int  populationLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
24	[BUG]  [BUGGY]  final  long  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  final  long  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  long  populationLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
25	[BUG]  [BUGGY]  this(number,  chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(number,  chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(number,  chromosomes,  populationLimit,  false);	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
26	[BUG]  [BUGGY]  this(number,  number,  chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(number,  number,  chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(number,  number,  chromosomes,  populationLimit,  false);	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
27	[BUG]  [BUGGY]  this(number,  null,  chromosomes,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(number,  null,  chromosomes,  populationLimit);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(number,  null,  chromosomes,  populationLimit);	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
28	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
29	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
30	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(4);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(4);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(4);	  chromosomes    =    new    LinkedList    <    Chromosome>(4);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
31	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(8);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(8);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(8);	  chromosomes    =    new    LinkedList    <    Chromosome>(4);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
32	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  +  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  +  2);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit  +  2);	  this.chromosomes    =    chromosomes.get(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  +  1,  populationLimit);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  +  1,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit  +  1,  populationLimit);	  this.chromosomes    =    chromosomes.get(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit  +  1);	  this.chromosomes    =    chromosomes.get(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  LinkedList  <  Chromosome>  chromosomes)  {  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  LinkedList  <  Chromosome>  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  LinkedList  <  Chromosome>  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    Set    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
36	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
37	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes.size(),  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes.size(),  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>,  chromosomes.size(),  true);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
38	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  true);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
39	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
40	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
41	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
42	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Integer  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    2;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
43	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  chromosomes)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  chromosomes)  {	  Public    ListPopulation(final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
44	[BUG]  [BUGGY]  Public  ListPopulation(final  int  number,  final  int  populationLimit)  {  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  number,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  number,  final  int  populationLimit)  {	  Public    ListPopulation(final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
45	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  false);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  false);	  MutableMap.sort(chromosomes);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
46	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  true);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  true);	  MutableMap.sort(chromosomes);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
47	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
48	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
49	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
50	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
51	[BUG]  [BUGGY]  nested  =  chromosomes.size()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.size()  +  1;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.size()  +  1;	  nested    =    chromosomes.size();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
52	[BUG]  [BUGGY]  nested  =  chromosomes.size()  >  populationLimit;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.size()  >  populationLimit;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.size()  >  populationLimit;	  nested    =    chromosomes.size();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
53	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >  populationLimit)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
54	[BUG]  [BUGGY]  nested  =  chromosomes.get(populationLimit  +  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.get(populationLimit  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.get(populationLimit  +  1);	  nested    =    chromosomes.get(populationLimit);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
55	[BUG]  [BUGGY]  nested  =  chromosomes.get(populationLimit,  false);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.get(populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.get(populationLimit,  false);	  nested    =    chromosomes.get(populationLimit);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
56	[BUG]  [BUGGY]  allowLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  allowLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	allowLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
57	[BUG]  [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
58	[BUG]  [BUGGY]  allowLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]        [BUGGY]  allowLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	allowLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
59	[BUG]  [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]        [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
60	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
61	[BUG]  [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
62	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
63	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);	  chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
64	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  +  1);	  chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
65	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit),  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit),  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit),  true);	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit),    false);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
66	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit),  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit),  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(chromosomes,  populationLimit),  false);	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit),    false);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
67	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit),  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit),  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit),  false);	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit),    false);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
68	[BUG]  [BUGGY]  this(final  int  populationLimit,  final  int  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  final  int  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  final  int  chromosomes,  false);	  public    ListPopulation(final    int    populationLimit,    final    int    chromosomes)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  this(final  int  populationLimit,  final  int  chromosomes,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  final  int  chromosomes,  null);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  final  int  chromosomes,  null);	  public    ListPopulation(final    int    populationLimit,    final    int    chromosomes)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  -  1  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  -  1  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit  -  1  +  1);	  this.chromosomes    =    chromosomes.get(populationLimit    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
71	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  -  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  -  2);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit  -  2);	  this.chromosomes    =    chromosomes.get(populationLimit    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
72	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size()),  populationLimit,  false);	  this(new    LinkedList    <    Chromosome>(chromosomes.size()),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
73	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(1);	  chromosomes    =    new    LinkedList    <    Chromosome>(1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
74	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(2);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(2);	  chromosomes    =    new    LinkedList    <    Chromosome>(1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
75	[BUG]  [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  true);	  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
76	[BUG]  [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  false);	  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
77	[BUG]  [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes.size());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes.size());  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes.size());	  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
78	[BUG]  [BUGGY]  this(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  true);	  this(final    List    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
79	[BUG]  [BUGGY]  this(final  int  chromosomes,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int  chromosomes,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  chromosomes,  final  int  populationLimit,  true);	  this(final    List    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
80	[BUG]  [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
81	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  true);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
82	[BUG]  [BUGGY]  Final  int  populationLimit  =  chromosomes.size();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  Final  int  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Final  int  populationLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    2;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
83	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  /  100;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =  chromosomes.size()  /  100;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =  chromosomes.size()  /  100;	  final    int    populationLimit    =    chromosomes.size()    /    populationLimit;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
84	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  /  populationLimit  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =  chromosomes.size()  /  populationLimit  +  1;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =  chromosomes.size()  /  populationLimit  +  1;	  final    int    populationLimit    =    chromosomes.size()    /    populationLimit;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
85	[BUG]  [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  false);	  this(null,    Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
86	[BUG]  [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  true);	  this(null,    Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
87	[BUG]  [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);	  this(null,    Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
88	[BUG]  [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  false)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  false)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  Lists.  <  Chromosome>  chromosomes,  populationLimit,  false)  {	  this(null,    Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
89	[BUG]  [BUGGY]  final  double  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  final  double  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  double  populationLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
90	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
91	[BUG]  [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
92	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
93	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit	  if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
94	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  1);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
95	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(populationLimit,  populationLimit));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(populationLimit,  populationLimit));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(populationLimit,  populationLimit));	  this(new    LinkedList    <    Chromosome>(populationLimit,    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
96	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  false));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  false));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  false));	  this(new    LinkedList    <    Chromosome>(populationLimit,    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
97	[BUG]  [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
99	[BUG]  [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
100	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newArrayListWithCapacity(populationLimit  +  1);	  chromosomes    =    Lists.newArrayListWithCapacity(populationLimit);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
101	[BUG]  [BUGGY]  this(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  true);	  this(final    int    numberLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
102	[BUG]  [BUGGY]  this(final  int  numberLimit,  List  <  Chromosome>  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  List  <  Chromosome>  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  List  <  Chromosome>  chromosomes,  true);	  this(final    int    numberLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
103	[BUG]  [BUGGY]  this(final  int  numberLimit,  Lists.  <  Chromosome>  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  Lists.  <  Chromosome>  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  Lists.  <  Chromosome>  chromosomes,  true);	  this(final    int    numberLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
104	[BUG]  [BUGGY]  this(final  int  numberLimit,  final  Set  <  Chromosome>  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  final  Set  <  Chromosome>  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  final  Set  <  Chromosome>  chromosomes,  false);	  this(final    int    numberLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
105	[BUG]  [BUGGY]  this(final  int,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(final  int,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int,  final  int  populationLimit,  false);	  this(final    int    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
106	[BUG]  [BUGGY]  this(final  int  type,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(final  int  type,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  type,  final  int  populationLimit,  false);	  this(final    int    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
107	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>,  populationLimit,  true);	  this(Lists.    <    Chromosome>,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
108	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newArrayList(populationLimit  +  1);	  chromosomes    =    Lists.newArrayList(populationLimit);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
109	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  false);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newArrayList(populationLimit,  false);	  chromosomes    =    Lists.newArrayList(populationLimit);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
110	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);	  chromosomes    =    Lists.newArrayList(populationLimit);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
111	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  int  chromosomes,  final  int  populationLimit)  {  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  int  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  int  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populate,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation	93	None	replace
112	[BUG]  [BUGGY]  this(  populate,  chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(  populate,  chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(  populate,  chromosomes,  populationLimit,  false);	  public    ListPopulation(final    int    populate,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
113	[BUG]  [BUGGY]  this(population,  chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(population,  chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(population,  chromosomes,  populationLimit,  false);	  public    ListPopulation(final    int    populate,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
114	[BUG]  [BUGGY]  this(final  int  populationLimit,  final  Count  <  Chromosome>  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  final  Count  <  Chromosome>  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  final  Count  <  Chromosome>  chromosomes,  false);	  public    ListPopulation(final    int    populationLimit,    final    Count    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
115	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  Count  <  Chromosome>  chromosomes)  {  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  Count  <  Chromosome>  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  Count  <  Chromosome>  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    Count    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
116	[BUG]  [BUGGY]  final  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  final  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  <identifier>  expected	9	None	replace
117	[BUG]  [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  <identifier>  expected	9	None	replace
118	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);	  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
119	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  chromosomes.size());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  chromosomes.size());  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  chromosomes.size());	  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
120	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  true);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  true);	  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
121	[BUG]  [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
122	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false,  populationLimit);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
123	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes)  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    ArrayList    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
124	[BUG]  [BUGGY]  this(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes,  false);	  public    ListPopulation(final    int    populationLimit,    final    ArrayList    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
125	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  <  Chromosome>,  final  int  populationLimit)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  <  Chromosome>,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  <  Chromosome>,  final  int  populationLimit)  {	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
126	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  false);	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
127	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  <  Chromosome>,  populationLimit)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  <  Chromosome>,  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  <  Chromosome>,  populationLimit)  {	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
128	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  populationLimit,  false);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  populationLimit,  false);	  MutableMap.sort(chromosomes,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
129	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  populationLimit,  true);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  populationLimit,  true);	  MutableMap.sort(chromosomes,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
130	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  populationLimit,  null);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  populationLimit,  null);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  populationLimit,  null);	  MutableMap.sort(chromosomes,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
131	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  if(chromosomes    ==    null)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
132	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
133	[BUG]  [BUGGY]  this(final  Lists.  <  Chromosome>,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(final  Lists.  <  Chromosome>,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Lists.  <  Chromosome>,  final  int  populationLimit,  false);	  this(final    Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
134	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>,  final  int  populationLimit,  false);	  this(final    Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
135	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>,  new  int[]  {  populationLimit  }  );  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>,  new  int[]  {  populationLimit  }  );  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>,  new  int[]  {  populationLimit  }  );	  this(final    Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
136	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  }	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    true);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
137	[BUG]  [BUGGY]  if(populationLimit  >  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  >  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  >  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  if(populationLimit    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
138	[BUG]  [BUGGY]  if(populationLimit  >  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  >  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  >  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }	  if(populationLimit    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
139	[BUG]  [BUGGY]  if(populationLimit  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }	  if(populationLimit    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
140	[BUG]  [BUGGY]  this(final  int  populationLimit,  List  <  Chromosome>  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  List  <  Chromosome>  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  List  <  Chromosome>  chromosomes,  true);	  this(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
141	[BUG]  [BUGGY]  this(final  int  populationLimit,  Lists.  <  Chromosome>  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  Lists.  <  Chromosome>  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  Lists.  <  Chromosome>  chromosomes,  true);	  this(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
142	[BUG]  [BUGGY]  MutableFormat.info(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableFormat.info(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormat.info(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
143	[BUG]  [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);	  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
144	[BUG]  [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);	  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
145	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
146	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
147	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  true);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
148	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes.size());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes.size());  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes.size());	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
149	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  populationLimit,  false,  chromosomes);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
150	[BUG]  [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(new  ArrayList  <  Chromosome>(chromosomes),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  ArrayList  <  Chromosome>(chromosomes),  populationLimit,  false);	  this(new    LinkedList    <    Chromosome>(chromosomes),    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
151	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit,  true);	  this(new    LinkedList    <    Chromosome>(chromosomes),    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
152	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit,  false);	  this(new    LinkedList    <    Chromosome>(chromosomes),    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
153	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit,  false);	  this.chromosomes    =    chromosomes.get(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
154	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit,  true);	  this.chromosomes    =    chromosomes.get(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
155	[BUG]  [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  {  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
156	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  *  populationLimit  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =  chromosomes.size()  *  populationLimit  +  1;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =  chromosomes.size()  *  populationLimit  +  1;	  final    int    populationLimit    =    chromosomes.size()    *    populationLimit;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
157	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populateLimit)    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
158	[BUG]  [BUGGY]  this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populateLimit)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
159	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes.size(),  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes.size(),  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>,  chromosomes.size(),  populationLimit,  true);	  this(Lists.    <    Chromosome>,    chromosomes.size(),    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
160	[BUG]  [BUGGY]  this(chromosomes.  <  Chromosome>,  chromosomes.size(),  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(chromosomes.  <  Chromosome>,  chromosomes.size(),  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(chromosomes.  <  Chromosome>,  chromosomes.size(),  populationLimit,  true);	  this(Lists.    <    Chromosome>,    chromosomes.size(),    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
161	[BUG]  [BUGGY]  this(final  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(final  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);	  this(final    Collections.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
162	[BUG]  [BUGGY]  this(final  Collections.  <  Chromosome>,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(final  Collections.  <  Chromosome>,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Collections.  <  Chromosome>,  final  int  populationLimit,  false);	  this(final    Collections.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
163	[BUG]  [BUGGY]  this(Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);	  this(final    Collections.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
164	[BUG]  [BUGGY]  this(Collections.  <  Chromosome>,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(Collections.  <  Chromosome>,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Collections.  <  Chromosome>,  final  int  populationLimit,  false);	  this(final    Collections.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
165	[BUG]  [BUGGY]  chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
166	[BUG]  [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
167	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populorLimit)  {  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populorLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populorLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populorLimit)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
168	[BUG]  [BUGGY]  this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populorLimit)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
169	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  true);	  this.chromosomes    =    chromosomes.get(populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
170	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  false,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  false,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  false,  populationLimit);	  this.chromosomes    =    chromosomes.get(populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
171	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  false,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  false,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  false,  true);	  this.chromosomes    =    chromosomes.get(populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
172	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  null);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  null);	  this.chromosomes    =    chromosomes.get(populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
173	[BUG]  [BUGGY]  double  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  double  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	double  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
174	[BUG]  [BUGGY]  long  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  long  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	long  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
175	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  List.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  List.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  List.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
176	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  populationLimit,  true);	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
177	[BUG]  [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
178	[BUG]  [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
179	[BUG]  [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE),  populationLimit,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE),  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	ettyPrinter.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE),  populationLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
180	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
181	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
182	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  }	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
183	[BUG]  [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
184	[BUG]  [BUGGY]  chromosomes  =  Lists.newHashSet();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newHashSet();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newHashSet();	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
185	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  numberLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    numberLimit)    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
186	[BUG]  [BUGGY]  this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int,  final  List  <  Chromosome>  chromosomes,  final  int  numberLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    numberLimit)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
187	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  long  numberLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  long  numberLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  long  numberLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    numberLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	60	None	replace
188	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  final  int  populationLimit,  true);	  this(Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
189	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  final  int  populationLimit,  true);	  this(Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
190	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);	  this(Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
191	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newArrayList(1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newArrayList(1);	  chromosomes    =    Lists.newArrayList(0);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
192	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  false);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
193	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  populationLimit,  chromosomes);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  populationLimit,  chromosomes);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  populationLimit,  chromosomes);	  this(DateTimeUtils.currentTimeMillis(),    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
194	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  populations,  populationLimit);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  populations,  populationLimit);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  populations,  populationLimit);	  this(DateTimeUtils.currentTimeMillis(),    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
195	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  populationLimit,  false);	  this(DateTimeUtils.currentTimeMillis(),    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
196	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  0,  populationLimit);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  0,  populationLimit);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  0,  populationLimit);	  this(DateTimeUtils.currentTimeMillis(),    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
197	[BUG]  [BUGGY]  MutableFormats.info(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.info(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.info(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
198	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
199	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  populationLimit);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
200	[BUG]  [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
201	[BUG]  [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  {  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
202	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
203	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes.size(),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes.size(),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  chromosomes.size(),  populationLimit,  false);	  this(Lists.    <    Chromosome>,    chromosomes.size(),    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
204	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  Collection  <  Chromosome>  chromosomes)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  Collection  <  Chromosome>  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  Collection  <  Chromosome>  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    ArrayList    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	66	None	replace
205	[BUG]  [BUGGY]  if(chromosomes.size()  >=  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >=  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >=  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
206	[BUG]  [BUGGY]  nested  =  chromosomes.get(populationLimit  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.get(populationLimit  -  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.get(populationLimit  -  1);	  nested    =    chromosomes.get(populationLimit);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
207	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  false);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
208	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  null);	  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
209	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  true);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  true);	  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
210	[BUG]  [BUGGY]  float  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  float  populationLimit  =  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	float  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
211	[BUG]  [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  <identifier>  expected	9	None	replace
212	[BUG]  [BUGGY]  this(numberLimit,  Lists.  <  Chromosome>,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(numberLimit,  Lists.  <  Chromosome>,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(numberLimit,  Lists.  <  Chromosome>,  final  int  populationLimit,  true);	  this(Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
213	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
214	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
215	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
216	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
217	[BUG]  [BUGGY]  public  ListPopulation(final  int  number,  final  chromosomes,  final  int  populationLimit)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  number,  final  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  number,  final  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
218	[BUG]  [BUGGY]  Public  ListPopulation(final  int  number,  final  int  chromosomes,  final  int  populationLimit)  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  number,  final  int  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  number,  final  int  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
219	[BUG]  [BUGGY]  public  ListPopulation(final  int  number,  final  int  populationLimit,  final  int  chromosomes)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  number,  final  int  populationLimit,  final  int  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  number,  final  int  populationLimit,  final  int  chromosomes)  {	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	62	None	replace
220	[BUG]  [BUGGY]  this(final  int  chromosomes,  final  int  populationLimit,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(final  int  chromosomes,  final  int  populationLimit,  null);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  chromosomes,  final  int  populationLimit,  null);	  this(final    int    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
221	[BUG]  [BUGGY]  this(final  int  numberLimit,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  final  int  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  final  int  populationLimit,  false);	  this(final    int    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
222	[BUG]  [BUGGY]  public  ListPopulation(final  int  populate,  final  chromosomes,  final  int  populationLimit)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populate,  final  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populate,  final  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populate,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
223	[BUG]  [BUGGY]  Public  ListPopulation(final  int  populate,  final  int  chromosomes,  final  int  populationLimit)  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        [BUGGY]  Public  ListPopulation(final  int  populate,  final  int  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	Public  ListPopulation(final  int  populate,  final  int  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populate,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
224	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationsLimit),  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationsLimit),  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes,  populationsLimit),  false);	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit),    false);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
225	[BUG]  [BUGGY]  this(null,  List.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(null,  List.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  List.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
226	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit)  {	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
227	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit)  {	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
228	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationsLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationsLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationsLimit,  false);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
229	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
230	[BUG]  [BUGGY]  public  ListPopulation(final  int  populorLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populorLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populorLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populorLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	59	None	replace
231	[BUG]  [BUGGY]  this(null,  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(null,  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);	  this(final    Collections.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
232	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  false);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
233	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  false,  populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  false,  populationLimit);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  false,  populationLimit);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
234	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
235	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes!=  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes!=  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
236	[BUG]  [BUGGY]  if(populationLimit  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }	  if(populationLimit    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
237	[BUG]  [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER,  populationLimit);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER,  populationLimit);	  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
238	[BUG]  [BUGGY]  MutableFormat.init(chromosomes,  LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableFormat.init(chromosomes,  LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormat.init(chromosomes,  LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
239	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
240	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
241	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
242	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOS  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOS  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOS	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
243	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  chromosomes)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    int    chromosomes)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
244	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  char[]  chromosomes)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  char[]  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  char[]  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    int    chromosomes)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	10	None	replace
245	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  boolean  hashCode,  final  int  chromosomes)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  boolean  hashCode,  final  int  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  boolean  hashCode,  final  int  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    int    chromosomes)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	10	None	replace
246	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>,  chromosomes,  populationLimit,  false);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
247	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>,  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>,  chromosomes,  true);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
248	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  int  chromosomes.size())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  int  chromosomes.size())  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  int  chromosomes.size())  {	  public    ListPopulation(final    int    populationLimit,    final    Count    <    Chromosome>    chromosomes)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
249	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  1,  populationLimit;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  1,  populationLimit;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =  chromosomes.size()  -  1,  populationLimit;	  final    int    populationLimit    =    chromosomes.size()    -    populationLimit;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
250	[BUG]  [BUGGY]  public  ListPopulation(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    numberLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	60	None	replace
251	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  Collection  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  Collection  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  Collection  <  Chromosome>  chromosomes,  final  int  numberLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    numberLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	60	None	replace
252	[BUG]  [BUGGY]  this(null,  Lists.  <  Chromosome>,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(null,  Lists.  <  Chromosome>,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  Lists.  <  Chromosome>,  populationLimit,  false);	  this(Lists.    <    Chromosome>,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
253	[BUG]  [BUGGY]  this(chromosomes.  <  Chromosome>,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(chromosomes.  <  Chromosome>,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(chromosomes.  <  Chromosome>,  populationLimit,  false);	  this(Lists.    <    Chromosome>,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
254	[BUG]  [BUGGY]  this(new  java.util.ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(new  java.util.ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  java.util.ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    false));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
255	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationsLimit,  false));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationsLimit,  false));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes,  populationsLimit,  false));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    false));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
256	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  /  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =  chromosomes.size()  /  2;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =  chromosomes.size()  /  2;	  final    int    populationLimit    =    chromosomes.size()    /    populationLimit;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
257	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  0);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  0);	  MutableMap.sort(chromosomes);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
258	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
259	[BUG]  [BUGGY]  safePosition(chromosomes.size()  -  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        [BUGGY]  safePosition(chromosomes.size()  -  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	safePosition(chromosomes.size()  -  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
260	[BUG]  [BUGGY]  safePosition(chromosomes.size()  -  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        [BUGGY]  safePosition(chromosomes.size()  -  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	safePosition(chromosomes.size()  -  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
261	[BUG]  [BUGGY]  safePosition(chromosomes.size()  -  1,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        [BUGGY]  safePosition(chromosomes.size()  -  1,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	safePosition(chromosomes.size()  -  1,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
262	[BUG]  [BUGGY]  safePosition(chromosomes.size()  -  1,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  safePosition(chromosomes.size()  -  1,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	safePosition(chromosomes.size()  -  1,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
263	[BUG]  [BUGGY]  this(new  java.util.ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(new  java.util.ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  java.util.ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    true));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
264	[BUG]  [BUGGY]  this(new  List  <  Chromosome>(chromosomes,  populationLimit,  true));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(new  List  <  Chromosome>(chromosomes,  populationLimit,  true));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  List  <  Chromosome>(chromosomes,  populationLimit,  true));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    true));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
265	[BUG]  [BUGGY]  this(Lists.  <  Chromosome>  chromosomes,  0,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(Lists.  <  Chromosome>  chromosomes,  0,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Lists.  <  Chromosome>  chromosomes,  0,  true);	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
266	[BUG]  [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
267	[BUG]  [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
268	[BUG]  [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
269	[BUG]  [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.this.add(chromosomes,  PopulationType.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
270	[BUG]  [BUGGY]  nested  =  chromosomes.size()  -  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.size()  -  1;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.size()  -  1;	  nested    =    chromosomes.size();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
271	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
272	[BUG]  [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
273	[BUG]  [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  false);	  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
274	[BUG]  [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER,  populationLimit,  true);	  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
275	[BUG]  [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  ==  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
276	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  chromosomes,  populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  chromosomes,  populationLimit);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION,  chromosomes,  populationLimit);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
277	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit  *  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit  *  1);	  this.chromosomes    =    chromosomes.get(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
278	[BUG]  [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
279	[BUG]  [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
280	[BUG]  [BUGGY]  this(final  int  populationLimit,  Collections.  <  Chromosome>  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  Collections.  <  Chromosome>  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  Collections.  <  Chromosome>  chromosomes,  false);	  this(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
281	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  true);  }	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
282	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  1);	  this.chromosomes    =    chromosomes.get(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
283	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit-1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit-1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  populationLimit-1);	  this.chromosomes    =    chromosomes.get(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
284	[BUG]  [BUGGY]  ettyPrinter.println( "Population  error: "  +  populationLimit);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  ettyPrinter.println( "Population  error: "  +  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	ettyPrinter.println( "Population  error: "  +  populationLimit);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
285	[BUG]  [BUGGY]  MutableFormat.log( "Population  error: "  +  populationLimit);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  MutableFormat.log( "Population  error: "  +  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormat.log( "Population  error: "  +  populationLimit);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
286	[BUG]  [BUGGY]  this(LocalizedFormats.  <  Chromosome>,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.  <  Chromosome>,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.  <  Chromosome>,  final  int  populationLimit,  true);	  this(final    Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
287	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit,  false);	  this(DateTimeUtils.currentTimeMillis(),    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
288	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  1,  populationLimit));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  1,  populationLimit));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  1,  populationLimit));	  this(new    LinkedList    <    Chromosome>(chromosomes.size()),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
289	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList(populationLimit);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newLinkedList(populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newLinkedList(populationLimit);	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
290	[BUG]  [BUGGY]  chromosomes  =  Lists.newHashList();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newHashList();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newHashList();	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
291	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);	  chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
292	[BUG]  [BUGGY]  this(final  int  numberLimit,  Collections.  <  Chromosome>  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  Collections.  <  Chromosome>  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  Collections.  <  Chromosome>  chromosomes,  false);	  this(final    int    numberLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
293	[BUG]  [BUGGY]  public  ListPopulation(final  int  populateLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populateLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populateLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populateLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	61	None	replace
294	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(5);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(5);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(5);	  chromosomes    =    new    LinkedList    <    Chromosome>(4);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
295	[BUG]  [BUGGY]  MutableMap.this.add(chromosomes,  populationLimit,  false);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableMap.this.add(chromosomes,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.this.add(chromosomes,  populationLimit,  false);	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    true);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
296	[BUG]  [BUGGY]  MutableMap.this.add(chromosomes,  populationLimit);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  MutableMap.this.add(chromosomes,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.this.add(chromosomes,  populationLimit);	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    true);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
297	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit),  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit),  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(populationLimit,  populationLimit),  false);	  this(new    LinkedList    <    Chromosome>(populationLimit,    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
298	[BUG]  [BUGGY]  ettyPrinter.println( "Population  error: "  +  chromosomes.size());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  ettyPrinter.println( "Population  error: "  +  chromosomes.size());  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	ettyPrinter.println( "Population  error: "  +  chromosomes.size());	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
299	[BUG]  [BUGGY]  MutableMap.this.add(chromosomes.get(populationLimit));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableMap.this.add(chromosomes.get(populationLimit));  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.this.add(chromosomes.get(populationLimit));	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
300	[BUG]  [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  0,  populationLimit)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(null,  Lists.  <  Chromosome>  chromosomes,  0,  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(null,  Lists.  <  Chromosome>  chromosomes,  0,  populationLimit)  {	  this(null,    Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
301	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
302	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
303	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
304	[BUG]  [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(chromosomes,  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
305	[BUG]  [BUGGY]  chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  <identifier>  expected	9	None	replace
306	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit,  populationLimit);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newArrayListWithCapacity(populationLimit,  populationLimit);	  chromosomes    =    Lists.newArrayListWithCapacity(populationLimit);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
307	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  populationLimit  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  populationLimit  +  1;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =  chromosomes.size()  -  populationLimit  +  1;	  final    int    populationLimit    =    chromosomes.size()    -    populationLimit;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
308	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  }	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
309	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);  }	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
310	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
311	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER,  populationLimit,  false);	  this(Lists.    <    Chromosome>,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
312	[BUG]  [BUGGY]  this(Arrays.asList(chromosomes),  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(Arrays.asList(chromosomes),  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Arrays.asList(chromosomes),  populationLimit,  false);	  this(Lists.    <    Chromosome>,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
313	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList(numberLimit);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  Lists.newLinkedList(numberLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  Lists.newLinkedList(numberLimit);	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
314	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  true));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(populationLimit,  true));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(populationLimit,  true));	  this(new    LinkedList    <    Chromosome>(chromosomes,    populationLimit,    true));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
315	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes);	  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
316	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  populationLimit));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  populationLimit));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  populationLimit));	  this(new    LinkedList    <    Chromosome>(chromosomes.size()),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
317	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  populationLimit),  populationLimit));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  populationLimit),  populationLimit));  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes.size()  -  populationLimit),  populationLimit));	  this(new    LinkedList    <    Chromosome>(chromosomes.size()),    populationLimit));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
318	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  populationLimit)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  populationLimit)  {	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
319	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  populationLimit);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  populationLimit);	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
320	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationsLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationsLimit);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes,  populationsLimit);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
321	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
322	[BUG]  [BUGGY]  this(numberLimit,  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(numberLimit,  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(numberLimit,  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	  this(null,    Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
323	[BUG]  [BUGGY]  this(final  int  numberLimit,  final  ArrayList  <  Chromosome>  chromosomes,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  final  ArrayList  <  Chromosome>  chromosomes,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  final  ArrayList  <  Chromosome>  chromosomes,  false);	  this(final    int    numberLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
324	[BUG]  [BUGGY]  this(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  null,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  null,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  numberLimit,  final  List  <  Chromosome>  chromosomes,  null,  false);	  this(final    int    numberLimit,    final    List    <    Chromosome>    chromosomes,    false);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
325	[BUG]  [BUGGY]  MutableMap.sort(this.chromosomes);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableMap.sort(this.chromosomes);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableMap.sort(this.chromosomes);	  MutableMap.sort(chromosomes);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
326	[BUG]  [BUGGY]  this(numberLimit,  Lists.  <  Chromosome>,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(numberLimit,  Lists.  <  Chromosome>,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(numberLimit,  Lists.  <  Chromosome>,  true);	  this(Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
327	[BUG]  [BUGGY]  this(Arrays.asList(chromosomes),  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(Arrays.asList(chromosomes),  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Arrays.asList(chromosomes),  final  int  populationLimit,  true);	  this(Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
328	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  1);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  1);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
329	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
330	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
331	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
332	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
333	[BUG]  [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  0);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,  0);	  this(LocalizedFormats.NUMBER_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
334	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  numberLimit);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  numberLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  numberLimit);	  this.chromosomes    =    chromosomes.get(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
335	[BUG]  [BUGGY]  chromosomes  =  new  TreeMap  <  Chromosome>();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  chromosomes  =  new  TreeMap  <  Chromosome>();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes  =  new  TreeMap  <  Chromosome>();	  chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
336	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
337	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
338	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
339	[BUG]  [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);	  MutableFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
340	[BUG]  [BUGGY]  this(Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true);	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
341	[BUG]  [BUGGY]  public  ListPopulation(final  int  populateLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {  [CE]  variable  populateLimit  is  already  defined  in  constructor  ListPopulation  [FE]                AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populateLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populateLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populateLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populateLimit)    {    	non-compiled	[CE]  variable  populateLimit  is  already  defined  in  constructor  ListPopulation	61	None	replace
342	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes,  true);	  this(Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
343	[BUG]  [BUGGY]  this(Arrays.  <  Chromosome>  chromosomes,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(Arrays.  <  Chromosome>  chromosomes,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Arrays.  <  Chromosome>  chromosomes,  populationLimit,  true);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
344	[BUG]  [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  false,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this.chromosomes  =  chromosomes.get(populationLimit,  false,  0);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this.chromosomes  =  chromosomes.get(populationLimit,  false,  0);	  this.chromosomes    =    chromosomes.get(populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
345	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes!=  null)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes!=  null)  {  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  if(chromosomes    ==    null)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
346	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
347	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
348	[BUG]  [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(DateTimeUtils.currentTimeMillis(),  chromosomes,  populationLimit,  true);	  this(DateTimeUtils.currentTimeMillis(),    chromosomes,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
349	[BUG]  [BUGGY]  this(Collections.  <  Chromosome>  chromosomes,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  this(Collections.  <  Chromosome>  chromosomes,  populationLimit,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(Collections.  <  Chromosome>  chromosomes,  populationLimit,  true);	  this(Lists.    <    Chromosome>    chromosomes,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
350	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes,  final  int  numberLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  ArrayList  <  Chromosome>  chromosomes,  final  int  numberLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    numberLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	60	None	replace
351	[BUG]  [BUGGY]  this(final  double  chromosomes,  final  double  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  this(final  double  chromosomes,  final  double  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  double  chromosomes,  final  double  populationLimit,  false);	  this(final    int    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
352	[BUG]  [BUGGY]  this(final  int  populationLimit,  final  int  chromosomes,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  this(final  int  populationLimit,  final  int  chromosomes,  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  int  populationLimit,  final  int  chromosomes,  true);	  this(final    int    chromosomes,    final    int    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
353	[BUG]  [BUGGY]  nested  =  chromosomes.get(populationLimit,  populationLimit);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.get(populationLimit,  populationLimit);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.get(populationLimit,  populationLimit);	  nested    =    chromosomes.get(populationLimit);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
354	[BUG]  [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE),  false);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE),  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormats.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE),  false);	  if(chromosomes.size()    <    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
355	[BUG]  [BUGGY]  public  ListPopulation(final  int  number,  final  byte  chromosomes,  final  int  populationLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  number,  final  byte  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  number,  final  byte  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	62	None	replace
356	[BUG]  [BUGGY]  public  ListPopulation(final  int  number,  final  int  chromosomes,  final  int  populateLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  number,  final  int  chromosomes,  final  int  populateLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  number,  final  int  chromosomes,  final  int  populateLimit)  {	  public    ListPopulation(final    int    number,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	62	None	replace
357	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
358	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
359	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
360	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
361	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  <  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
362	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes  ==  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
363	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
364	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        [BUGGY]  if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(chromosomes!=  null)  {  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S	  if(populationLimit    <    =    0)    {    if(chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_S    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
365	[BUG]  [BUGGY]  if(!chromosomes.isEmpty())  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        [BUGGY]  if(!chromosomes.isEmpty())  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(!chromosomes.isEmpty())  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
366	[BUG]  [BUGGY]  final  int  populationLimit  =(chromosomes.size()  >  populationLimit)?  chromosomes.size()  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  final  int  populationLimit  =(chromosomes.size()  >  populationLimit)?  chromosomes.size()  :  1;  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	final  int  populationLimit  =(chromosomes.size()  >  populationLimit)?  chromosomes.size()  :  1;	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
367	[BUG]  [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  true);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  true);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,  chromosomes.size(),  true);	  this(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
368	[BUG]  [BUGGY]  this(final  Lists.  <  Chromosome>,  final  int  populationLimit,  true,  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(final  Lists.  <  Chromosome>,  final  int  populationLimit,  true,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Lists.  <  Chromosome>,  final  int  populationLimit,  true,  false);	  this(final    Lists.    <    Chromosome>,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
369	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  true);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        [BUGGY]  if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  true);  }  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	if(populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  true);  }	  if(populationLimit    <    =    0)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populateLimit,    false);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
370	[BUG]  [BUGGY]  this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        [BUGGY]  this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true,  false);	  this(final    Lists.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
371	[BUG]  [BUGGY]  public  ListPopulation(final  int  populitive,  final  List  <  Chromosome>  chromosomes,  final  int  populorLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populitive,  final  List  <  Chromosome>  chromosomes,  final  int  populorLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populitive,  final  List  <  Chromosome>  chromosomes,  final  int  populorLimit)  {	  public    ListPopulation(final    int    populationLimit,    final    List    <    Chromosome>    chromosomes,    final    int    populorLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	59	None	replace
372	[BUG]  [BUGGY]  nested  =  chromosomes.iterator().next();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.iterator().next();  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.iterator().next();	  nested    =    chromosomes.size();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
373	[BUG]  [BUGGY]  nested  =  chromosomes.get(0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        [BUGGY]  nested  =  chromosomes.get(0);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	nested  =  chromosomes.get(0);	  nested    =    chromosomes.size();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
374	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  false);	  this(new    LinkedList    <    Chromosome>(chromosomes),    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
375	[BUG]  [BUGGY]  this(final  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true,  false);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        [BUGGY]  this(final  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true,  false);  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Collections.  <  Chromosome>  chromosomes,  final  int  populationLimit,  true,  false);	  this(final    Collections.    <    Chromosome>    chromosomes,    final    int    populationLimit,    true);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
376	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  int  chromosomes,  final  int  populateLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  int  chromosomes,  final  int  populateLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  int  chromosomes,  final  int  populateLimit)  {	  public    ListPopulation(final    int    populate,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	93	None	replace
377	[BUG]  [BUGGY]  public  ListPopulation(final  int  populate,  final  byte  chromosomes,  final  int  populationLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populate,  final  byte  chromosomes,  final  int  populationLimit)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populate,  final  byte  chromosomes,  final  int  populationLimit)  {	  public    ListPopulation(final    int    populate,    final    int    chromosomes,    final    int    populationLimit)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	93	None	replace
378	[BUG]  [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);	  throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
379	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  byte[]  chromosomes)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]        [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  byte[]  chromosomes)  {  [BUGGY]      if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  byte[]  chromosomes)  {	  public    ListPopulation(final    int    populationLimit,    final    int    chromosomes)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	10	None	replace
380	[BUG]  [BUGGY]  chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]        [BUGGY]  chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	chromosomes.size()  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  chromosomes.size()    >    populationLimit)    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
381	[BUG]  [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        [BUGGY]  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [BUGGY]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());	  MutableFormat.log(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
