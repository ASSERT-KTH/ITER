bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  class  ListPopulation  [FE]    AssertionError  [CONTEXT]    [BUGGY]    final  int  populationLimit  =  chromosomes.size();  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    final  int  populationLimit  =  chromosomes.size();		non-compiled	[CE]  variable  populationLimit  is  already  defined  in  class  ListPopulation	24	None	add
2	[BUG]  [BUGGY]    int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  class  ListPopulation  [FE]      AssertionError  [CONTEXT]    [BUGGY]    int  populationLimit  =  chromosomes.size();  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    int  populationLimit  =  chromosomes.size();		non-compiled	[CE]  variable  populationLimit  is  already  defined  in  class  ListPopulation	24	None	add
3	[BUG]  [BUGGY]    chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]    [BUGGY]    chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    chromosomes  =  new  LinkedList  <  Chromosome>();		non-compiled	[CE]  <identifier>  expected	24	None	add
4	[BUG]  [BUGGY]    chromosomes  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]    [BUGGY]    chromosomes  =  Lists.newArrayList();  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    chromosomes  =  Lists.newArrayList();		non-compiled	[CE]  <identifier>  expected	24	None	add
5	[BUG]  [BUGGY]    final  int  populationLimit  =  chromosomes.size()  +  populationLimit;  [CE]  variable  populationLimit  is  already  defined  in  class  ListPopulation  [FE]            AssertionError  [CONTEXT]    [BUGGY]    final  int  populationLimit  =  chromosomes.size()  +  populationLimit;  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    final  int  populationLimit  =  chromosomes.size()  +  populationLimit;		non-compiled	[CE]  variable  populationLimit  is  already  defined  in  class  ListPopulation	24	None	add
6	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit));  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]    [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit));  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes,  populationLimit));	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  illegal  start  of  type	23	None	replace
7	[BUG]  [BUGGY]  this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]    [BUGGY]  this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  illegal  start  of  type	23	None	replace
8	[BUG]  [BUGGY]  this(final  List  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]    [BUGGY]  this(final  List  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  List  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  illegal  start  of  type	23	None	replace
9	[BUG]  [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit));  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]    [BUGGY]  this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit));  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(new  LinkedList  <  Chromosome>(chromosomes),  populationLimit));	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  illegal  start  of  type	23	None	replace
10	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation  [FE]    AssertionError  [CONTEXT]    [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes,  final  int  populationLimit)  {	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation	23	None	replace
11	[BUG]  [BUGGY]  public  ListPopulation(final  int  chromosomes,  final  int  populationLimit)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]      AssertionError  [CONTEXT]    [BUGGY]  public  ListPopulation(final  int  chromosomes,  final  int  populationLimit)  {  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  chromosomes,  final  int  populationLimit)  {	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	23	None	replace
12	[BUG]  [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes)  {  [CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError  [CONTEXT]    [BUGGY]  public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes)  {  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	public  ListPopulation(final  int  populationLimit,  final  List  <  Chromosome>  chromosomes)  {	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  no  suitable  constructor  found  for  ListPopulation(List<Chromosome>,int)	23	None	replace
13	[BUG]  [BUGGY]    this.chromosomes  =  chromosomes.get(populationLimit);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]    [BUGGY]    this.chromosomes  =  chromosomes.get(populationLimit);  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    this.chromosomes  =  chromosomes.get(populationLimit);		non-compiled	[CE]  illegal  start  of  type	24	None	add
14	[BUG]  [BUGGY]  this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]    [BUGGY]  this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);  [BUGGY]  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	this(final  Lists.  <  Chromosome>  chromosomes,  final  int  populationLimit,  false);	public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  	non-compiled	[CE]  illegal  start  of  type	23	None	replace
15	[BUG]  [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]    [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }		non-compiled	[CE]  illegal  start  of  type	24	None	add
16	[BUG]  [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]    [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  }		non-compiled	[CE]  illegal  start  of  type	24	None	add
17	[BUG]  [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]    [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  }		non-compiled	[CE]  illegal  start  of  type	24	None	add
18	[BUG]  [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]    [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populateLimit,  false);  }		non-compiled	[CE]  illegal  start  of  type	24	None	add
19	[BUG]  [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]    [BUGGY]    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]  public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.31622776601683794	64	64	1	replace	    if(chromosomes.size()  >  populationLimit)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.		non-compiled	[CE]  illegal  start  of  type	24	None	add
