bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  chromosomes.addAll(this,  false);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,boolean)  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this,  false);	  chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,boolean)	38	None	replace
2	[BUG]  [BUGGY]  chromosomes.addAll(this,  this);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,ListPopulation)  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  this);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this,  this);	  chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,ListPopulation)	38	None	replace
3	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  ')'  expected  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	          if(chromosomes.size()    >    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  ')'  expected	105	None	replace
4	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	          if(chromosomes.size()    >    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  <identifier>  expected	105	None	replace
5	[BUG]  [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	          if(chromosomes.size()    >    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  not  a  statement	105	None	replace
6	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populationLimit  =  chromosomeColl.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populationLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    -    1;    int  populationLimit  =  chromosomeColl.size()  -  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	71	None	add
7	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  Integer  populationLimit  =  chromosomeColl.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  Integer  populationLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    -    1;    Integer  populationLimit  =  chromosomeColl.size()  -  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	71	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  numberLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int    populationLimit    =    chromosomeColl.size()    -    1;    int  numberLimit  =  chromosomeColl.size()  -  1;	  	compilable	  [FE]  AssertionError  	71	1	add
9	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  numberLimit  =  chromosomeColl.size()  -  1;  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  numberLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    -    1;    int  numberLimit  =  chromosomeColl.size()  -  1;	  	compilable	  [FE]  AssertionError  	71	1	add
10	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populationLimit  =  chromosomeColl.size()  -  2;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populationLimit  =  chromosomeColl.size()  -  2;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    -    1;    int  populationLimit  =  chromosomeColl.size()  -  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	71	None	add
11	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populationLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populationLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    -    1;    int  populationLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	71	None	add
12	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	Integer  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    Integer    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	58	2	replace
13	[BUG]  [BUGGY]  Integer  chromosomeLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Integer  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    Integer    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	58	2	replace
14	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  true);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  true);	  this.chromosomes.add(chromosomeColl,    false);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean)	9	None	replace
15	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  0);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  0);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  false,  0);	  this.chromosomes.add(chromosomeColl,    false);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,int)	9	None	replace
16	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeColl.size());  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,int)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeColl.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  false,  chromosomeColl.size());	  this.chromosomes.add(chromosomeColl,    false);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,int)	9	None	replace
17	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeCount);  [CE]  cannot  find  symbol  chromosomeCount  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeCount);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  false,  chromosomeCount);	  this.chromosomes.add(chromosomeColl,    false);    	non-compiled	[CE]  cannot  find  symbol  chromosomeCount	9	None	replace
18	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	32	None	add
19	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	32	None	add
20	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  chromosomeColl  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	32	None	add
21	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  Integer  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  Integer  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    Integer  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	32	None	add
22	[BUG]  [BUGGY]  int  chromosomeColl  =  chromosomes.size();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeColl  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeColl  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomeColl    =    chromosomes.size();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	86	None	replace
23	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomeColl  =  chromosomes.size();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomeColl  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  chromosomeColl  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomeColl    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	86	None	replace
24	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  chromosomeColl  =  chromosomes.size();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  chromosomeColl  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  int  chromosomeColl  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomeColl    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	86	None	replace
25	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  populationLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	Integer  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    Integer    populationLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	30	2	replace
26	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  populationLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Integer  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    Integer    populationLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	30	2	replace
27	[BUG]  [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
28	[BUG]  [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
29	[BUG]  [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
30	[BUG]  [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomes.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
31	[BUG]  [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }  [CE]  method  addChromosomes  in  class  ListPopulation  cannot  be  applied  to  given  types;  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl,    f);    }    	non-compiled	[CE]  method  addChromosomes  in  class  ListPopulation  cannot  be  applied  to  given  types;	2	None	replace
32	[BUG]  [BUGGY]  int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }  [CE]  >  expected  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl,    f);    }    	non-compiled	[CE]  >  expected	2	None	replace
33	[BUG]  [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  false);  }  [CE]  method  addChromosomes  in  class  ListPopulation  cannot  be  applied  to  given  types;  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  false);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  false);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl,    f);    }    	non-compiled	[CE]  method  addChromosomes  in  class  ListPopulation  cannot  be  applied  to  given  types;	2	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        this.chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	27	1	add
35	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	27	1	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        this.chromosomes.clear();    this.chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	27	1	add
37	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    this.chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	27	1	add
38	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.remove();  this.chromosomes.clear();  [CE]  no  suitable  method  found  for  remove()  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.remove();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    chromosomes.remove();  this.chromosomes.clear();	  	non-compiled	[CE]  no  suitable  method  found  for  remove()	27	None	add
39	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        this.chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	27	1	add
41	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	27	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
43	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
45	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
47	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
49	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
51	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
52	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	79	2	replace
53	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	79	2	replace
54	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	79	2	replace
55	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	79	2	replace
56	[BUG]  [BUGGY]  if(chromosomeColl.size()  <  =  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  <  =  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  <  =  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	20	1	add
58	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();	  	compilable	  [FE]  AssertionError  	20	1	add
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	20	1	add
60	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	20	1	add
61	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	20	1	add
63	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	20	1	add
64	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	43	None	replace
65	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  double  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	double  populationLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populationLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	43	2	replace
66	[BUG]  [BUGGY]  double  populationLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  double  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	double  populationLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populationLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	43	2	replace
67	[BUG]  [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomes.size()    >    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
68	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(new  ArrayList  <  Chromosome>());	  chromosomes.addAll(new    LinkedList    <    Chromosome>());    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	110	2	replace
69	[BUG]  [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>());  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(new  ArrayList  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(new  ArrayList  <  Chromosome>());	  chromosomes.addAll(new    LinkedList    <    Chromosome>());    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	110	2	replace
70	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	116	None	add
71	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  Integer  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    Integer  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	116	None	add
72	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	116	None	add
73	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  this.chromosomes.addAll(chromosomeColl);  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  this.chromosomes.addAll(chromosomeColl);	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	116	None	add
74	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	75	2	replace
75	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	75	2	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  AssertionError  	75	1	replace
77	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  AssertionError  	75	1	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  else  {  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  else  {  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  AssertionError  	75	1	replace
79	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  else  {  this.chromosomes.addAll(chromosomeColl);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  else  {  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  else  {  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  AssertionError  	75	1	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(chromosomeColl);	  	compilable	  [FE]  AssertionError  	88	1	add
81	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(chromosomeColl);	  	compilable	  [FE]  AssertionError  	88	1	add
82	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  	non-compiled	[CE]  not  a  statement	88	None	add
83	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    java.lang.AssertionError:  new  AssertionException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  	non-compiled	[CE]  not  a  statement	88	None	add
84	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  	non-compiled	[CE]  not  a  statement	88	None	add
85	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    java.lang.AssertionError:  new  AssertionError(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  false);	  	non-compiled	[CE]  not  a  statement	88	None	add
86	[BUG]  [BUGGY]  chromosomeColl.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
87	[BUG]  [BUGGY]  chromosomeColl.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.size()  ==  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
88	[BUG]  [BUGGY]  chromosomeColl.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
89	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  no  suitable  constructor  found  for  NumberIsTooLargeException(LocalizedFormats)  [FE]                  java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  NumberIsTooLargeException(LocalizedFormats)	94	None	replace
90	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  chromosomeColl);  [CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,Collection<Chromosome>)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes,  false,  chromosomeColl);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,Collection<Chromosome>)	109	None	replace
91	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomes);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,List<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  chromosomes);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,List<Chromosome>)	109	None	replace
92	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,List<Chromosome>,int)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomes,  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,List<Chromosome>,int)	109	None	replace
93	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  populationLimit,  chromosomes);  [CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,int,List<Chromosome>)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  populationLimit,  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes,  false,  populationLimit,  chromosomes);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,int,List<Chromosome>)	109	None	replace
94	[BUG]  [BUGGY]  this.chromosomes.addAll(this,  chromosomeColl,  false);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>,boolean)  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(this,  chromosomeColl,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(this,  chromosomeColl,  false);	  this.chromosomes.addAll(this,    chromosomeColl);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>,boolean)	55	None	replace
95	[BUG]  [BUGGY]  this.chromosomes.addAll(this,  chromosomeColl,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(this,  chromosomeColl,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(this,  chromosomeColl,  populationLimit);	  this.chromosomes.addAll(this,    chromosomeColl);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>,int)	55	None	replace
96	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.removeAll(this.chromosomes);	  chromosomes.removeAll(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	89	2	replace
97	[BUG]  [BUGGY]  chromosomes.removeAll(this.chromosomes);  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(this.chromosomes);	  chromosomes.removeAll(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	89	2	replace
98	[BUG]  [BUGGY]  chromosomes.removeAll(this.chromosomeColl);  [CE]  cannot  find  symbol  chromosomeColl  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(this.chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(this.chromosomeColl);	  chromosomes.removeAll(chromosomeColl);    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	89	None	replace
99	[BUG]  [BUGGY]  boolean  chromosomeLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    int    chromosomeLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	57	None	replace
100	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  long  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	long  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    int    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	57	2	replace
101	[BUG]  [BUGGY]  long  chromosomeLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  long  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	long  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    int    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	57	2	replace
102	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]));  [CE]  no  suitable  method  found  for  addAll(Chromosome[])  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]));	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    -    1]));    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[])	120	None	replace
103	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  -  1]),  false);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  -  1]),  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  -  1]),  false);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    -    1]));    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean)	120	None	replace
104	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  false));  [CE]  no  suitable  method  found  for  toArray(Chromosome[],int,boolean)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  false));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  false));	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ],    populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Chromosome[],int,boolean)	17	None	replace
105	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  true));  [CE]  no  suitable  method  found  for  toArray(Chromosome[],int,boolean)  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  true));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  true));	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ],    populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Chromosome[],int,boolean)	17	None	replace
106	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  populationLimit));  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  populationLimit));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  populationLimit));	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ],    populationLimit));    	non-compiled	[CE]  ']'  expected	17	None	replace
107	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1,  populationLimit));  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1,  populationLimit));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1,  populationLimit));	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ],    populationLimit));    	non-compiled	[CE]  ']'  expected	17	None	replace
108	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size(),  populationLimit);  [CE]  no  suitable  method  found  for  addAll(int,int,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size(),  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size(),  populationLimit);	  this.chromosomes.addAll(chromosomeColl.size()    -    1,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int,int)	37	None	replace
109	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  chromosomeColl.size());  [CE]  no  suitable  method  found  for  addAll(int,int,int)  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  chromosomeColl.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  chromosomeColl.size());	  this.chromosomes.addAll(chromosomeColl.size()    -    1,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int,int)	37	None	replace
110	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size(),  false);  [CE]  no  suitable  method  found  for  addAll(int,int,boolean)  [FE]                        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size(),  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size(),  false);	  this.chromosomes.addAll(chromosomeColl.size()    -    1,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int,boolean)	37	None	replace
111	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  chromosomeLimit  =  chromosomes.size()  +  1;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  chromosomeLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    1;    int  chromosomeLimit  =  chromosomes.size()  +  1;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	63	None	add
112	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  Integer  chromosomeLimit  =  chromosomes.size()  +  1;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  Integer  chromosomeLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    1;    Integer  chromosomeLimit  =  chromosomes.size()  +  1;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	63	None	add
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int    chromosomeLimit    =    chromosomes.size()    +    1;    int  populationLimit  =  chromosomes.size()  +  1;	  	compilable	  [FE]  AssertionError  	63	1	add
114	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  populationLimit  =  chromosomes.size()  +  1;  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    1;    int  populationLimit  =  chromosomes.size()  +  1;	  	compilable	  [FE]  AssertionError  	63	1	add
115	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  chromosomeLimit  =  chromosomes.size()  +  1;  this.chromosomes.addAll(chromosomeColl);  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  chromosomeLimit  =  chromosomes.size()  +  1;  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    1;    int  chromosomeLimit  =  chromosomes.size()  +  1;  this.chromosomes.addAll(chromosomeColl);	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	63	None	add
116	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  chromosomeLimit  =  chromosomes.size()  +  2;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  int  chromosomeLimit  =  chromosomes.size()  +  2;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    1;    int  chromosomeLimit  =  chromosomes.size()  +  2;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	63	None	add
117	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populationLimit    =    chromosomeColl.size();    	non-compiled	[CE]  incompatible  types	29	None	replace
118	[BUG]  [BUGGY]  chromosomes.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomeColl.clear();    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	113	None	replace
119	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  this.chromosomes);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  this.chromosomes);	  chromosomeColl.addAll(this,    chromosomes);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	83	None	replace
120	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  Collections.singletonList(chromosomes));  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  Collections.singletonList(chromosomes));  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  Collections.singletonList(chromosomes));	  chromosomeColl.addAll(this,    chromosomes);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	83	None	replace
121	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  new  LinkedList  <  Chromosome>(chromosomes));  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  new  LinkedList  <  Chromosome>(chromosomes));  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  new  LinkedList  <  Chromosome>(chromosomes));	  chromosomeColl.addAll(this,    chromosomes);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
122	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  new  List  <  Chromosome>(chromosomes));  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  new  List  <  Chromosome>(chromosomes));  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  new  List  <  Chromosome>(chromosomes));	  chromosomeColl.addAll(this,    chromosomes);    	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	83	None	replace
123	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  true,  false);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean,boolean)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  true,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  true,  false);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    false);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean,boolean)	15	None	replace
124	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]),  false);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]),  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]),  false);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    false);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean)	15	None	replace
125	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  /  populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  /  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  /  populationLimit);	  this.chromosomes.addAll(chromosomeColl.size()    +    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	87	None	replace
126	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  +  populationLimit,  false);  [CE]  no  suitable  method  found  for  addAll(int,boolean)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  +  populationLimit,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  +  populationLimit,  false);	  this.chromosomes.addAll(chromosomeColl.size()    +    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,boolean)	87	None	replace
127	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  *  populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  *  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  *  populationLimit);	  this.chromosomes.addAll(chromosomeColl.size()    +    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	87	None	replace
128	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
129	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
130	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
131	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  Integer  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  Integer  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    Integer  chromosomesLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
132	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populate  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populate  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populate  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
133	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	23	2	replace
134	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	23	2	replace
135	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	23	2	replace
136	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	23	2	replace
137	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	23	None	replace
138	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	23	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
140	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    chromosomeColl.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
142	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  chromosomeColl.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    chromosomeColl.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
144	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
145	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    chromosomeColl.clear();  this.chromosomeColl.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	78	None	add
146	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  this.chromosomeColl.clear();  chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  this.chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    this.chromosomeColl.clear();  chromosomeColl.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	78	None	add
147	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeCollLimit  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeCollLimit  =  Collections.emptyList();	          chromosomeColl.clear();    int    chromosomeCollLimit    =    Collections.emptyList();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	97	None	replace
148	[BUG]  [BUGGY]  null  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	null  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();	          chromosomeColl.clear();    int    chromosomeCollLimit    =    Collections.emptyList();    	non-compiled	[CE]  not  a  statement	97	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	74	1	add
150	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();  chromosomeColl.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	74	1	add
151	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
152	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
153	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newLinkedList();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newLinkedList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    Collection  <  Chromosome>  chromosomeColl  =  Collections.newLinkedList();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
154	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit,  false);  [CE]  <identifier>  expected  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  chromosomes.size()  -  populationLimit,  false);	  int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
155	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =  chromosomes.size()  -  populationLimit  +  1;	  int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	107	2	replace
156	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit  +  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  chromosomes.size()  -  populationLimit  +  1;	  int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	107	2	replace
157	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  /  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =  chromosomes.size()  /  populationLimit;	  int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	107	2	replace
158	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  /  populationLimit;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  /  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  chromosomes.size()  /  populationLimit;	  int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	107	2	replace
159	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populationLimit  =  chromosomeColl.size()  +  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populationLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    +    1;    int  populationLimit  =  chromosomeColl.size()  +  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	69	None	add
160	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  Integer  populationLimit  =  chromosomeColl.size()  +  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  Integer  populationLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    +    1;    Integer  populationLimit  =  chromosomeColl.size()  +  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	69	None	add
161	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populationLimit  =  chromosomeColl.size()  +  2;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populationLimit  =  chromosomeColl.size()  +  2;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    +    1;    int  populationLimit  =  chromosomeColl.size()  +  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	69	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int    populationLimit    =    chromosomeColl.size()    +    1;    int  numberLimit  =  chromosomeColl.size()  +  1;	  	compilable	  [FE]  AssertionError  	69	1	add
163	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size()  +  1;  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    +    1;    int  numberLimit  =  chromosomeColl.size()  +  1;	  	compilable	  [FE]  AssertionError  	69	1	add
164	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  false);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,boolean)  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  populationLimit,  false);	  this.chromosomes.add(chromosomeColl,    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,boolean)	8	None	replace
165	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  true);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,boolean)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  populationLimit,  true);	  this.chromosomes.add(chromosomeColl,    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,boolean)	8	None	replace
166	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  0);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  0);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  populationLimit,  0);	  this.chromosomes.add(chromosomeColl,    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,int)	8	None	replace
167	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	65	None	add
168	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  Integer  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  Integer  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    Integer  chromosomeLimit  =  chromosomes.size()  +  populationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	65	None	add
169	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	65	None	add
170	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit,  false);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  +  populationLimit,  false);	  	non-compiled	[CE]  <identifier>  expected	65	None	add
171	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  populationLimit  =  chromosomes.size()  +  populationLimit;  [CE]  variable  populationLimit  might  not  have  been  initialized  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  populationLimit  =  chromosomes.size()  +  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    int  populationLimit  =  chromosomes.size()  +  populationLimit;	  	non-compiled	[CE]  variable  populationLimit  might  not  have  been  initialized	65	None	add
172	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    populateLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	123	None	add
173	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    populateLimit    =    chromosomes.size();    Integer  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	123	None	add
174	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  this.chromosomes.addAll(chromosomeColl);  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    populateLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  this.chromosomes.addAll(chromosomeColl);	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	123	None	add
175	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  this.chromosomes.removeAll(chromosomeColl);  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  this.chromosomes.removeAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    populateLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  this.chromosomes.removeAll(chromosomeColl);	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	123	None	add
176	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
177	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
178	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
179	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
180	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	28	None	replace
181	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	28	None	replace
182	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomeColl);  [CE]  cannot  find  symbol  chromosomeColl  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomeColl);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	40	None	replace
183	[BUG]  [BUGGY]  chromosomes.add(this.chromosomeColl);  [CE]  cannot  find  symbol  chromosomeColl  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.add(this.chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.add(this.chromosomeColl);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	40	None	replace
184	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomesColl);  [CE]  cannot  find  symbol  chromosomesColl  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomesColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomesColl);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  cannot  find  symbol  chromosomesColl	40	None	replace
185	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	Integer  populationLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    Integer    populationLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	46	2	replace
186	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Integer  populationLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    Integer    populationLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	46	2	replace
187	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeSize);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	91	None	replace
188	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeColl);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,Collection<Chromosome>)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  chromosomeColl);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeSize);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,Collection<Chromosome>)	91	None	replace
189	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeSize);  [CE]  cannot  find  symbol  chromosomeSize  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeSize);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  chromosomeSize);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeSize);    	non-compiled	[CE]  cannot  find  symbol  chromosomeSize	91	None	replace
190	[BUG]  [BUGGY]  this.chromosomes.addAll(ChromosomeColl.EMPTY);  [CE]  cannot  find  symbol  ChromosomeColl  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(ChromosomeColl.EMPTY);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(ChromosomeColl.EMPTY);	  this.chromosomes.addAll(Chromosome.EMPTY);    	non-compiled	[CE]  cannot  find  symbol  ChromosomeColl	115	None	replace
191	[BUG]  [BUGGY]  this.chromosomes.addAll(Chromosome.EMPTY_LIST);  [CE]  cannot  find  symbol  EMPTY_LIST  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(Chromosome.EMPTY_LIST);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(Chromosome.EMPTY_LIST);	  this.chromosomes.addAll(Chromosome.EMPTY);    	non-compiled	[CE]  cannot  find  symbol  EMPTY_LIST	115	None	replace
192	[BUG]  [BUGGY]  this.chromosomes.addAll(LocalizedFormats.EMPTY);  [CE]  cannot  find  symbol  EMPTY  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(LocalizedFormats.EMPTY);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(LocalizedFormats.EMPTY);	  this.chromosomes.addAll(Chromosome.EMPTY);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	115	None	replace
193	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  1,  populationLimit);	  this.chromosomes.addAll(chromosomeColl.size()    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	36	None	replace
194	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit  -  1);  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit  -  1);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size(),  populationLimit  -  1);	  this.chromosomes.addAll(chromosomeColl.size()    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	36	None	replace
195	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  true);  [CE]  no  suitable  method  found  for  addAll(int,boolean)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  true);	  this.chromosomes.addAll(chromosomeColl.size()    -    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,boolean)	35	None	replace
196	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  populateLimit);  [CE]  cannot  find  symbol  populateLimit  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  populateLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  populateLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeLimit);    	non-compiled	[CE]  cannot  find  symbol  populateLimit	90	None	replace
197	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  null);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  null);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  null);	  chromosomeColl.addAll(this,    this);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	81	None	replace
198	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  Collections.  <  E>emptyList());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  Collections.  <  E>emptyList());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  Collections.  <  E>emptyList());	  chromosomeColl.addAll(this,    this);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
200	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
202	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
204	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
205	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.add(this.chromosomes);  [CE]  no  suitable  method  found  for  add(List<Chromosome>)  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.add(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes.add(this.chromosomes);	  	non-compiled	[CE]  no  suitable  method  found  for  add(List<Chromosome>)	39	None	add
206	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(this.chromosomes);    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	39	1	add
207	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.clear();  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	39	1	add
208	[BUG]  [BUGGY]  Integer  chromosomeColl  =  chromosomes.size();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  chromosomeColl  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Integer  chromosomeColl  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    Integer    chromosomeColl    =    chromosomes.size();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	60	None	replace
209	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size();  Integer  chromosomeColl  =  chromosomes.get(chromosomeColl);  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size();  Integer  chromosomeColl  =  chromosomes.get(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  chromosomes.size();  Integer  chromosomeColl  =  chromosomes.get(chromosomeColl);	          int    chromosomeLimit    =    chromosomes.size();    Integer    chromosomeColl    =    chromosomes.size();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	60	None	replace
210	[BUG]  [BUGGY]  chromosomes.clear();  this.chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  this.chromosomeColl.clear();	          chromosomeColl.clear();    this.chromosomeColl.clear();    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	76	None	replace
211	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(this.chromosomes);	  this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	19	2	replace
212	[BUG]  [BUGGY]  this.chromosomes.addAll(this.chromosomes);  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(this.chromosomes);	  this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	19	2	replace
213	[BUG]  [BUGGY]  chromosomeColl.add(this,  this);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.add(this,  this);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.add(this,  this);	  chromosomeColl.add(this);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	108	None	replace
214	[BUG]  [BUGGY]  chromosomeColl.add(this,  false);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.add(this,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.add(this,  false);	  chromosomeColl.add(this);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	108	None	replace
215	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes.size(),  false,  chromosomeColl.size());  [CE]  no  suitable  method  found  for  addAll(int,boolean,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes.size(),  false,  chromosomeColl.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes.size(),  false,  chromosomeColl.size());	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,boolean,int)	7	None	replace
216	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes.size(),  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int,int)  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes.size(),  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomes.size(),  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int,int)	7	None	replace
217	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomes.size());  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomes.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  chromosomes.size());	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	7	None	replace
218	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  chromosomeColl.size(),  populationLimit);  [CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,int,int)  [FE]                          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  chromosomeColl.size(),  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes,  false,  chromosomeColl.size(),  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,int,int)	7	None	replace
219	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  final  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	final  int  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    boolean    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	114	2	replace
220	[BUG]  [BUGGY]  final  int  chromosomeLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  final  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	final  int  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    boolean    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	114	2	replace
221	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  true);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  true);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  true);	  chromosomeColl.addAll(this,    false);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	82	None	replace
222	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  false,  this.chromosomes);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  false,  this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  false,  this.chromosomes);	  chromosomeColl.addAll(this,    false);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	82	None	replace
223	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  false,  chromosomes);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  false,  chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  false,  chromosomes);	  chromosomeColl.addAll(this,    false);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	82	None	replace
224	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  false,  chromosomeColl);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  false,  chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  false,  chromosomeColl);	  chromosomeColl.addAll(this,    false);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	82	None	replace
225	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  3  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl.size());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl.size());	  chromosomes.remove(chromosomeColl);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  3  	42	2	replace
226	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl.size());  [FE]  java.lang.IndexOutOfBoundsException:  Index:  3  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl.size());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl.size());	  chromosomes.remove(chromosomeColl);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  3  	42	2	replace
227	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
228	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  Integer  populationLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    this.chromosomes.size();    Integer  populationLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
229	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.AssertionError:  false;  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.AssertionError:  false;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    this.chromosomes.size();    java.lang.AssertionError:  false;	  	non-compiled	[CE]  not  a  statement	51	None	add
230	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size()  -  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	51	None	add
231	[BUG]  [BUGGY]  chromosomeLimit  =  chromosomes.size();  [CE]  cannot  find  symbol  chromosomeLimit  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeLimit  =  chromosomes.size();	  int    chromosomeLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  cannot  find  symbol  chromosomeLimit	64	None	replace
232	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	26	2	replace
233	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	26	2	replace
234	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	26	2	replace
235	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	26	2	replace
236	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [CE]  cannot  find  symbol  EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  cannot  find  symbol  EMPTY_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE	26	None	replace
237	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  }  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  }	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	77	None	replace
238	[BUG]  [BUGGY]  null.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [CE]  <null>  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	null.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	77	None	replace
239	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  }  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  }	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    Collections.emptyList();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	77	None	replace
240	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	25	None	add
241	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	25	None	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	25	1	add
243	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	25	1	add
244	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  List  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  List  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    List  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	25	None	add
245	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	25	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  AssertionError  	111	1	add
247	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  AssertionError  	111	1	add
248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
249	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
250	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
251	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
252	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  this.chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();  this.chromosomeColl.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	111	None	add
253	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomeColl.clear();  chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    this.chromosomeColl.clear();  chromosomeColl.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	111	None	add
254	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl);    }    	compilable	  [FE]  StackOverflowError  	1	2	replace
255	[BUG]  [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }  [FE]  StackOverflowError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl);    }    	compilable	  [FE]  StackOverflowError  	1	2	replace
256	[BUG]  [BUGGY]  int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }  [CE]  >  expected  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl);    }    	non-compiled	[CE]  >  expected	1	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(chromosomes);    this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  AssertionError  	18	1	add
258	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  AssertionError  	18	1	add
259	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	18	1	add
260	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	18	1	add
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  int  populationLimit  =  chromosomes.size();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(chromosomes);    int  populationLimit  =  chromosomes.size();	  	compilable	  [FE]  AssertionError  	18	1	add
262	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  int  populationLimit  =  chromosomes.size();  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  int  populationLimit  =  chromosomes.size();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    int  populationLimit  =  chromosomes.size();	  	compilable	  [FE]  AssertionError  	18	1	add
263	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.clear();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(chromosomes);    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	18	1	add
264	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.clear();  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.clear();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	18	1	add
265	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  int  populationLimit  =  chromosomeColl.size();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(chromosomes);    int  populationLimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	18	1	add
266	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  int  populationLimit  =  chromosomeColl.size();  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  int  populationLimit  =  chromosomeColl.size();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    int  populationLimit  =  chromosomeColl.size();	  	compilable	  [FE]  AssertionError  	18	1	add
267	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  populateLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  populateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  populateLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	124	None	replace
268	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size()  +  1;	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	124	2	replace
269	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size()  +  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size()  +  1;	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	124	2	replace
270	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  long  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	long  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	124	2	replace
271	[BUG]  [BUGGY]  long  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  long  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	long  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	124	2	replace
272	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	21	2	replace
273	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	21	2	replace
274	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	21	2	replace
275	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	21	2	replace
276	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(this.chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	21	2	replace
277	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(this.chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(this.chromosomes!=  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	21	2	replace
278	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	21	2	replace
279	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	21	2	replace
280	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =  this.chromosomes.size()  +  1;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	62	2	replace
281	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  +  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  this.chromosomes.size()  +  1;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	62	2	replace
282	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =  this.chromosomes.size()  -  1;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	62	2	replace
283	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  -  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  this.chromosomes.size()  -  1;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	62	2	replace
284	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  +  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =  this.chromosomes.size()  +  populationLimit;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	62	2	replace
285	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  +  populationLimit;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  +  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  this.chromosomes.size()  +  populationLimit;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	62	2	replace
286	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  false);  [CE]  no  suitable  method  found  for  addAll(int,int,boolean)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  false);	  this.chromosomes.addAll(chromosomeColl.size(),    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int,boolean)	34	None	replace
287	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  true);  [CE]  no  suitable  method  found  for  addAll(int,int,boolean)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size(),  populationLimit,  true);	  this.chromosomes.addAll(chromosomeColl.size(),    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int,boolean)	34	None	replace
288	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  0,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(int,int,int)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  0,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size(),  0,  populationLimit);	  this.chromosomes.addAll(chromosomeColl.size(),    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int,int)	34	None	replace
289	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populations,  populationLimit);  [CE]  cannot  find  symbol  populations  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  populations,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size(),  populations,  populationLimit);	  this.chromosomes.addAll(chromosomeColl.size(),    populationLimit);    	non-compiled	[CE]  cannot  find  symbol  populations	34	None	replace
290	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size(),  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size(),  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size(),  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int,int)	5	None	replace
291	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeColl.size());  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeColl.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  chromosomeColl.size());	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	5	None	replace
292	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  -  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  -  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  -  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	5	None	replace
293	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  +  1);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  +  1);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  +  1);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	5	None	replace
294	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	33	2	replace
295	[BUG]  [BUGGY]  int  numberLimit  =  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	33	2	replace
296	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  numberLimit  =  chromosomeColl.size();  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	non-compiled	[CE]  incompatible  types	33	None	replace
297	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size()  +  1;	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	33	2	replace
298	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size()  +  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size()  +  1;	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	33	2	replace
299	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.size());  [CE]  no  suitable  method  found  for  addAll(int,boolean,int)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.size());	  this.chromosomes.addAll(chromosomeColl.size()    -    populationLimit,    false);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,boolean,int)	121	None	replace
300	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.intValue());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.intValue());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.intValue());	  this.chromosomes.addAll(chromosomeColl.size()    -    populationLimit,    false);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
301	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.type);  [CE]  cannot  find  symbol  type  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.type);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl.type);	  this.chromosomes.addAll(chromosomeColl.size()    -    populationLimit,    false);    	non-compiled	[CE]  cannot  find  symbol  type	121	None	replace
302	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  false);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],int,boolean)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  false);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],int,boolean)	16	None	replace
303	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  true);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],int,boolean)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  true);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],int,boolean)	16	None	replace
304	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  false);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit,  false);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    populationLimit);    	non-compiled	[CE]  ')'  expected	16	None	replace
305	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl));    	compilable	  [FE]  AssertionError  	84	1	replace
306	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl));    	compilable	  [FE]  AssertionError  	84	1	replace
307	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl,  populationLimit));  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl,  populationLimit));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl,  populationLimit));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
308	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl,  false));  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl,  false));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl,  false));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
309	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl),  false);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl),  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl),  false);	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
310	[BUG]  [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	100	None	replace
311	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	100	None	replace
312	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  chromosomeLimit  =  chromosomes.size()  -  1;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  chromosomeLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    1;    int  chromosomeLimit  =  chromosomes.size()  -  1;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	67	None	add
313	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  Integer  chromosomeLimit  =  chromosomes.size()  -  1;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  Integer  chromosomeLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    1;    Integer  chromosomeLimit  =  chromosomes.size()  -  1;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	67	None	add
314	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int    chromosomeLimit    =    chromosomes.size()    -    1;    int  populationLimit  =  chromosomes.size()  -  1;	  	compilable	  [FE]  AssertionError  	67	1	add
315	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size()  -  1;  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    1;    int  populationLimit  =  chromosomes.size()  -  1;	  	compilable	  [FE]  AssertionError  	67	1	add
316	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  chromosomeLimit  =  chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    1;    int  chromosomeLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	67	None	add
317	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeCount);  [CE]  cannot  find  symbol  chromosomeCount  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeCount);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  chromosomeCount);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeCount);    	non-compiled	[CE]  cannot  find  symbol  chromosomeCount	6	None	replace
318	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  true);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,boolean)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  true);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeCount);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,boolean)	6	None	replace
319	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	replace
320	[BUG]  [BUGGY]  null.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  [CE]  <null>  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	null.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	96	None	replace
321	[BUG]  [BUGGY]  int  populationLimit  =  chromosomecoll.size();  [CE]  cannot  find  symbol  chromosomecoll  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomecoll.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomecoll.size();	  int    populationLimit    =    chromosomeColl.size()    +    1;    	non-compiled	[CE]  cannot  find  symbol  chromosomecoll	70	None	replace
322	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  chromosomes);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],int,List<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  chromosomes);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],int,List<Chromosome>)	119	None	replace
323	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  chromosomes);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],List<Chromosome>)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  chromosomes);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],List<Chromosome>)	119	None	replace
324	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  chromosomes);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],int,List<Chromosome>)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit,  chromosomes);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],int,List<Chromosome>)	119	None	replace
325	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  dataArea,  chromosomes);  [CE]  cannot  find  symbol  dataArea  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  dataArea,  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  dataArea,  chromosomes);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    chromosomes);    	non-compiled	[CE]  cannot  find  symbol  dataArea	119	None	replace
326	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  null,  populationLimit);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,<null>,int)  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  null,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  null,  populationLimit);	  this.chromosomes.add(chromosomeColl,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,<null>,int)	122	None	replace
327	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  null,  false);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,<null>,boolean)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  null,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  null,  false);	  this.chromosomes.add(chromosomeColl,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,<null>,boolean)	122	None	replace
328	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  null,  0);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,<null>,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  null,  0);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  null,  0);	  this.chromosomes.add(chromosomeColl,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,<null>,int)	122	None	replace
329	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  null);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,<null>)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  populationLimit,  null);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  populationLimit,  null);	  this.chromosomes.add(chromosomeColl,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,<null>)	122	None	replace
330	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    +    1;    int  populationLimit  =  chromosomes.size()  +  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	49	None	add
331	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  Integer  populationLimit  =  chromosomes.size()  +  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  Integer  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    +    1;    Integer  populationLimit  =  chromosomes.size()  +  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	49	None	add
332	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  populationLimit  =  chromosomes.size()  +  2;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  populationLimit  =  chromosomes.size()  +  2;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    +    1;    int  populationLimit  =  chromosomes.size()  +  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	49	None	add
333	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int    populationLimit    =    chromosomes.size()    +    1;    int  numberLimit  =  chromosomes.size()  +  1;	  	compilable	  [FE]  AssertionError  	49	1	add
334	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size()  +  1;  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    +    1;    int  numberLimit  =  chromosomes.size()  +  1;	  	compilable	  [FE]  AssertionError  	49	1	add
335	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	48	2	replace
336	[BUG]  [BUGGY]  int  numberLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	48	2	replace
337	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  numberLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	48	None	replace
338	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	61	None	add
339	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  Integer  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  Integer  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    Integer  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	61	None	add
340	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  this.chromosomeLimit  =  this.chromosomes.size();  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  this.chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    int  this.chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  not  a  statement	61	None	add
341	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int    chromosomeLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	compilable	  [FE]  AssertionError  	61	1	add
342	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    int  populationLimit  =  this.chromosomes.size();	  	compilable	  [FE]  AssertionError  	61	1	add
343	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.AssertionError:  false;  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.AssertionError:  false;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    java.lang.AssertionError:  false;	  	non-compiled	[CE]  not  a  statement	61	None	add
344	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	Integer  chromosomeLimit  =  this.chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	59	2	replace
345	[BUG]  [BUGGY]  Integer  chromosomeLimit  =  this.chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Integer  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Integer  chromosomeLimit  =  this.chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	59	2	replace
346	[BUG]  [BUGGY]  chromosomeLimit  =  this.chromosomes.size();  [CE]  cannot  find  symbol  chromosomeLimit  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeLimit  =  this.chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    int    chromosomeLimit    =    this.chromosomes.size();    	non-compiled	[CE]  cannot  find  symbol  chromosomeLimit	59	None	replace
347	[BUG]  [BUGGY]  int  chromosomeColl  =  chromosomeColl.size();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeColl  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeColl  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	31	None	replace
348	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  chromosomeColl  =  chromosomeColl.size();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  chromosomeColl  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  chromosomeColl  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	non-compiled	[CE]  incompatible  types	31	None	replace
349	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeCollLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	31	2	replace
350	[BUG]  [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeCollLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeCollLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	31	2	replace
351	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  *  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =  chromosomes.size()  *  populationLimit;	  int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	66	2	replace
352	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  *  populationLimit;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  *  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  chromosomes.size()  *  populationLimit;	  int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	66	2	replace
353	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit,  false);  [CE]  <identifier>  expected  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  chromosomes.size()  +  populationLimit,  false);	  int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
354	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(new  ArrayList  <  Chromosome>());	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>());    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	85	2	replace
355	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>());  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>());	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>());    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	85	2	replace
356	[BUG]  [BUGGY]  this.chromosomes.addAll(new  TreeSet  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  TreeSet  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  TreeSet  <  Chromosome>());	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
357	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(),  chromosomeColl);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(),  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(),  chromosomeColl);	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
359	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.addAll(this.chromosomes);  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
360	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
361	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.removeAll(this.chromosomes);  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.removeAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
363	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
364	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
365	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  AssertionError  	11	1	add
366	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	11	1	add
367	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.clear();  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	11	1	add
368	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  chromosomeColl.size());  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  chromosomeColl.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  0,  chromosomeColl.size());	  this.chromosomes.add(chromosomeColl,    0);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,int)	10	None	replace
369	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  chromosomeColl.length);  [CE]  cannot  find  symbol  length  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  chromosomeColl.length);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  0,  chromosomeColl.length);	  this.chromosomes.add(chromosomeColl,    0);    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
370	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  populationLimit);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  0,  populationLimit);	  this.chromosomes.add(chromosomeColl,    0);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int,int)	10	None	replace
371	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  chromosomeLimit);  [CE]  cannot  find  symbol  chromosomeLimit  [FE]                      AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  0,  chromosomeLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  0,  chromosomeLimit);	  this.chromosomes.add(chromosomeColl,    0);    	non-compiled	[CE]  cannot  find  symbol  chromosomeLimit	10	None	replace
372	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
373	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	41	1	add
374	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	41	1	add
375	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);  this.chromosomes.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	41	1	add
376	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.remove(chromosomeColl);  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);  this.chromosomes.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	41	1	add
377	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	41	2	add
378	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	41	2	add
379	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(0);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomes.remove(0);	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	41	2	add
380	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(0);  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(0);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomes.remove(0);	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	41	2	add
381	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	41	1	add
382	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.clear();  [FE]  AssertionError  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomes.remove(chromosomeColl);  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomes.remove(chromosomeColl);  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	41	1	add
383	[BUG]  [BUGGY]  chromosomeColl.add(this.chromosomes);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.add(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.add(this.chromosomes);	  chromosomeColl.addAll(this.chromosomes);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	12	None	replace
384	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.removeAll(this.chromosomes);	  chromosomeColl.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	12	2	replace
385	[BUG]  [BUGGY]  chromosomeColl.removeAll(this.chromosomes);  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.removeAll(this.chromosomes);	  chromosomeColl.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	12	2	replace
386	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes,  false);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes,  false);	  chromosomeColl.addAll(this.chromosomes);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	12	None	replace
387	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl.size()));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl.size()));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl.size()));    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	118	2	replace
388	[BUG]  [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl.size()));  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl.size()));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  ArrayList  <  Chromosome>(chromosomeColl.size()));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl.size()));    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	118	2	replace
389	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size()  -  1));  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size()  -  1));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size()  -  1));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl.size()));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
390	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size(),  populationLimit));  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size(),  populationLimit));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size(),  populationLimit));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl.size()));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
391	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size()  +  1));  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size()  +  1));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl.size()  +  1));	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl.size()));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
392	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  false,  true);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean,boolean)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  false,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  false,  true);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    true);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean,boolean)	98	None	replace
393	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]),  true);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]),  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  +  1]),  true);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    true);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean)	98	None	replace
394	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	112	2	replace
395	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	112	2	replace
396	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	112	2	replace
397	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	112	2	replace
398	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	non-compiled	[CE]  ')'  expected	112	None	replace
399	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSO	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	non-compiled	[CE]  ')'  expected	112	None	replace
400	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  -  1;  [CE]  cannot  find  symbol  chromosomeColl  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  this.chromosomeColl.size()  -  1;	  int    populationLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	73	None	replace
401	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  +  1;  [CE]  cannot  find  symbol  chromosomeColl  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  this.chromosomeColl.size()  +  1;	  int    populationLimit    =    this.chromosomeColl.size();    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	73	None	replace
402	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	13	1	add
403	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	13	1	add
404	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(0);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(0);	  	compilable	  [FE]  AssertionError  	13	1	add
405	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(0);  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(0);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(0);	  	compilable	  [FE]  AssertionError  	13	1	add
406	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	13	2	add
407	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	13	2	add
408	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	13	1	add
409	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomes.clear();  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);  this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	13	1	add
410	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove();  [CE]  method  remove  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove();	  	non-compiled	[CE]  method  remove  in  interface  Collection<E>  cannot  be  applied  to  given  types;	13	None	add
411	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  new  ArrayList  <  Chromosome>());  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  new  ArrayList  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  new  ArrayList  <  Chromosome>());	  chromosomeColl.addAll(this,    new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	103	None	replace
412	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  }  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  }	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    Collections.newHashSet();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	80	None	replace
413	[BUG]  [BUGGY]  null.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  [CE]  <null>  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	null.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    Collections.newHashSet();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	80	None	replace
414	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    Collections.newHashSet();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	80	None	replace
415	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	45	2	replace
416	[BUG]  [BUGGY]  int  chromosomesLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	45	2	replace
417	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomesLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  boolean  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  boolean  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	45	None	replace
418	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  false);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,boolean)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  false);	  this.chromosomes.addAll(chromosomeColl,    true);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,boolean)	4	None	replace
419	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  0);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  0);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  0);	  this.chromosomes.addAll(chromosomeColl,    true);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	4	None	replace
420	[BUG]  [BUGGY]  chromosomeColl.remove(this.chromosomeColl);  [CE]  cannot  find  symbol  chromosomeColl  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(this.chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(this.chromosomeColl);	  chromosomeColl.remove(chromosomeColl);    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	14	None	replace
421	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  this.chromosomes.size()  -  1;	  int    populationLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	52	2	replace
422	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;	  int    populationLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	52	2	replace
423	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  this.chromosomes.size()  +  1;	  int    populationLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	52	2	replace
424	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  +  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  this.chromosomes.size()  +  1;	  int    populationLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	52	2	replace
425	[BUG]  [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  [CE]  incompatible  types  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  this.chromosomes.size();	  int    populationLimit    =    this.chromosomes.size();    	non-compiled	[CE]  incompatible  types	52	None	replace
426	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	47	None	add
427	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	47	None	add
428	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	47	None	add
429	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  Integer  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  Integer  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    Integer  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	47	None	add
430	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
431	[BUG]  [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	Collection  <  Chromosome>  chromosomes  =  Collections.newHashSet();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
432	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    -    1;    int  populationLimit  =  chromosomes.size()  -  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	53	None	add
433	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  Integer  populationLimit  =  chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  Integer  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    -    1;    Integer  populationLimit  =  chromosomes.size()  -  1;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	53	None	add
434	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size()  -  2;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size()  -  2;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    -    1;    int  populationLimit  =  chromosomes.size()  -  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	53	None	add
435	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  numberLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int    populationLimit    =    chromosomes.size()    -    1;    int  numberLimit  =  chromosomes.size()  -  1;	  	compilable	  [FE]  AssertionError  	53	1	add
436	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  numberLimit  =  chromosomes.size()  -  1;  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  numberLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    -    1;    int  numberLimit  =  chromosomes.size()  -  1;	  	compilable	  [FE]  AssertionError  	53	1	add
437	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    -    1;    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	53	None	add
438	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	101	1	add
439	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	101	1	add
440	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	101	None	add
441	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	101	None	add
442	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	101	None	add
443	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	101	None	add
444	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  new  LinkedList  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  new  LinkedList  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  new  LinkedList  <  Chromosome>());	  this.chromosomes.addAll(chromosomeColl,    this);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
445	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  new  List  <  Chromosome>());  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  new  List  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  new  List  <  Chromosome>());	  this.chromosomes.addAll(chromosomeColl,    this);    	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	56	None	replace
446	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  Collections.  <  Chromosome>emptyList());  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,List<Chromosome>)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  Collections.  <  Chromosome>emptyList());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  Collections.  <  Chromosome>emptyList());	  this.chromosomes.addAll(chromosomeColl,    this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,List<Chromosome>)	56	None	replace
447	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  null);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,<null>)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  null);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  null);	  this.chromosomes.addAll(chromosomeColl,    this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,<null>)	56	None	replace
448	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  populimit  =  chromosomeColl.size();  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  boolean  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomeColl.size();  boolean  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  incompatible  types	117	None	replace
449	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  +  1;	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	117	2	replace
450	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  +  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  +  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  +  1;	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	117	2	replace
451	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	102	2	replace
452	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	102	2	replace
453	[BUG]  [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	null  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  not  a  statement	102	None	replace
454	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	106	None	add
455	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  Integer  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  Integer  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    Integer  chromosomeLimit  =  chromosomes.size()  -  populationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	106	None	add
456	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  populationLimit  =  chromosomes.size()  -  populationLimit;  [CE]  variable  populationLimit  might  not  have  been  initialized  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  populationLimit  =  chromosomes.size()  -  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    int  populationLimit  =  chromosomes.size()  -  populationLimit;	  	non-compiled	[CE]  variable  populationLimit  might  not  have  been  initialized	106	None	add
457	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit,  false);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  -  populationLimit,  false);	  	non-compiled	[CE]  <identifier>  expected	106	None	add
458	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	106	None	add
459	[BUG]  [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }  [CE]  no  suitable  method  found  for  addChromosome(Collection<Chromosome>)  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosome(chromosomeColl);    }    	non-compiled	[CE]  no  suitable  method  found  for  addChromosome(Collection<Chromosome>)	3	None	replace
460	[BUG]  [BUGGY]  int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }  [CE]  >  expected  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosome(chromosomeColl);    }    	non-compiled	[CE]  >  expected	3	None	replace
461	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  null,  chromosomes);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  null,  chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  null,  chromosomes);	  chromosomeColl.addAll(this,    chromosomes);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	83	None	replace
462	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    populateLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	123	None	add
463	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  popateLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  int  popateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    populateLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  int  popateLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	123	None	add
464	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes.toArray(new  Chromosome[chromosomeColl.size()  ]),  populationLimit);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],int)	119	None	replace
465	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  float  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	float  chromosomeLimit  =  chromosomes.size();	  int    chromosomeLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	68	2	replace
466	[BUG]  [BUGGY]  float  chromosomeLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  float  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	float  chromosomeLimit  =  chromosomes.size();	  int    chromosomeLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	68	2	replace
467	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	21	2	replace
468	[BUG]  [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(!chromosomes.isEmpty())  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	21	2	replace
469	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	21	2	replace
470	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	21	2	replace
471	[BUG]  [BUGGY]  chromosomes.addAll(this,  chromosomeColl);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>)  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this,  chromosomeColl);	  chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>)	38	None	replace
472	[BUG]  [BUGGY]  chromosomes.addAll(this,  new  List  <  Chromosome>());  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  new  List  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this,  new  List  <  Chromosome>());	  chromosomes.addAll(this);    	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	38	None	replace
473	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    +    1;    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  not  a  statement	49	None	add
474	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    +    1;    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  not  a  statement	49	None	add
475	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes,  true,  chromosomeColl);  [CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,Collection<Chromosome>)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes,  true,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes,  true,  chromosomeColl);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,Collection<Chromosome>)	109	None	replace
476	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  AssertionError  	112	1	replace
477	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  AssertionError  	112	1	replace
478	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  AssertionError  	112	1	replace
479	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	compilable	  [FE]  AssertionError  	112	1	replace
480	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  PopulationLimit.THAN_POPULATION_SIZE;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  PopulationLimit.THAN_POPULATION_SIZE;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  -  PopulationLimit.THAN_POPULATION_SIZE;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	106	None	add
481	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  not  a  statement	106	None	add
482	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  new  LinkedList  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  new  LinkedList  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  new  LinkedList  <  Chromosome>());	  this.chromosomes.add(chromosomeColl,    null);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
483	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl!=  null)  {  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  }	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	117	2	replace
484	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  }	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	117	2	replace
485	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	117	2	replace
486	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomeColl.size()  +  1;  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	117	2	replace
487	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populateLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populateLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  populateLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	32	None	add
488	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    numberLimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	32	None	add
489	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	47	None	add
490	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	47	None	add
491	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashMap();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
492	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashArray();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashArray();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.newHashArray();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
493	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	23	2	replace
494	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	23	2	replace
495	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	23	2	replace
496	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	23	2	replace
497	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  cannot  find  symbol  Lists	39	None	add
498	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
499	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(this.chromosomes);    chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  UnsupportedOperationException  	39	1	add
500	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  Collections.emptyList();  [FE]  UnsupportedOperationException  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  UnsupportedOperationException  	39	1	add
501	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  java.lang.ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  java.lang.ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  java.lang.ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
502	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(this.chromosomeColl);  [CE]  cannot  find  symbol  chromosomeColl  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(this.chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(this.chromosomeColl);	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	13	None	add
503	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.remove(chromosomeColl);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	13	1	add
504	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.clear();  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	13	1	add
505	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeLimit);  [CE]  cannot  find  symbol  chromosomeLimit  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  false,  chromosomeLimit);	  this.chromosomes.add(chromosomeColl,    false);    	non-compiled	[CE]  cannot  find  symbol  chromosomeLimit	9	None	replace
506	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeColl);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,Collection<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  false,  chromosomeColl);	  this.chromosomes.add(chromosomeColl,    false);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,Collection<Chromosome>)	9	None	replace
507	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  new  List  <  Chromosome>());  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  new  List  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  new  List  <  Chromosome>());	  chromosomeColl.addAll(this,    this);    	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	81	None	replace
508	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	33	2	replace
509	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomeColl.size()  +  1;  int  numberLimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	33	2	replace
510	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
511	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
512	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  ==  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	28	2	replace
513	[BUG]  [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  ==  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  ==  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	28	2	replace
514	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	20	1	add
515	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	20	1	add
516	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  cannot  find  symbol  Lists	20	None	add
517	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    int  chromosomeCollLimit  =  Collections.emptyList();	  	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	20	None	add
518	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  cannot  find  symbol	88	None	add
519	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.util.ArrayList  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.util.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.util.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  cannot  find  symbol	88	None	add
520	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    java.lang.ArrayList  <  AssertionError>  chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  cannot  find  symbol	88	None	add
521	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(this.chromosomeColl);  [CE]  cannot  find  symbol  chromosomeColl  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(this.chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(this.chromosomeColl);	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	88	None	add
522	[BUG]  [BUGGY]  chromosomes.addAll(new  TreeSet  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(new  TreeSet  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(new  TreeSet  <  Chromosome>());	  chromosomes.addAll(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
523	[BUG]  [BUGGY]  chromosomes.clear();  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  List  <  Chromosome>  chromosomes  =  Lists.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	100	None	replace
524	[BUG]  [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newLinkedList();  [CE]  cannot  find  symbol  Lists  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newLinkedList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newLinkedList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	100	None	replace
525	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
526	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
527	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomes.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    this.chromosomes.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
528	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomes.clear();  chromosomeColl.clear();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  this.chromosomes.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    this.chromosomes.clear();  chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	111	1	add
529	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  int  chromosomeLimit  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  int  chromosomeLimit  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    int  chromosomeLimit  =  Collections.emptyList();	  	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	111	None	add
530	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
531	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    this.chromosomes.clear();    this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	22	1	add
532	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  }  [CE]  cannot  find  symbol  chromosomeColl  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomeColl.clear();    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	113	None	replace
533	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	124	2	replace
534	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	124	2	replace
535	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  int  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	non-compiled	[CE]  ')'  expected	124	None	replace
536	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit),  false);  [CE]  no  suitable  method  found  for  toArray(Chromosome[],int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit),  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ],  populationLimit),  false);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ],    populationLimit));    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Chromosome[],int)	17	None	replace
537	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(!chromosomeColl.isEmpty())  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(!chromosomeColl.isEmpty())  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  AssertionError  	75	1	replace
538	[BUG]  [BUGGY]  if(!chromosomeColl.isEmpty())  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(!chromosomeColl.isEmpty())  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(!chromosomeColl.isEmpty())  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  AssertionError  	75	1	replace
539	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  AssertionError  	79	1	replace
540	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  AssertionError  	79	1	replace
541	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	79	2	replace
542	[BUG]  [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	79	2	replace
543	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  ==  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl.size()  ==  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	79	2	replace
544	[BUG]  [BUGGY]  if(chromosomeColl.size()  ==  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  ==  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  ==  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	79	2	replace
545	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    1;    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  not  a  statement	63	None	add
546	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    1;    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  not  a  statement	63	None	add
547	[BUG]  [BUGGY]  chromosomeColl.add(this,  chromosomeColl);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.add(this,  chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.add(this,  chromosomeColl);	  chromosomeColl.add(this);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	108	None	replace
548	[BUG]  [BUGGY]  chromosomeColl.add(this,  new  LinkedList  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.add(this,  new  LinkedList  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.add(this,  new  LinkedList  <  Chromosome>());	  chromosomeColl.add(this);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
549	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  }  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.newHashSet();  }	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    Collections.newHashSet();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	80	None	replace
550	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  +  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  +  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size()  +  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	5	None	replace
551	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl);  [CE]  no  suitable  method  found  for  addAll(int,boolean,Collection<Chromosome>)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  false,  chromosomeColl);	  this.chromosomes.addAll(chromosomeColl.size()    -    populationLimit,    false);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,boolean,Collection<Chromosome>)	121	None	replace
552	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
553	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.util.ArrayList  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.util.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.util.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
554	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    java.lang.ArrayList  <  AssertionError>  chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
555	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>(f);  [CE]  cannot  find  symbol  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>(f);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    java.lang.ArrayList  <  AssertionError>  chromosomes  =  new  java.lang.ArrayList  <  AssertionError>(f);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
556	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  chromosomeLimit  =  chromosomes.size()  -  2;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  int  chromosomeLimit  =  chromosomes.size()  -  2;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    1;    int  chromosomeLimit  =  chromosomes.size()  -  2;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	67	None	add
557	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    Collection  <  Chromosome>  chromosomeColl  =  Collections.emptyList();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	78	None	add
558	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    int  chromosomeCollLimit  =  Collections.emptyList();	  	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	78	None	add
559	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
560	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    this.chromosomes.clear();	  	compilable	  [FE]  AssertionError  	78	1	add
561	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  for(int  f=1;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  for(int  f=1;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  for(int  f=1;  f  <  chromosomeColl.size();  f++)  {  addChromosome(chromosomeColl);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosome(chromosomeColl);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
562	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	25	1	add
563	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes  =  Collections.emptyList();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  chromosomes  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    chromosomes  =  Collections.emptyList();	  	compilable	  [FE]  AssertionError  	25	1	add
564	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes.clear();  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  +  1;  java.lang.ArrayList  <  AssertionError>  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomeColl.size()    +    1;    java.lang.ArrayList  <  AssertionError>  this.chromosomes.clear();	  	non-compiled	[CE]  not  a  statement	69	None	add
565	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
566	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  chromosomesLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
567	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  Int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  int  populationLimit  =  chromosomes.size();  Int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    int  populationLimit  =  chromosomes.size();  Int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
568	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	96	None	replace
569	[BUG]  [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl!=  null)  {  chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	          chromosomeColl.clear();    Collection    <    Chromosome>    chromosomeColl    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  ')'  expected	96	None	replace
570	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  chromosomes.size(),  populationLimit);  [CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,int,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes,  false,  chromosomes.size(),  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes,  false,  chromosomes.size(),  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(List<Chromosome>,boolean,int,int)	7	None	replace
571	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	102	2	replace
572	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	102	2	replace
573	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  PopulationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  +  PopulationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  +  PopulationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	65	None	add
574	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  not  a  statement	65	None	add
575	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	48	2	replace
576	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomes.size()  +  1;  int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	48	2	replace
577	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ])+  1,  false);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ])+  1,  false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ])+  1,  false);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    false);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
578	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size);  [CE]  cannot  find  symbol  size  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl.size);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeSize);    	non-compiled	[CE]  cannot  find  symbol  size	91	None	replace
579	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,Collection<Chromosome>)  [FE]                  AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomeColl);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomeSize);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,Collection<Chromosome>)	91	None	replace
580	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomeColl.clear();        chromosomeColl.clear();    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	74	1	add
581	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	74	1	add
582	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
583	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    int  chromosomeCollLimit  =  Collections.emptyList();	  	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	74	None	add
584	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	116	None	add
585	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  Int  populimit  =  chromosomeColl.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  populationLimit  =  chromosomeColl.size();  Int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  populationLimit  =  chromosomeColl.size();  Int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	116	None	add
586	[BUG]  [BUGGY]  this.chromosomes.addAll(Chromosome.EMPTY,  chromosomeColl);  [CE]  cannot  find  symbol  EMPTY  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(Chromosome.EMPTY,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(Chromosome.EMPTY,  chromosomeColl);	  this.chromosomes.addAll(Chromosome.EMPTY);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	115	None	replace
587	[BUG]  [BUGGY]  int  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()	          if(chromosomes.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
588	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        this.chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	27	1	add
589	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  AssertionError  	27	1	add
590	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  cannot  find  symbol  Lists	27	None	add
591	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  populationLimit);	  this.chromosomes.addAll(this,    chromosomeColl);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,int)	55	None	replace
592	[BUG]  [BUGGY]  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	          if(chromosomes.size()    >    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  <identifier>  expected	105	None	replace
593	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  <  populationLimit)  {  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  f);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl,    f);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
594	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size();  Integer  chromosomeColl  =  chromosomes.get(0);  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size();  Integer  chromosomeColl  =  chromosomes.get(0);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  chromosomes.size();  Integer  chromosomeColl  =  chromosomes.get(0);	          int    chromosomeLimit    =    chromosomes.size();    Integer    chromosomeColl    =    chromosomes.size();    	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	60	None	replace
595	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.add(this.chromosomes);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.add(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.add(this.chromosomes);	  	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	11	None	add
596	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  java.lang.AssertionError:  expected;  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  java.lang.AssertionError:  expected;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    java.lang.AssertionError:  expected;	  	non-compiled	[CE]  not  a  statement	11	None	add
597	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  1);  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  1);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  1);	  this.chromosomes.add(chromosomeColl,    0);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,int)	10	None	replace
598	[BUG]  [BUGGY]  chromosomes.addAll(false);  [CE]  no  suitable  method  found  for  addAll(boolean)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(false);	  chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(boolean)	40	None	replace
599	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  float  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	float  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	54	2	replace
600	[BUG]  [BUGGY]  float  populationLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  float  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	float  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	54	2	replace
601	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  java.lang.AssertionError:  false;  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  java.lang.AssertionError:  false;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    -    1;    java.lang.AssertionError:  false;	  	non-compiled	[CE]  not  a  statement	53	None	add
602	[BUG]  [BUGGY]  if(chromosomeCollLimit!=  null)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }  [CE]  cannot  find  symbol  chromosomeCollLimit  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeCollLimit!=  null)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeCollLimit!=  null)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }	          chromosomeColl.clear();    int    chromosomeCollLimit    =    Collections.emptyList();    	non-compiled	[CE]  cannot  find  symbol  chromosomeCollLimit	97	None	replace
603	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeLimit);  [CE]  cannot  find  symbol  chromosomeLimit  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  true,  chromosomeLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  true,  chromosomeLimit);	  this.chromosomes.addAll(chromosomeColl,    true);    	non-compiled	[CE]  cannot  find  symbol  chromosomeLimit	4	None	replace
604	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    this.chromosomes.size();    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  not  a  statement	51	None	add
605	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    this.chromosomes.size();    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  not  a  statement	51	None	add
606	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    this.chromosomes.size();    java.lang.ArrayList  <  AssertionError>  this  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  not  a  statement	51	None	add
607	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	101	None	add
608	[BUG]  [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    Collection  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        Collection    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes.clear();	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	101	None	add
609	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    chromosomesLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	45	None	replace
610	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  not  a  statement	18	None	add
611	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  not  a  statement	18	None	add
612	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  java.lang.ArrayList  <  AssertionError>  all  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  java.lang.ArrayList  <  AssertionError>  all  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    java.lang.ArrayList  <  AssertionError>  all  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
613	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  chromosomeColl.size());  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size(),  chromosomeColl.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size(),  chromosomeColl.size());	  this.chromosomes.addAll(chromosomeColl.size()    -    1,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	37	None	replace
614	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  for(int  f=1;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  for(int  f=1;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  for(int  f=1;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
615	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  not  a  statement	61	None	add
616	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  chromosomeColl  =  new  java.lang.ArrayList  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  chromosomeColl  =  new  java.lang.ArrayList  <  AssertionError>();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    java.lang.ArrayList  <  AssertionError>  chromosomeColl  =  new  java.lang.ArrayList  <  AssertionError>();	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
617	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    java.lang.ArrayList  <  AssertionError>  this.chromosomes  =  Lists.newArrayList();	  	non-compiled	[CE]  not  a  statement	61	None	add
618	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());	  	compilable	  [FE]  AssertionError  	39	1	add
619	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());	  	compilable	  [FE]  AssertionError  	39	1	add
620	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
621	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this.chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);	  	compilable	  [FE]  AssertionError  	39	1	add
622	[BUG]  [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.size()  {  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	          if(chromosomes.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    0);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
623	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }	          chromosomeColl.clear();    int    chromosomeCollLimit    =    Collections.emptyList();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  int	97	None	replace
624	[BUG]  [BUGGY]  if(chromosomeCollLimit  ==  0)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }  [CE]  cannot  find  symbol  chromosomeCollLimit  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeCollLimit  ==  0)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeCollLimit  ==  0)  {  chromosomeColl.clear();  int  chromosomeCollLimit  =  Collections.emptyList();  }	          chromosomeColl.clear();    int    chromosomeCollLimit    =    Collections.emptyList();    	non-compiled	[CE]  cannot  find  symbol  chromosomeCollLimit	97	None	replace
625	[BUG]  [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  =  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  <  =  populationLimit)  {  chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    chromosomes.clear();    this.chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
626	[BUG]  [BUGGY]  this.chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomeColl.clear();	          chromosomeColl.clear();    this.chromosomeColl.clear();    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	76	None	replace
627	[BUG]  [BUGGY]  int  chromosomeColl.clear();  this.chromosomeColl.clear();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeColl.clear();  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeColl.clear();  this.chromosomeColl.clear();	          chromosomeColl.clear();    this.chromosomeColl.clear();    	non-compiled	[CE]  ';'  expected	76	None	replace
628	[BUG]  [BUGGY]  chromosomes.addAll(this,  new  LinkedList  <  Chromosome>(populationLimit));  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  new  LinkedList  <  Chromosome>(populationLimit));  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this,  new  LinkedList  <  Chromosome>(populationLimit));	  chromosomes.addAll(this);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
629	[BUG]  [BUGGY]  chromosomes.addAll(this,  new  ArrayList  <  Chromosome>(populationLimit));  [CE]  no  suitable  method  found  for  addAll(ListPopulation,ArrayList<Chromosome>)  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  new  ArrayList  <  Chromosome>(populationLimit));  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this,  new  ArrayList  <  Chromosome>(populationLimit));	  chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,ArrayList<Chromosome>)	38	None	replace
630	[BUG]  [BUGGY]  chromosomes.addAll(this,  new  LinkedList  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.addAll(this,  new  LinkedList  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.addAll(this,  new  LinkedList  <  Chromosome>());	  chromosomes.addAll(this);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
631	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  Integer  populationLimit  =  chromosomes.size()  +  2;  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  Integer  populationLimit  =  chromosomes.size()  +  2;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    populationLimit    =    chromosomes.size()    +    1;    Integer  populationLimit  =  chromosomes.size()  +  2;	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	49	None	add
632	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	111	None	add
633	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	non-compiled	[CE]  incompatible  types	117	None	replace
634	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	117	2	replace
635	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomeColl.size()  -  1;  int  populimit  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	117	2	replace
636	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	117	2	replace
637	[BUG]  [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size()  -  1;	          int    populationLimit    =    chromosomeColl.size();    int    populimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	117	2	replace
638	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes,  true);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,List<Chromosome>,boolean)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomes,  true);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,List<Chromosome>,boolean)	109	None	replace
639	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  boolean  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  boolean  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    boolean  chromosomeLimit  =  chromosomes.size()  -  populationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	106	None	add
640	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  PopulationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  populationLimit;  int  chromosomeLimit  =  chromosomes.size()  -  PopulationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    populationLimit;    int  chromosomeLimit  =  chromosomes.size()  -  PopulationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	106	None	add
641	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  -  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =  this.chromosomes.size()  -  populationLimit;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	62	2	replace
642	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  -  populationLimit;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size()  -  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =  this.chromosomes.size()  -  populationLimit;	  int    chromosomeLimit    =    this.chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	62	2	replace
643	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  chromosomesLimit  =  chromosomes.size();  Integer  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    chromosomesLimit    =    chromosomes.size();    Integer  populationLimit  =  chromosomes.size();  int  chromosomesLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	44	None	add
644	[BUG]  [BUGGY]  this.chromosomes.add(0,  chromosomeColl);  [CE]  no  suitable  method  found  for  add(int,Collection<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(0,  chromosomeColl);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(0,  chromosomeColl);	  this.chromosomes.add(chromosomeColl,    0);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,Collection<Chromosome>)	10	None	replace
645	[BUG]  [BUGGY]  this.chromosomes.addAll(new  TreeMap  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  TreeMap  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  TreeMap  <  Chromosome>());	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
646	[BUG]  [BUGGY]  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Lists.newArrayList();	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	100	None	replace
647	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  new  TreeSet  <  Chromosome>());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  new  TreeSet  <  Chromosome>());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  new  TreeSet  <  Chromosome>());	  chromosomeColl.addAll(this,    new    LinkedList    <    Chromosome>());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
648	[BUG]  [BUGGY]  chromosomes.remove(f);  [CE]  cannot  find  symbol  f  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(f);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(f);	  chromosomes.remove(chromosomeColl);    	non-compiled	[CE]  cannot  find  symbol  f	42	None	replace
649	[BUG]  [BUGGY]  chromosomes.add(f);  [CE]  cannot  find  symbol  f  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.add(f);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.add(f);	  chromosomes.remove(chromosomeColl);    	non-compiled	[CE]  cannot  find  symbol  f	42	None	replace
650	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	26	2	replace
651	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  Collection  <  Chromosome>  chromosomes  =  Collections.emptyList();  }	          chromosomes.clear();    Collection    <    Chromosome>    chromosomes    =    Collections.emptyList();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	26	2	replace
652	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
653	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  chromosomeColl.clear();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  chromosomeColl.clear();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
654	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomeColl.clear();  chromosomeColl.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomeColl.clear();  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomeColl.clear();  chromosomeColl.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	74	None	add
655	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomeColl.clear();  [CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]          AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    Collection  <  Chromosome>  chromosomeColl  =  new  ArrayList  <  Chromosome>(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomeColl.clear();	  	non-compiled	[CE]  variable  chromosomeColl  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	74	None	add
656	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	75	2	replace
657	[BUG]  [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl  ==  null)  {  chromosomeColl.clear();  chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	75	2	replace
658	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size()  -  1);  [CE]  no  suitable  method  found  for  addAll(int,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size()  -  1);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  1,  chromosomeColl.size()  -  1);	  this.chromosomes.addAll(chromosomeColl.size()    -    1,    chromosomeColl.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int)	37	None	replace
659	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  this.chromosomes.removeAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(chromosomeColl);  this.chromosomes.removeAll(chromosomeColl);	  	compilable	  [FE]  AssertionError  	88	1	add
660	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  this.chromosomes.removeAll(chromosomeColl);  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  this.chromosomes.removeAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(chromosomeColl);  this.chromosomes.removeAll(chromosomeColl);	  	compilable	  [FE]  AssertionError  	88	1	add
661	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	88	2	add
662	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(chromosomeColl);  this.chromosomes.addAll(chromosomeColl);	  	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	88	2	add
663	[BUG]  [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(false);  [CE]  no  suitable  method  found  for  removeAll(boolean)  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.removeAll(chromosomeColl);  chromosomes.removeAll(false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.removeAll(chromosomeColl);    chromosomes.removeAll(false);	  	non-compiled	[CE]  no  suitable  method  found  for  removeAll(boolean)	88	None	add
664	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();	  int    populationLimit    =    chromosomeColl.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	72	2	replace
665	[BUG]  [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =(chromosomeColl.size()  <  1)?  0  :  chromosomeColl.size();	  int    populationLimit    =    chromosomeColl.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	72	2	replace
666	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  2)?  0  :  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =(chromosomeColl.size()  <  2)?  0  :  chromosomeColl.size();	  int    populationLimit    =    chromosomeColl.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	72	2	replace
667	[BUG]  [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  2)?  0  :  chromosomeColl.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomeColl.size()  <  2)?  0  :  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =(chromosomeColl.size()  <  2)?  0  :  chromosomeColl.size();	  int    populationLimit    =    chromosomeColl.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	72	2	replace
668	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  int    chromosomeLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	68	2	replace
669	[BUG]  [BUGGY]  int  chromosomeLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  int    chromosomeLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	68	2	replace
670	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =(chromosomes.size()  <  populationLimit)?  0  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  chromosomeLimit  =(chromosomes.size()  <  populationLimit)?  0  :  chromosomes.size();	  int    chromosomeLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	68	2	replace
671	[BUG]  [BUGGY]  int  chromosomeLimit  =(chromosomes.size()  <  populationLimit)?  0  :  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =(chromosomes.size()  <  populationLimit)?  0  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  chromosomeLimit  =(chromosomes.size()  <  populationLimit)?  0  :  chromosomes.size();	  int    chromosomeLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	68	2	replace
672	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  numberLimit  =  chromosomeColl.size()  -  1;	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	33	2	replace
673	[BUG]  [BUGGY]  int  numberLimit  =  chromosomeColl.size()  -  1;  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  numberLimit  =  chromosomeColl.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  numberLimit  =  chromosomeColl.size()  -  1;	          int    populationLimit    =    chromosomeColl.size();    int    numberLimit    =    chromosomeColl.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	33	2	replace
674	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  boolean  chromosomeLimit  =  this.chromosomes.size();  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  boolean  chromosomeLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    boolean  chromosomeLimit  =  this.chromosomes.size();	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	61	None	add
675	[BUG]  [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size());  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  this.chromosomes.size();  int  chromosomeLimit  =  this.chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    this.chromosomes.size();    int  chromosomeLimit  =  this.chromosomes.size());	  	non-compiled	[CE]  ';'  expected	61	None	add
676	[BUG]  [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl),  chromosomes);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl),  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(new  LinkedList  <  Chromosome>(chromosomeColl),  chromosomes);	  this.chromosomes.addAll(new    LinkedList    <    Chromosome>(chromosomeColl));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
677	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes  ==  null)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	28	2	replace
678	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	28	2	replace
679	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
680	[BUG]  [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  <  populationLimit)  {  chromosomes.clear();  this.chromosomes.clear();  }	          chromosomes.clear();    this.chromosomes.clear();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	28	2	replace
681	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    populateLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	124	None	replace
682	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  }  [CE]  cannot  find  symbol  chromosomeColl  [FE]          AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomeColl.clear();  }	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomeColl.clear();    	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	113	None	replace
683	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  new  ArrayList  <  Chromosome>());  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,ArrayList<Chromosome>)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  new  ArrayList  <  Chromosome>());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  new  ArrayList  <  Chromosome>());	  this.chromosomes.addAll(chromosomeColl,    this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,ArrayList<Chromosome>)	56	None	replace
684	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  double  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	double  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    boolean    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	114	2	replace
685	[BUG]  [BUGGY]  double  chromosomeLimit  =  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]        AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  double  chromosomeLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	double  chromosomeLimit  =  chromosomes.size();	          int    chromosomeLimit    =    chromosomes.size();    boolean    chromosomeLimit    =    chromosomes.size();    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	114	2	replace
686	[BUG]  [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.addAll(this.chromosomes,  false);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this.chromosomes);  chromosomeColl.addAll(this.chromosomes,  false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this.chromosomes);    chromosomeColl.addAll(this.chromosomes,  false);	  	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	11	None	add
687	[BUG]  [BUGGY]  this.chromosomes.addAll(this,  chromosomeColl,  true);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>,boolean)  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(this,  chromosomeColl,  true);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(this,  chromosomeColl,  true);	  this.chromosomes.addAll(this,    chromosomeColl);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,Collection<Chromosome>,boolean)	55	None	replace
688	[BUG]  [BUGGY]  this.chromosomes.addAll(this,  new  LinkedList  <  Chromosome>(chromosomeColl));  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(this,  new  LinkedList  <  Chromosome>(chromosomeColl));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(this,  new  LinkedList  <  Chromosome>(chromosomeColl));	  this.chromosomes.addAll(this,    chromosomeColl);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
689	[BUG]  [BUGGY]  chromosomeColl.addAll(false);  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(false);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(false);	  chromosomeColl.addAll(this.chromosomes);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	12	None	replace
690	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [CE]  variable  populateLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    populateLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  populateLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	123	None	add
691	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  ')'  expected  [FE]            java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
692	[BUG]  [BUGGY]  chromosomeColl.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
693	[BUG]  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	          if(chromosomes.size()    >    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.    	non-compiled	[CE]  <identifier>  expected	105	None	replace
694	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  false);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  false);  }  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  for(int  f=0;  f  <  chromosomeColl.size();  f++)  {  addChromosomes(chromosomeColl,  false);  }	  if(chromosomes.size()    >    populationLimit)    {    for(int    f=0;    f    <    chromosomeColl.size();    f++)    {    addChromosomes(chromosomeColl,    f);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
695	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove();  [CE]  method  remove  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomeColl.remove();	  	non-compiled	[CE]  method  remove  in  interface  Collection<E>  cannot  be  applied  to  given  types;	41	None	add
696	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	41	1	add
697	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);	  	compilable	  [FE]  AssertionError  	41	1	add
698	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	41	1	add
699	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.clear();  [FE]  AssertionError  [FE]        java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomeColl.clear();	  	compilable	  [FE]  AssertionError  	41	1	add
700	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove(populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomes.remove(chromosomeColl);    chromosomeColl.remove(populationLimit);	  	compilable	  [FE]  AssertionError  	41	1	add
701	[BUG]  [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove(populationLimit);  [FE]  AssertionError  [FE]          java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomes.remove(chromosomeColl);  chromosomeColl.remove(populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomes.remove(chromosomeColl);    chromosomeColl.remove(populationLimit);	  	compilable	  [FE]  AssertionError  	41	1	add
702	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	          int    populationLimit    =    chromosomes.size();    int    numberLimit    =    chromosomes.size();    	non-compiled	[CE]  incompatible  types	48	None	replace
703	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  false,  chromosomes);  [CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean,List<Chromosome>)  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  false,  chromosomes);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  ]),  false,  chromosomes);	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ]),    false);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Chromosome[],boolean,List<Chromosome>)	15	None	replace
704	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  boolean  chromosomeLimit  =  chromosomes.size()  -  1;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  -  1;  boolean  chromosomeLimit  =  chromosomes.size()  -  1;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    -    1;    boolean  chromosomeLimit  =  chromosomes.size()  -  1;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	67	None	add
705	[BUG]  [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomes.size();    int  numberLimit  =  chromosomes.size();  int  populateLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomes.size();        int    numberLimit    =    chromosomes.size();    int  populateLimit  =  chromosomes.size();  int  numberLimit  =  chromosomes.size();	  	non-compiled	[CE]  variable  numberLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	47	None	add
706	[BUG]  [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomeColl.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	79	None	replace
707	[BUG]  [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomes.size());  [CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,int)  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.add(chromosomeColl,  false,  chromosomes.size());  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.add(chromosomeColl,  false,  chromosomes.size());	  this.chromosomes.add(chromosomeColl,    false);    	non-compiled	[CE]  no  suitable  method  found  for  add(Collection<Chromosome>,boolean,int)	9	None	replace
708	[BUG]  [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  boolean  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  boolean  chromosomeLimit  =  chromosomes.size()  +  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int    chromosomeLimit    =    chromosomes.size()    +    populationLimit;    boolean  chromosomeLimit  =  chromosomes.size()  +  populationLimit;	  	non-compiled	[CE]  variable  chromosomeLimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	65	None	add
709	[BUG]  [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  this.chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  [CE]  cannot  find  symbol  chromosomeColl  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomeColl.clear();    chromosomeColl.clear();  this.chromosomes.clear();  this.chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomeColl.clear();        chromosomeColl.clear();    this.chromosomes.clear();    this.chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	78	None	add
710	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes.size()  -  populationLimit);  [CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl,  false,  chromosomes.size()  -  populationLimit);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl,  false,  chromosomes.size()  -  populationLimit);	  this.chromosomes.addAll(chromosomeColl,    false,    chromosomes.size());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Collection<Chromosome>,boolean,int)	7	None	replace
711	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  -  populationLimit),  populationLimit));  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  -  populationLimit),  populationLimit));  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.toArray(new  Chromosome[chromosomeColl.size()  -  populationLimit),  populationLimit));	  this.chromosomes.addAll(chromosomeColl.toArray(new    Chromosome[chromosomeColl.size()    ],    populationLimit));    	non-compiled	[CE]  ']'  expected	17	None	replace
712	[BUG]  [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.size();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  boolean  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	boolean  populationLimit  =  chromosomeColl.size();  int  chromosomeColl  =  chromosomeColl.size();	          int    populationLimit    =    chromosomeColl.size();    int    chromosomeColl    =    chromosomeColl.size();    	non-compiled	[CE]  incompatible  types	31	None	replace
713	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomeColl.clear();  chromosomeColl.clear();  this.chromosomes.addAll(chromosomeColl);  }  else  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES	          chromosomeColl.clear();    chromosomeColl.clear();    this.chromosomes.addAll(chromosomeColl);    	non-compiled	[CE]  ')'  expected	112	None	replace
714	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.addAll(false);  [CE]  no  suitable  method  found  for  addAll(boolean)  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.addAll(false);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    chromosomes.addAll(false);	  	non-compiled	[CE]  no  suitable  method  found  for  addAll(boolean)	18	None	add
715	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.addAll(this);  [CE]  no  suitable  method  found  for  addAll(ListPopulation)  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomes);  chromosomes.addAll(this);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomes);    chromosomes.addAll(this);	  	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation)	18	None	add
716	[BUG]  [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  new  int[]  {  }  );  [CE]  no  suitable  method  found  for  addAll(int,int[])  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  new  int[]  {  }  );  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(chromosomeColl.size()  -  populationLimit,  new  int[]  {  }  );	  this.chromosomes.addAll(chromosomeColl.size()    -    populationLimit);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int,int[])	35	None	replace
717	[BUG]  [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomeColl.remove(chromosomeColl);  [CE]  cannot  find  symbol  chromosomeColl  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(chromosomeColl);  chromosomeColl.remove(chromosomeColl);  this.chromosomeColl.remove(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(chromosomeColl);    chromosomeColl.remove(chromosomeColl);  this.chromosomeColl.remove(chromosomeColl);	  	non-compiled	[CE]  cannot  find  symbol  chromosomeColl	13	None	add
718	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  Collections.emptyList();  chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	20	1	add
719	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  Collections.emptyList();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  Collections.emptyList();  chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	20	1	add
720	[BUG]  [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.clear();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        chromosomes.clear();    chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
721	[BUG]  [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          int    populationLimit    =    chromosomeColl.size();    int  populimit  =  chromosomeColl.size();  int  numberLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                int        populationLimit        =        chromosomeColl.size();        int    populimit    =    chromosomeColl.size();    int  numberLimit  =  chromosomeColl.size();  int  populimit  =  chromosomeColl.size();	  	non-compiled	[CE]  variable  populimit  is  already  defined  in  method  addChromosomes(Collection<Chromosome>)	116	None	add
722	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	54	2	replace
723	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	54	2	replace
724	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  1  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	int  populationLimit  =(chromosomes.size()  <  1)?  1  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	54	2	replace
725	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  1  :  chromosomes.size();  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  1  :  chromosomes.size();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  1  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [1  	54	2	replace
726	[BUG]  [BUGGY]  this.chromosomes.addAll(f);  [CE]  cannot  find  symbol  f  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [1    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  this.chromosomes.addAll(f);  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	this.chromosomes.addAll(f);	  this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  cannot  find  symbol  f	19	None	replace
727	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	                chromosomes.clear();        this.chromosomes.clear();    chromosomes  =  Collections.emptyList();  this.chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	27	1	add
728	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();  [FE]  UnsupportedOperationException  [FE]    AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes  =  Collections.emptyList();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    chromosomes  =  Collections.emptyList();  this.chromosomes.clear();	  	compilable	  [FE]  UnsupportedOperationException  	27	1	add
729	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  this.chromosomes.clear();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    chromosomes  =  new  LinkedList  <  Chromosome>();  this.chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
730	[BUG]  [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  this.chromosomes.addAll(chromosomeColl);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]          chromosomes.clear();    this.chromosomes.clear();  chromosomes  =  new  LinkedList  <  Chromosome>();  this.chromosomes.addAll(chromosomeColl);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	                chromosomes.clear();        this.chromosomes.clear();    chromosomes  =  new  LinkedList  <  Chromosome>();  this.chromosomes.addAll(chromosomeColl);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
731	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  new  ArrayList  <  Chromosome>(chromosomes));  [CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  new  ArrayList  <  Chromosome>(chromosomes));  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  new  ArrayList  <  Chromosome>(chromosomes));	  chromosomeColl.addAll(this,    chromosomes);    	non-compiled	[CE]  method  addAll  in  interface  Collection<E>  cannot  be  applied  to  given  types;	83	None	replace
732	[BUG]  [BUGGY]  chromosomeColl.addAll(this,  new  LinkedList  <  Chromosome>(chromosomes),  this);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.addAll(this,  new  LinkedList  <  Chromosome>(chromosomes),  this);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.addAll(this,  new  LinkedList  <  Chromosome>(chromosomes),  this);	  chromosomeColl.addAll(this,    chromosomes);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
733	[BUG]  [BUGGY]  chromosomeColl.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected:<[(f=0.0  [1      [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.size()  <  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  if(chromosomeColl.size()    ==    populationLimit)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    false);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
734	[BUG]  [BUGGY]  chromosomeColl.remove(f);  [CE]  cannot  find  symbol  f  [FE]    java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(f);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(f);	  chromosomeColl.remove(chromosomeColl);    	non-compiled	[CE]  cannot  find  symbol  f	14	None	replace
735	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(0);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	add	chromosomeColl.remove(0);	  chromosomeColl.remove(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	14	2	replace
736	[BUG]  [BUGGY]  chromosomeColl.remove(0);  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  [FE]      java.lang.AssertionError:  expected:<[(f=0.0  [0    [CONTEXT]      public  void  addChromosomes(final  Collection<Chromosome>  chromosomeColl)  {  if  (chromosomes.size()  +  chromosomeColl.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }      [BUGGY]  chromosomeColl.remove(0);  [BUGGY]      this.chromosomes.addAll(chromosomeColl);  }  [CLASS]  ListPopulation  [METHOD]  addChromosomes  [RETURN_TYPE]  void  Chromosome>  chromosomeColl  [VARIABLES]  Collection  chromosomeColl  List  chromosomes  boolean  int  populationLimit  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.7071067811865475	112	112	1	replace	chromosomeColl.remove(0);	  chromosomeColl.remove(chromosomeColl);    	compilable	  [FE]  java.lang.AssertionError:  expected:<[(f=0.0  [0  	14	2	replace
