bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  chromosomes.clear();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes.clear();  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes.clear();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  int  populationLimit  =  chromosomes.size()  -  1;	      final    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  final  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  int  populationLimit  =  chromosomes.size()  +  1;	      final    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  if  (chromosomes.size()  <  =  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  if  (chromosomes.size()  <  =  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if  (chromosomes.size()  <  =  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  chromosomes  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  Collections.EMPTY_LIST;  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.EMPTY_LIST;	      chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if    (chromosomes.size()    <    populationLimit)    {    if  (chromosomes.size()  <  populationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  <  populationLimit)  {  [CE]  ';'  expected  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  If  (chromosomes.size()  <  populationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if    (chromosomes.size()    <    populationLimit)    {    If  (chromosomes.size()  <  populationLimit)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
12	[BUG]  [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  PopulationLimit)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  if  (chromosomes.size()  <  populationLimit)  {  if  (chromosomes.size()  <  PopulationLimit)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if    (chromosomes.size()    <    populationLimit)    {    if  (chromosomes.size()  <  PopulationLimit)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
13	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  chromosomes  =  Collections.newArrayList();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  Collections.newArrayList();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.newArrayList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  ArrayList();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  populationLimit  =  chromosomes.size()  -  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  populationLimit  =  chromosomes.size()  +  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>();	      chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	10	1	add
21	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	10	1	add
22	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	10	None	add
23	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	10	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	10	1	add
25	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	10	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	10	1	add
27	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	10	1	add
28	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);	      	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	      	non-compiled	[CE]  ';'  expected	3	None	replace
30	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	      	non-compiled	[CE]  ';'  expected	3	None	replace
31	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size());	      	non-compiled	[CE]  ';'  expected	3	None	replace
32	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(1);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(1);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayList(populationLimit);	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  Lists.newLinkedList();  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newLinkedList();	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);	      chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>());  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>());	      chromosomes    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  populationLimit  =  chromosomes.size()  -  2;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  2;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  final  int  populationLimit  =  chromosomes.size()  -  2;  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  int  populationLimit  =  chromosomes.size()  -  2;	      final    int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(0);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(0);  [BUGGY]    if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(0);	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
