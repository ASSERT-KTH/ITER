bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(1);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
2	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit,  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayListWithCapacity(populationLimit,  populationLimit);	  chromosomes    =    Lists.newArrayListWithCapacity(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
3	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit  +  1);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayListWithCapacity(populationLimit  +  1);	  chromosomes    =    Lists.newArrayListWithCapacity(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
4	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  final  long  populationLimit  =  chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  final  long  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  long  populationLimit  =  chromosomes.size()  -  1;	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  static  final  int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  static  final  int  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	static  final  int  populationLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    LinkedList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationLimit);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationLimit);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size()  -  populationLimit);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size());    	non-compiled	[CE]  ';'  expected	31	None	replace
10	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  true);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size());    	non-compiled	[CE]  ';'  expected	31	None	replace
11	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size());    	non-compiled	[CE]  ';'  expected	31	None	replace
12	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  LinkedList();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList();	  chromosomes    =    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	24	1	add
14	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	24	1	add
15	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	24	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	24	1	add
17	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	24	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	24	1	add
19	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	24	1	add
20	[BUG]  [BUGGY]  chromosomes  =  Collections.newHashSet();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Collections.newHashSet();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.newHashSet();	  chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  chromosomes  =  Collections.newLinkedList();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Collections.newLinkedList();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.newLinkedList();	  chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  final  long  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  final  long  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  long  populationLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	Integer  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
24	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
26	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
28	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	add
29	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	add
30	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	add
31	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	add
32	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	add
33	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);	  chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit);	  chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  float  populationLimit  =  chromosomes.size()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  float  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	float  populationLimit  =  chromosomes.size()  -  1;	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  double  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  double  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	double  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  ';'  expected	29	None	replace
38	[BUG]  [BUGGY]  char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  ';'  expected	29	None	replace
39	[BUG]  [BUGGY]  long  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  long  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	long  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  ';'  expected	29	None	replace
40	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
41	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);	  chromosomes    =    Lists.newArrayList(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
42	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit  +  1);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayList(populationLimit  +  1);	  chromosomes    =    Lists.newArrayList(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
43	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit,  false);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayList(populationLimit,  false);	  chromosomes    =    Lists.newArrayList(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	20	1	add
45	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	20	1	add
46	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	20	None	add
47	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.	  	non-compiled	[CE]  <identifier>  expected	20	None	add
48	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes	  	non-compiled	[CE]  ')'  expected	20	None	add
49	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [CE]  no  suitable  constructor  found  for  NumberIsTooLargeException(LocalizedFormats)  [FE]            AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  NumberIsTooLargeException(LocalizedFormats)	20	None	add
50	[BUG]  [BUGGY]  chromosomes  =  Lists.EMPTY_LIST;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.EMPTY_LIST;  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.EMPTY_LIST;	  chromosomes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
52	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit  +  1);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit  +  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
53	[BUG]  [BUGGY]  If  (chromosomes.size()  <  =  populationLimit)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  If  (chromosomes.size()  <  =  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	If  (chromosomes.size()  <  =  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    If    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
54	[BUG]  [BUGGY]  If  (chromosomes.size()  <  populationLimit)  {  [CE]  ';'  expected  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  If  (chromosomes.size()  <  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	If  (chromosomes.size()  <  populationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    If    (chromosomes.size()    <    populationLimit)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
55	[BUG]  [BUGGY]  chromosomes  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>());  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.synchronizedList(new  LinkedList  <  Chromosome>());	  chromosomes    =    Collections.synchronizedList(new    ArrayList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
56	[BUG]  [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(),  populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(),  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(),  populationLimit);	  chromosomes    =    Collections.synchronizedList(new    ArrayList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
57	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
58	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  new  LinkedList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();  new  LinkedList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
59	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());	  chromosomes    =    new    LinkedList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  true);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    	non-compiled	[CE]  ';'  expected	30	None	replace
61	[BUG]  [BUGGY]  char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    	non-compiled	[CE]  ';'  expected	30	None	replace
62	[BUG]  [BUGGY]  boolean  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  boolean  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	boolean  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    populationLimit,    false);    	non-compiled	[CE]  ';'  expected	30	None	replace
63	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
66	[BUG]  [BUGGY]  char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	char  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size(),    populationLimit,    false);    	non-compiled	[CE]  ';'  expected	28	None	replace
67	[BUG]  [BUGGY]  boolean  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  boolean  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	boolean  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size(),    populationLimit,    false);    	non-compiled	[CE]  ';'  expected	28	None	replace
68	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	if  (chromosomes.size()  ==  populationLimit)  {	  if    (chromosomes.size()    <    =    populationLimit)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	3	replace
69	[BUG]  [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if  (chromosomes.size()  ==  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if  (chromosomes.size()  ==  populationLimit)  {	  if    (chromosomes.size()    <    =    populationLimit)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	3	replace
70	[BUG]  [BUGGY]  if  (chromosomes.size()  <  =  PopulationLimit)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if  (chromosomes.size()  <  =  PopulationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if  (chromosomes.size()  <  =  PopulationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    if    (chromosomes.size()    <    PopulationLimit)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
71	[BUG]  [BUGGY]  final  int  numberLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  final  int  numberLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  int  numberLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
72	[BUG]  [BUGGY]  chromosomes.addAll(this.chromosomes);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes.addAll(this.chromosomes);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes.addAll(this.chromosomes);	  chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
73	[BUG]  [BUGGY]  chromosomes.remove(chromosomes.size());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes.remove(chromosomes.size());  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes.remove(chromosomes.size());	  chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
75	[BUG]  [BUGGY]  null  =  new  LinkedList  <  Chromosome>();  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  null  =  new  LinkedList  <  Chromosome>();  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	null  =  new  LinkedList  <  Chromosome>();  this.chromosomes  =  new  LinkedList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
76	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
78	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
80	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
81	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(0);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(0);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(0);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
82	[BUG]  [BUGGY]  Final  int  populationLimit  =  chromosomes.size();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  Final  int  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	Final  int  populationLimit  =  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    2;    	non-compiled	[CE]  not  a  statement	41	None	replace
83	[BUG]  [BUGGY]  chromosomes  =  new  TreeSet  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  TreeSet  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  TreeSet  <  Chromosome>();	  chromosomes    =    new    LinkedList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  +  1);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  ';'  expected	29	None	replace
85	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if  (chromosomes.size()!=  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	if  (chromosomes.size()!=  populationLimit)  {	  if    (chromosomes.size()    <    =    populationLimit)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	4	replace
86	[BUG]  [BUGGY]  if  (chromosomes.size()!=  populationLimit)  {  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if  (chromosomes.size()!=  populationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if  (chromosomes.size()!=  populationLimit)  {	  if    (chromosomes.size()    <    =    populationLimit)    {    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	4	replace
87	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  it.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	add
88	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Collections.sort(this.chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Collections.sort(this.chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    Collections.sort(this.chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	26	None	add
89	[BUG]  [BUGGY]  if(chromosomes.size()  <  PopulationLimit)  {  [CE]  cannot  find  symbol  PopulationLimit  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes.size()  <  PopulationLimit)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes.size()  <  PopulationLimit)  {	  if    (chromosomes.size()    <    populationLimit)    {    if    (chromosomes.size()    <    PopulationLimit)    {    	non-compiled	[CE]  cannot  find  symbol  PopulationLimit	12	None	replace
90	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
91	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(2);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(2);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
93	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(4);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(4);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(4);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
94	[BUG]  [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(),  chromosomes);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(),  chromosomes);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(),  chromosomes);	  chromosomes    =    Collections.synchronizedList(new    ArrayList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
95	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
96	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
97	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	24	None	add
98	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
99	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList(populationLimit);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newLinkedList(populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newLinkedList(populationLimit);	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
100	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
101	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
102	[BUG]  [BUGGY]  chromosomes.remove(populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes.remove(populationLimit);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes.remove(populationLimit);	  chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
103	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	20	1	add
105	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	20	1	add
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	20	1	add
107	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	20	1	add
108	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	20	None	add
109	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newArrayList(this.populationLimit);	  chromosomes    =    Lists.newArrayList(populationLimit);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
110	[BUG]  [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
111	[BUG]  [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  int  populationLimit  =(chromosomes.size()  <  1)?  0  :  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
112	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>();	  this.chromosomes    =    new    LinkedList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit));  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes.add(new  LinkedList  <  Chromosome>(populationLimit));	  chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
114	[BUG]  [BUGGY]  chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit));  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes.add(new  LinkedHashMap  <  Chromosome>(populationLimit));	  chromosomes.clear();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
115	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  0);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  ';'  expected	29	None	replace
116	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
117	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
118	[BUG]  [BUGGY]  Int  populationLimit  =  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  Int  populationLimit  =  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	Int  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
119	[BUG]  [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(1));  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.synchronizedList(new  ArrayList  <  Chromosome>(1));	  chromosomes    =    Collections.synchronizedList(new    ArrayList    <    Chromosome>());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
120	[BUG]  [BUGGY]  chromosomes  =  Collections.newArrayList(this.populationLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Collections.newArrayList(this.populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Collections.newArrayList(this.populationLimit);	  chromosomes    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
121	[BUG]  [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  2)?  0  :  chromosomes.size();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  final  int  populationLimit  =(chromosomes.size()  <  2)?  0  :  chromosomes.size();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	final  int  populationLimit  =(chromosomes.size()  <  2)?  0  :  chromosomes.size();	  final    int    populationLimit    =    chromosomes.size()    -    2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
122	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList(this.populationLimit);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  Lists.newLinkedList(this.populationLimit);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  Lists.newLinkedList(this.populationLimit);	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
123	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(4);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(4);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(4);	  chromosomes    =    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
124	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  false);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size());    	non-compiled	[CE]  ';'  expected	31	None	replace
125	[BUG]  [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  true);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	int  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  true);	  int    numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,    chromosomes.size());    	non-compiled	[CE]  ';'  expected	31	None	replace
126	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
127	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  it.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  it.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    chromosomes  =  it.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
128	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  ListPopulation(final  List<Chromosome>  chromosomes,  final  int  populationLimit)  {  if  (chromosomes  ==  null)  {  throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;  this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.35355339059327373	71	71	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
