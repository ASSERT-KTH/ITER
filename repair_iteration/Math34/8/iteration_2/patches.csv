bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol  This	51	None	replace
2	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	51	None	replace
3	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  false);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  false);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
4	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    false);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
5	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  true);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,boolean)  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  true);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  true);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,boolean)	54	None	replace
6	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  false,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,boolean,int)  [FE]                      AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  false,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  false,  populationLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,boolean,int)	54	None	replace
7	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.pomulationLimit);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
8	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.pomulationLimit);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	52	1	add
10	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	52	1	add
11	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	52	None	add
12	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	52	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	52	1	add
14	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	52	1	add
15	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
16	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
17	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	compilable	  [FE]  AssertionError  	84	1	replace
19	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	compilable	  [FE]  AssertionError  	84	1	replace
20	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.clear();    this.chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
21	[BUG]  [BUGGY]          this.chromosomes.clear();  this.chromosomes.clear();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    this.chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
22	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.clear();    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
23	[BUG]  [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
24	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
25	[BUG]  [BUGGY]          this.chromosomes.clear();  chromosomes.clear();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
26	[BUG]  [BUGGY]          this.chromosomes.clear();  if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	7	None	add
27	[BUG]  [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(chromosomes.size()  >  populationLimit)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	7	None	add
28	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
29	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>();	  this.chromosomes    =    new    LinkedList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
30	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(chromosomes);    this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
31	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  this.chromosomes.addAll(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
32	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(chromosomes);    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
33	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
34	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(!chromosomes.isEmpty())  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(chromosomes);    if(!chromosomes.isEmpty())  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
35	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(!chromosomes.isEmpty())  {  this.chromosomes.addAll(chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(!chromosomes.isEmpty())  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(!chromosomes.isEmpty())  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
36	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
37	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	7	add
38	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	1	None	add
39	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length,  populationLimit);  [CE]  cannot  find  symbol  length  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length,  populationLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.length);    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
40	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size);  [CE]  cannot  find  symbol  size  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.length);    	non-compiled	[CE]  cannot  find  symbol  size	64	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	36	1	add
42	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	36	1	add
43	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	36	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	36	1	add
45	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	36	1	add
46	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  This  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	36	None	add
47	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    This.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  cannot  find  symbol  This	39	None	replace
48	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	int  numberLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    2;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	95	7	replace
49	[BUG]  [BUGGY]  int  numberLimit  =  chromosomes.size();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  int  numberLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  numberLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    2;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	95	7	replace
50	[BUG]  [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  Integer  populationLimit  =  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	Integer  populationLimit  =  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    2;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	95	None	replace
51	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  true);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit,  true);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	43	1	replace
53	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	43	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	43	1	replace
55	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	43	1	replace
56	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit,  populationLimit);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit,  populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit,  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
57	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>(this.populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
58	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	14	None	replace
59	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
60	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]                      AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size(),  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	14	None	replace
61	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes.removeAll(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes.removeAll(chromosomes);	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
62	[BUG]  [BUGGY]  this.chromosomes.removeAll(chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes.removeAll(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes.removeAll(chromosomes);	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
63	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
64	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes);	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	13	None	replace
65	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  2);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
66	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size(),  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
67	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size()  -  1);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
68	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    	non-compiled	[CE]  cannot  find  symbol  This	94	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	74	1	add
70	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	74	1	add
71	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	74	None	add
72	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	74	None	add
73	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	new  ArrayList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	47	7	replace
74	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	new  ArrayList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	47	7	replace
75	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  new  LinkedList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  new  LinkedList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  new  LinkedList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
76	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
77	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
78	[BUG]  [BUGGY]  chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
79	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  false);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	62	None	replace
80	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  true);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  true);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
81	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit,  false);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>(populationLimit,  false);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit,    false);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
82	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
83	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
84	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
85	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
86	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.addAll(this.chromosomes);    synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
87	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    synchronized(this.chromosomes)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
88	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes  ==  null)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.addAll(this.chromosomes);    if(this.chromosomes  ==  null)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
89	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes  ==  null)  {  chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes  ==  null)  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    if(this.chromosomes  ==  null)  {  chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
90	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
91	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    chromosomes.removeAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
92	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	81	3	add
93	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  this.populationLimit  =  populationLimit;  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();  this.populationLimit  =  populationLimit;	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	81	3	add
94	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	chromosomes.clear();    this.populationLimit    =    populationLimit;    if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	81	3	add
95	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	81	3	add
96	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	81	3	add
97	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	81	3	add
98	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    if(!chromosomes.isEmpty())  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	81	None	add
99	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    if(chromosomes.size()  >  populationLimit)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	81	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	42	1	add
101	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	42	1	add
102	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	42	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	42	1	add
104	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	42	1	add
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	42	1	add
106	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	42	1	add
107	[BUG]  [BUGGY]  chromosomes.addAll(this.populations,  populationLimit);  [CE]  cannot  find  symbol  populations  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.addAll(this.populations,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.addAll(this.populations,  populationLimit);	  chromosomes.addAll(this.populations);    	non-compiled	[CE]  cannot  find  symbol  populations	66	None	replace
108	[BUG]  [BUGGY]  chromosomes.addAll(this.populations,  this.populationLimit);  [CE]  cannot  find  symbol  populations  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.addAll(this.populations,  this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.addAll(this.populations,  this.populationLimit);	  chromosomes.addAll(this.populations);    	non-compiled	[CE]  cannot  find  symbol  populations	66	None	replace
109	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol  This	25	None	replace
110	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	compilable	  [FE]  AssertionError  	24	1	add
112	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	compilable	  [FE]  AssertionError  	24	1	add
113	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	24	None	add
114	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	24	None	add
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	compilable	  [FE]  AssertionError  	24	1	add
116	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  	compilable	  [FE]  AssertionError  	24	1	add
117	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  true,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,boolean,int)  [FE]                      AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  true,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  true,  populationLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    true);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,boolean,int)	56	None	replace
118	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,boolean)  [FE]                        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true,  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    true);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,boolean)	56	None	replace
119	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	38	None	replace
120	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
121	[BUG]  [BUGGY]  chromosomes.addAll(this,  populationLimit);  [CE]  no  suitable  method  found  for  addAll(ListPopulation,int)  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.addAll(this,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.addAll(this,  populationLimit);	          chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation,int)	76	None	replace
122	[BUG]  [BUGGY]  chromosomes.addAll(this.populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.addAll(this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.addAll(this.populationLimit);	          chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	76	None	replace
123	[BUG]  [BUGGY]  chromosomes.addAll(populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.addAll(populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.addAll(populationLimit);	          chromosomes.addAll(this);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	76	None	replace
124	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  numberCount);  [CE]  cannot  find  symbol  numberCount  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  numberCount);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  numberCount);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populations);    	non-compiled	[CE]  cannot  find  symbol  numberCount	73	None	replace
125	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  datasets);  [CE]  cannot  find  symbol  datasets  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  datasets);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  datasets);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populations);    	non-compiled	[CE]  cannot  find  symbol  datasets	73	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	15	1	add
127	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	15	1	add
128	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	15	None	add
129	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol  This	15	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	15	1	add
131	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	15	1	add
132	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);	  chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
133	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);	  chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
134	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	5	add
135	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	5	add
136	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	21	None	add
137	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	5	add
138	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	5	add
139	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	5	add
140	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  2);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	21	5	add
141	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(this.populationLimit,  populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(this.populationLimit,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(this.populationLimit,  populationLimit);	          this.chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	90	None	replace
142	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(populationLimit);	          this.chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	90	None	replace
143	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(chromosomes);  [CE]  cannot  find  symbol  Lists  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(chromosomes);	          this.chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	90	None	replace
144	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(chromosomes.size());  [CE]  cannot  find  symbol  Lists  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(chromosomes.size());	          this.chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	90	None	replace
145	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  numberLimit);  [CE]  cannot  find  symbol  numberLimit  [FE]                        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  numberLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  numberLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationsLimit);    	non-compiled	[CE]  cannot  find  symbol  numberLimit	57	None	replace
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	48	1	add
147	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	48	1	add
148	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	48	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
150	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
151	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	48	None	add
152	[BUG]  [BUGGY]  this.chromosomes  =  Collections.newArrayList();  [CE]  cannot  find  symbol  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Collections.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Collections.newArrayList();	  this.chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
153	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(this.chromosomes);  [CE]  cannot  find  symbol  Lists  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(this.chromosomes);	  this.chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	80	None	replace
154	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(0);  [CE]  cannot  find  symbol  Lists  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(0);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(0);	  this.chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	80	None	replace
155	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
156	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]                AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit,  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	12	None	replace
157	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	71	7	replace
158	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	71	7	replace
159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  AssertionError  	71	1	replace
160	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  AssertionError  	71	1	replace
161	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	34	1	add
162	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	34	1	add
163	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	34	None	add
164	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	non-compiled	[CE]  cannot  find  symbol  This	34	None	add
165	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	78	7	replace
166	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	78	7	replace
167	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
168	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	78	5	replace
169	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	78	5	replace
170	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	78	7	replace
171	[BUG]  [BUGGY]  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	78	7	replace
172	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	chromosomes.removeAll(this.chromosomes);	          chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	6	7	replace
173	[BUG]  [BUGGY]  chromosomes.removeAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.removeAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.removeAll(this.chromosomes);	          chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	6	7	replace
174	[BUG]  [BUGGY]  chromosomes.add(this.populationLimit);  [CE]  no  suitable  method  found  for  add(int)  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.add(this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.add(this.populationLimit);	          chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	6	None	replace
175	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
176	[BUG]  [BUGGY]  chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
177	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size()  -  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	93	1	add
179	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	93	1	add
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	93	1	add
181	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	93	1	add
182	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes  >=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes  >=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    if(chromosomes  >=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	93	None	add
183	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  If(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  If(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    If(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	non-compiled	[CE]  ';'  expected	93	None	add
184	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  false);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)	83	None	replace
185	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int)	83	None	replace
186	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
187	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	53	7	replace
188	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	53	7	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	53	1	replace
190	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	53	1	replace
191	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
192	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
193	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
194	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
195	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(!this.chromosomes.isEmpty())  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(this.chromosomes);    if(!this.chromosomes.isEmpty())  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
196	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(!this.chromosomes.isEmpty())  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(!this.chromosomes.isEmpty())  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(!this.chromosomes.isEmpty())  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
197	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(!this.chromosomes.contains(populationLimit))  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(this.chromosomes);    if(!this.chromosomes.contains(populationLimit))  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
198	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(!this.chromosomes.contains(populationLimit))  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(!this.chromosomes.contains(populationLimit))  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(!this.chromosomes.contains(populationLimit))  {  this.chromosomes.addAll(this.chromosomes);  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
199	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
200	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	9	7	add
201	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  Lists.newArrayList(this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newArrayList(this.populationLimit);	  chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	65	None	replace
202	[BUG]  [BUGGY]  chromosomes  =  Collections.newArrayList();  [CE]  cannot  find  symbol  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  Collections.newArrayList();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Collections.newArrayList();	  chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
203	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(0);  [CE]  cannot  find  symbol  Lists  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  Lists.newArrayList(0);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newArrayList(0);	  chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	65	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	68	1	add
205	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	68	1	add
206	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
207	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
208	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	68	1	add
209	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	68	1	add
210	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	19	1	add
212	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	19	1	add
213	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	19	None	add
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	19	1	add
215	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	19	1	add
216	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol  This	19	None	add
217	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
218	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
219	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(!chromosomes.isEmpty())  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
220	[BUG]  [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(!chromosomes.isEmpty())  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(!chromosomes.isEmpty())  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
221	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
222	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
223	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
224	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
225	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
226	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
227	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
228	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
229	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	31	1	add
230	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	31	1	add
231	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	31	None	add
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	31	1	add
233	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	31	1	add
234	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit,  false);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit,  false);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,boolean)	31	None	add
235	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	new  ArrayList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	20	7	replace
236	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	new  ArrayList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	20	7	replace
237	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	20	7	replace
238	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	20	7	replace
239	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	20	7	replace
240	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	20	7	replace
241	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  AssertionError  	69	1	replace
242	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  AssertionError  	69	1	replace
243	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	  if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
244	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
245	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes.addAll(chromosomes);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  else  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
246	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  int  populationLimit  =  this.chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  populationLimit  =  this.chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	58	None	replace
247	[BUG]  [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  int  populationLimit  =  this.chromosomes.size()  -  1;  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  populationLimit  =  this.chromosomes.size()  -  1;	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	58	None	replace
248	[BUG]  [BUGGY]  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    List    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	72	None	replace
249	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
250	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <	  	non-compiled	[CE]  illegal  start  of  type	70	None	add
251	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	70	1	add
252	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	70	1	add
253	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <	  	non-compiled	[CE]  illegal  start  of  type	70	None	add
254	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chrom  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chrom  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chrom	  	non-compiled	[CE]  >  expected	70	None	add
255	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  it.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  it.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  it.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	77	None	add
256	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	77	None	add
257	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	77	None	add
258	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  it.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  it.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  it.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	77	None	add
259	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  variable  it  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	77	None	add
260	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1,  populationLimit);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1,  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	49	1	replace
262	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	49	1	replace
263	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	49	1	replace
264	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	49	1	replace
265	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	18	1	replace
266	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	18	1	replace
267	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	16	7	replace
268	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	16	7	replace
269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	16	1	replace
270	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	16	1	replace
271	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	new  ArrayList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	32	7	replace
272	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	new  ArrayList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	32	7	replace
273	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  LinkedList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  LinkedList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  new  LinkedList  <  Chromosome>(this.populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
274	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	new  ArrayList  <  Chromosome>(populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	32	7	replace
275	[BUG]  [BUGGY]  new  ArrayList  <  Chromosome>(populationLimit);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	new  ArrayList  <  Chromosome>(populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	32	7	replace
276	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
277	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	40	1	add
279	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	40	1	add
280	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	40	None	add
281	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	40	1	add
282	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	40	1	add
283	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	40	1	add
284	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	40	1	add
285	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]                AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	61	None	replace
286	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  false);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
287	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  true);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit,  true);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	27	1	add
289	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	27	1	add
290	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	27	None	add
291	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	27	1	add
292	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	27	1	add
293	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	27	1	add
294	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	27	1	add
295	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	2	7	replace
296	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	2	7	replace
297	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	2	7	replace
298	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	2	7	replace
299	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	2	7	replace
300	[BUG]  [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes.addAll(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	2	7	replace
301	[BUG]  [BUGGY]  this.chromosomes.addAll(this.populationLimit);  [CE]  no  suitable  method  found  for  addAll(int)  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes.addAll(this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes.addAll(this.populationLimit);	          this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(int)	2	None	replace
302	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	3	3	add
303	[BUG]  [BUGGY]          chromosomes.clear();  chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	3	3	add
304	[BUG]  [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [CE]  cannot  find  symbol  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
305	[BUG]  [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [CE]  cannot  find  symbol  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
306	[BUG]  [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomes.clear();  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  this.chromosomes.clear();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
307	[BUG]  [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [CE]  cannot  find  symbol  [FE]            java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    int  chromosomesLimit  =  numberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  populationLimit,  false);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
308	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	46	1	add
309	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	46	1	add
310	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	46	None	add
311	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	46	1	add
312	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	46	1	add
313	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  This  [FE]          AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  cannot  find  symbol  This	46	None	add
314	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  This  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  cannot  find  symbol  This	91	None	replace
315	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
316	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
317	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chrom  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chrom  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chrom	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
318	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chrom  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chrom  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chrom	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	20	1	replace
320	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	20	1	replace
321	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);	  	compilable	  [FE]  AssertionError  	24	1	add
322	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  2);	  	compilable	  [FE]  AssertionError  	24	1	add
323	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	74	1	add
324	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	74	1	add
325	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  AssertionError  	78	1	replace
326	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator    <    Chromosome>    it    =    chromosomes.iterator();    	compilable	  [FE]  AssertionError  	78	1	replace
327	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  Lists.newArrayList(populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newArrayList(populationLimit);	  chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	65	None	replace
328	[BUG]  [BUGGY]  chromosomes.add(0,  this.chromosomes);  [CE]  no  suitable  method  found  for  add(int,List<Chromosome>)  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.add(0,  this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.add(0,  this.chromosomes);	          chromosomes.addAll(this.chromosomes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,List<Chromosome>)	6	None	replace
329	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
330	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
331	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
332	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
333	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	81	None	add
334	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes  ==  null)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes  ==  null)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    if(chromosomes  ==  null)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	81	None	add
335	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  final  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(chromos  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  final  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(chromos  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  final  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>(chromos	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  ')'  expected	17	None	replace
336	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.remove(this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	chromosomes.remove(this.populationLimit);	          chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	4	6	replace
337	[BUG]  [BUGGY]  chromosomes.remove(this.populationLimit);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.remove(this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.remove(this.populationLimit);	          chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	4	6	replace
338	[BUG]  [BUGGY]  chromosomes.removeAll(this);  [CE]  no  suitable  method  found  for  removeAll(ListPopulation)  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.removeAll(this);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.removeAll(this);	          chromosomes.clear();    	non-compiled	[CE]  no  suitable  method  found  for  removeAll(ListPopulation)	4	None	replace
339	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	16	1	replace
340	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	16	1	replace
341	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	15	1	add
342	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	15	1	add
343	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	15	1	add
344	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	15	1	add
345	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	1	None	add
346	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }  [CE]  cannot  find  symbol  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
347	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  Lists.newArrayList();  }  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  Lists.newArrayList();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  Lists.newArrayList();  }	  	non-compiled	[CE]  cannot  find  symbol  Lists	1	None	add
348	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	32	1	replace
349	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	32	1	replace
350	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	32	1	replace
351	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	32	1	replace
352	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
353	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationL  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationL	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
354	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
355	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	31	1	add
356	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	31	1	add
357	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	18	1	replace
359	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	18	1	replace
360	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
361	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
362	[BUG]  [BUGGY]          this.chromosomes.clear();  if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(chromosomes!=  null)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	7	None	add
363	[BUG]  [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(this.chromosomes!=  null)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	7	None	add
364	[BUG]  [BUGGY]          this.chromosomes.clear();  if(chromosomes  ==  null)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(chromosomes  ==  null)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(chromosomes  ==  null)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	7	None	add
365	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  	compilable	  [FE]  AssertionError  	40	1	add
366	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  	compilable	  [FE]  AssertionError  	40	1	add
367	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	47	1	replace
368	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	47	1	replace
369	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	47	1	replace
370	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	47	1	replace
371	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  null);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,<null>)  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  null);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  null);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populations);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,<null>)	73	None	replace
372	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  dataNodes);  [CE]  cannot  find  symbol  dataNodes  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  dataNodes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  dataNodes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populations);    	non-compiled	[CE]  cannot  find  symbol  dataNodes	73	None	replace
373	[BUG]  [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  This	30	None	replace
374	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	53	1	replace
375	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	53	1	replace
376	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	53	7	replace
377	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	53	7	replace
378	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
379	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
380	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
381	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
382	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
383	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
384	[BUG]  [BUGGY]  if(!chromosomes.isEmpty())  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(!chromosomes.isEmpty())  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(!chromosomes.isEmpty())  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
385	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	50	None	replace
386	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	50	None	replace
387	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	51	7	replace
388	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	51	7	replace
389	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	51	1	replace
390	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes    =    new    ArrayList    <    Chromosome>();    	compilable	  [FE]  AssertionError  	51	1	replace
391	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	compilable	  [FE]  AssertionError  	35	1	replace
392	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	compilable	  [FE]  AssertionError  	35	1	replace
393	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	52	1	add
394	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	52	1	add
395	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit  +  1);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
396	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(this.populationLimit  +  1);  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(this.populationLimit  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(this.populationLimit  +  1);	          this.chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	90	None	replace
397	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.length);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.length);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.length);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.length);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
398	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
399	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
400	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [CE]  not  a  statement  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  Exception:  Unexpected  exception;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  Exception:  Unexpected  exception;  }	  	non-compiled	[CE]  not  a  statement	9	None	add
401	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  Lists.newArrayList();  }  [CE]  cannot  find  symbol  Lists  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  Lists.newArrayList();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  Lists.newArrayList();  }	  	non-compiled	[CE]  cannot  find  symbol  Lists	9	None	add
402	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }  [CE]  cannot  find  symbol  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes  =  new  LinkedList  <  Chromosome>();  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
403	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  	compilable	  [FE]  AssertionError  	34	1	add
404	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  	compilable	  [FE]  AssertionError  	34	1	add
405	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	28	1	replace
406	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	28	1	replace
407	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	28	1	replace
408	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	28	1	replace
409	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	28	7	replace
410	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	28	7	replace
411	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [CE]  cannot  find  symbol  This  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  	non-compiled	[CE]  cannot  find  symbol  This	21	None	add
412	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes.clear();  }	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
413	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes.clear();  }	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
414	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [CE]  ')'  expected  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE	          this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	8	None	replace
415	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
416	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE);  }	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
417	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	71	7	replace
418	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	71	7	replace
419	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  chromosomes);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,List<Chromosome>)  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  chromosomes);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,List<Chromosome>)	54	None	replace
420	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  This	27	None	add
421	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	non-compiled	[CE]  cannot  find  symbol  This	77	None	add
422	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	77	1	add
423	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        Iterator    <    Chromosome>    it    =    chromosomes.iterator();    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	77	1	add
424	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList(this.populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  Lists.newLinkedList(this.populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newLinkedList(this.populationLimit);	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  cannot  find  symbol  Lists	67	None	replace
425	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList(populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  Lists.newLinkedList(populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newLinkedList(populationLimit);	  chromosomes    =    Lists.newLinkedList();    	non-compiled	[CE]  cannot  find  symbol  Lists	67	None	replace
426	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
427	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	45	1	replace
428	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	45	1	replace
429	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [CE]  cannot  find  symbol  This  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    This.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol  This	45	None	replace
430	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.addAll(this.chromosomes);  }  [CE]  cannot  find  symbol  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  chromosomes  =  new  LinkedList  <  Chromosome>();  chromosomes.addAll(this.chromosomes);  }	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
431	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes.addAll(this.chromosomes);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes.addAll(this.chromosomes);  }	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	5	None	add
432	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes  =  new  LinkedList  <  Chromosome>();  }  else  {  chromosomes.addAll(this.chromosomes);  }  [CE]  cannot  find  symbol  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  chromosomes  =  new  LinkedList  <  Chromosome>();  }  else  {  chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  chromosomes  =  new  LinkedList  <  Chromosome>();  }  else  {  chromosomes.addAll(this.chromosomes);  }	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
433	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.pomulationLimit);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
434	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    List    <    Chromosome>    chromosomes    =    new    ArrayList    <    Chromosome>();    }    	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	72	None	replace
435	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
436	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
437	[BUG]  [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(chromosome  [CE]  ')'  expected  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(chromosome  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(chromosome	  	non-compiled	[CE]  ')'  expected	3	None	add
438	[BUG]  [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(  [CE]  ')'  expected  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(	  	non-compiled	[CE]  ')'  expected	3	None	add
439	[BUG]  [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [CE]  not  a  statement  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size()  >  0;)  {  chromosomes.clear();  }	  	non-compiled	[CE]  not  a  statement	3	None	add
440	[BUG]  [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(!  [CE]  ')'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(!  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.hasMore();)  {  Chromosome  chromosome  =(Chromosome)chromosomes.get(populationLimit);  if(!	  	non-compiled	[CE]  ')'  expected	3	None	add
441	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NullArgumentException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  ')'  expected	2	None	replace
442	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
443	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
444	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>()  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>()  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>()	  	non-compiled	[CE]  ';'  expected	70	None	add
445	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	44	None	replace
446	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	42	1	add
447	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	42	1	add
448	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes  ==  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
449	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	82	7	replace
450	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	          this.chromosomes.clear();    	non-compiled	[CE]  ')'  expected	8	None	replace
451	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
452	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }	          this.chromosomes.clear();    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
453	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
454	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size()  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
455	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  0);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,int)  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  0);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false,  0);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    false);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean,int)	54	None	replace
456	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
457	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.chromosomes.size());	  chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	14	None	replace
458	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.clear();    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
459	[BUG]  [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
460	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.clear();    if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
461	[BUG]  [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
462	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes.clear();    if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
463	[BUG]  [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.clear();  if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.clear();    if(this.chromosomes!=  null)  {  this.chromosomes.clear();  }  else  {  this.chromosomes.clear();  }	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
464	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
465	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
466	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	29	None	replace
467	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	29	None	replace
468	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	29	None	replace
469	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	52	1	add
470	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	52	1	add
471	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chrom  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chrom  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chrom	  	non-compiled	[CE]  >  expected	52	None	add
472	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
473	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
474	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  this.exception  =  null;  }  [CE]  cannot  find  symbol  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  if(chromosomes.size()  >  populationLimit)  {  this.exception  =  null;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();    this.populationLimit    =    populationLimit;    if(chromosomes.size()  >  populationLimit)  {  this.exception  =  null;  }	  	non-compiled	[CE]  cannot  find  symbol  exception	81	None	add
475	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit,  true);  [CE]  cannot  find  symbol  populationsLimit  [FE]                      AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit,  true);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit,  true);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit,    true);    	non-compiled	[CE]  cannot  find  symbol  populationsLimit	56	None	replace
476	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newArrayListWithCapacity(populationLimit);	  chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	65	None	replace
477	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	15	1	add
478	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	15	1	add
479	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  ')'  expected  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes.addAll(chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	          this.chromosomes.addAll(chromosomes);    	non-compiled	[CE]  ')'  expected	2	None	replace
480	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  allPositions);  [CE]  cannot  find  symbol  allPositions  [FE]                  AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  allPositions);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  allPositions);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populations);    	non-compiled	[CE]  cannot  find  symbol  allPositions	73	None	replace
481	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  dataContext);  [CE]  cannot  find  symbol  dataContext  [FE]                    AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  dataContext);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  dataContext);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populations);    	non-compiled	[CE]  cannot  find  symbol  dataContext	73	None	replace
482	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
483	[BUG]  [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.addAll(this.chromosomes);  chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.addAll(this.chromosomes);    chromosomes.addAll(this.chromosomes);  this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	7	add
484	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes  ==  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(this.chromosomes  ==  null)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
485	[BUG]  [BUGGY]  if(this.chromosomes  ==  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.chromosomes  ==  null)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.chromosomes  ==  null)  {  this.chromosomes.addAll(this.chromosomes);  }	          this.chromosomes.addAll(this.chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	10	7	replace
486	[BUG]  [BUGGY]  chromosomes.addAll(this,  new  Chromosome(populationLimit));  [CE]  Chromosome  is  abstract;  cannot  be  instantiated  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes.addAll(this,  new  Chromosome(populationLimit));  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.addAll(this,  new  Chromosome(populationLimit));	          chromosomes.addAll(this);    	non-compiled	[CE]  Chromosome  is  abstract;  cannot  be  instantiated	76	None	replace
487	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  	non-compiled	[CE]  ')'  expected	9	None	add
488	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(this.chromosomes);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(this.chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(this.chromosomes);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
489	[BUG]  [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [CE]  ')'  expected  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(this.chromosomes);  if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(this.chromosomes);    if(this.chromosomes!=  null)  {  this.chromosomes.addAll(this.chromosomes);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN	  	non-compiled	[CE]  ')'  expected	9	None	add
490	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES  [CE]  ')'  expected  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    -    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  *  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  *  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	compilable	  [FE]  AssertionError  	35	1	replace
492	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  *  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  *  2);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  *  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	compilable	  [FE]  AssertionError  	35	1	replace
493	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
494	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
495	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
496	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	48	1	add
497	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
498	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
499	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	27	1	add
500	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	27	1	add
501	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
502	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList(populationLimit,  populationLimit);	          this.chromosomes    =    Lists.newArrayList(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol  Lists	90	None	replace
503	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
504	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
505	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit,  true);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int,boolean)	83	None	replace
506	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  this.populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  this.populationLimit);  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  this.populationLimit);	  chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	83	None	replace
507	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	47	1	replace
508	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	47	1	replace
509	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	47	7	replace
510	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	47	7	replace
511	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(this.populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
512	[BUG]  [BUGGY]          this.chromosomes.addAll(chromosomes);  if(populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes.addAll(chromosomes);  if(populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes.addAll(chromosomes);    if(populationLimit  <  =  0)  {  this.chromosomes.addAll(chromosomes);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
513	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  chromosomes  =  new  ArrayList  <  Chromosome>();  }	          this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	50	None	replace
514	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	3	7	add
515	[BUG]  [BUGGY]          chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  chromosomes.clear();  this.chromosomes.clear();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    chromosomes.clear();  this.chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	3	7	add
516	[BUG]  [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]      java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes!=  null;  chromosomes.size())  {  chromosomes.clear();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	3	None	add
517	[BUG]  [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes.size()  <  populationLimit;)  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes.size()  <  populationLimit;)  {  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes.size()  <  populationLimit;)  {  chromosomes.clear();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	3	None	add
518	[BUG]  [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes.size()  >  populationLimit;)  {  chromosomes.clear();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  0    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          chromosomes.clear();  for(int  chromosomes  =  0;  chromosomes.size()  >  populationLimit;)  {  chromosomes.clear();  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                chromosomes.clear();    for(int  chromosomes  =  0;  chromosomes.size()  >  populationLimit;)  {  chromosomes.clear();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	3	None	add
519	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  	compilable	  [FE]  AssertionError  	40	1	add
520	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(populationLimit        +        1);        this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  3);	  	compilable	  [FE]  AssertionError  	40	1	add
521	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new	  	non-compiled	[CE]  <identifier>  expected	70	None	add
522	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
523	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
524	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit    +    1);    if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
525	[BUG]  [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
526	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
527	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	19	1	add
528	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes.size());        new    ArrayList    <    Chromosome>(chromosomes.size());    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  }	  	compilable	  [FE]  AssertionError  	19	1	add
529	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
530	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  }  else  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes    =    new    TreeList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
531	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  populationLimit  =(chromosomes.size()  <  1)?  populationLimit  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	58	None	replace
532	[BUG]  [BUGGY]  int  populationLimit  =(chromosomes.size()  >  populationLimit)?  0  :  chromosomes.size();  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  int  populationLimit  =(chromosomes.size()  >  populationLimit)?  0  :  chromosomes.size();  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  populationLimit  =(chromosomes.size()  >  populationLimit)?  0  :  chromosomes.size();	  int    populationLimit    =    chromosomes.size()    -    1;    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	58	None	replace
533	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newLinkedList();  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  Lists.newLinkedList();  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newLinkedList();	  this.chromosomes    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	80	None	replace
534	[BUG]  [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  TreeSet  <  Chromosome>(chromosomes.size());  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  TreeSet  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
535	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
536	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(this.populationLimit  <  =  0)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  chromosomes.clear();  this.populationLimit  =  populationLimit;  }	  chromosomes.clear();    this.populationLimit    =    populationLimit;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
537	[BUG]  [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes.size()  >  populationLimit)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
538	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPUL  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPUL  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit);  if(this.populationLimit  <  =  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPUL	          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit    <    =    0)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    }    else    {    throw    new    NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
539	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes	  	non-compiled	[CE]  not  a  statement	68	None	add
540	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes.addAll(	  	non-compiled	[CE]  ')'  expected	68	None	add
541	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>();        if(chromosomes    ==    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    else    {    this.chromosomes    =    new    ArrayList    <    Chromosome>();    }    this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <	  	non-compiled	[CE]  illegal  start  of  type	68	None	add
542	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  List  <  Chromosome>(chromosomes);  }  [CE]  List  is  abstract;  cannot  be  instantiated  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  List  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    if(chromosomes!=  null)  {  this.chromosomes  =  new  List  <  Chromosome>(chromosomes);  }	  	non-compiled	[CE]  List  is  abstract;  cannot  be  instantiated	93	None	add
543	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  if(chromosomes!=  null)  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=    null)    {    this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    }    if(chromosomes!=  null)  {  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  }	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
544	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit,  false);  [CE]  cannot  find  symbol  populationsLimit  [FE]                        AssertionError      [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit,  false);  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit,  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationsLimit);    	non-compiled	[CE]  cannot  find  symbol  populationsLimit	57	None	replace
545	[BUG]  [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
546	[BUG]  [BUGGY]  if(populationLimit  <  =  1)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  if(populationLimit  <  =  1)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(populationLimit  <  =  1)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
547	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	31	1	add
548	[BUG]  [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]          this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]      this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	                this.chromosomes        =        new        ArrayList        <        Chromosome>(this.populationLimit);        new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	compilable	  [FE]  AssertionError  	31	1	add
549	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	46	1	add
550	[BUG]  [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;      [BUGGY]  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]      this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes        =        new        ArrayList        <        Chromosome>(chromosomes);        new    ArrayList    <    Chromosome>(chromosomes);    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  }	  	compilable	  [FE]  AssertionError  	46	1	add
