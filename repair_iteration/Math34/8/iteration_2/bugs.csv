bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes.addAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
2	[BUG]  [BUGGY]      this.chromosomes.addAll(chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes.addAll(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes.addAll(chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
3	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	7	3	add
4	[BUG]  [BUGGY]      chromosomes.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        chromosomes.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  	7	3	add
5	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
6	[BUG]  [BUGGY]      chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
7	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
8	[BUG]  [BUGGY]      this.chromosomes.clear();  [FE]  java.lang.Exception:  Unexpected  exception  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes.clear();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes.clear();	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
9	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
10	[BUG]  [BUGGY]      this.chromosomes.addAll(this.chromosomes);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes.addAll(this.chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes.addAll(this.chromosomes);	  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	7	7	add
11	[BUG]  [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
12	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	9	None	replace
13	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]            AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	9	None	replace
14	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]              AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	9	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	4	1	add
16	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	4	1	add
17	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	4	None	add
18	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol  This	4	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	4	1	add
20	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  new  ArrayList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    new  ArrayList  <  Chromosome>(chromosomes.size());	  	compilable	  [FE]  AssertionError  	4	1	add
21	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	5	replace
22	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [FE]  java.lang.Exception:  Unexpected  exception  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  -  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	5	5	replace
23	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes.size());	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	5	1	replace
25	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size()  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    	compilable	  [FE]  AssertionError  	5	1	replace
26	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>();	      this.chromosomes    =    new    ArrayList    <    Chromosome>();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	10	1	add
28	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	10	1	add
29	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	10	None	add
30	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    This.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  This	10	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	10	1	add
32	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  new  ArrayList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    new  ArrayList  <  Chromosome>(this.populationLimit);	  	compilable	  [FE]  AssertionError  	10	1	add
33	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit  +  1);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	compilable	  [FE]  AssertionError  	15	1	replace
35	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    	compilable	  [FE]  AssertionError  	15	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	14	1	add
37	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	compilable	  [FE]  AssertionError  	14	1	add
38	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	14	None	add
39	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    This.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	14	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	14	1	add
41	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  1);  this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit    +    1);    this.chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit  +  2);	  	compilable	  [FE]  AssertionError  	14	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
43	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
44	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	1	None	add
45	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    This.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  cannot  find  symbol  This	1	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
47	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  new  ArrayList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    new  ArrayList  <  Chromosome>(chromosomes);	  	compilable	  [FE]  AssertionError  	1	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	12	1	add
49	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  this.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    this.chromosomes  =  new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	12	1	add
50	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  final  parameter  chromosomes  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  final  parameter  chromosomes  may  not  be  assigned	12	None	add
51	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  This.chromosomes  =  new  ArrayList  <  Chromosome>();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    This.chromosomes  =  new  ArrayList  <  Chromosome>();	  	non-compiled	[CE]  cannot  find  symbol  This	12	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	12	1	add
53	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  new  ArrayList  <  Chromosome>();  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    new  ArrayList  <  Chromosome>();	  	compilable	  [FE]  AssertionError  	12	1	add
54	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean)  [FE]              AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  false);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean)	6	None	replace
55	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes,  populationLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
56	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true);  [CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean)  [FE]                  AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationLimit,  true);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(List<Chromosome>,int,boolean)	6	None	replace
57	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit);  [CE]  cannot  find  symbol  populationsLimit  [FE]                    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populationsLimit);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol  populationsLimit	6	None	replace
58	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  populationLimit  =  chromosomes.size()  -  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	16	None	replace
59	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  int  populationLimit  =  chromosomes.size()  +  1;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  populationLimit  =  chromosomes.size()  +  1;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	16	None	replace
60	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(chromosomes);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
61	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  populationLimit);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
62	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(populationLimit,  false);	  this.chromosomes    =    new    LinkedList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  LinkedList  <  Chromosome>(this.populationLimit);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
64	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);  [CE]  cannot  find  symbol  length  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.length);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
65	[BUG]  [BUGGY]  chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes  =  Lists.newArrayList();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newArrayList();	      	non-compiled	[CE]  cannot  find  symbol  Lists	8	None	replace
66	[BUG]  [BUGGY]  chromosomes.addAll(this.populations);  [CE]  cannot  find  symbol  populations  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes.addAll(this.populations);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.addAll(this.populations);	      	non-compiled	[CE]  cannot  find  symbol  populations	8	None	replace
67	[BUG]  [BUGGY]  chromosomes  =  Lists.newLinkedList();  [CE]  cannot  find  symbol  Lists  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes  =  Lists.newLinkedList();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  Lists.newLinkedList();	      	non-compiled	[CE]  cannot  find  symbol  Lists	8	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	12	1	add
69	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	12	1	add
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	12	1	add
71	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	compilable	  [FE]  AssertionError  	12	1	add
72	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  List  <  Chromosome>  chromosomes  =  new  ArrayList  <  Chromosome>();  }	  	non-compiled	[CE]  variable  chromosomes  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	12	None	add
73	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populations);  [CE]  cannot  find  symbol  populations  [FE]              AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populations);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes,  populations);	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes,    populationLimit);    	non-compiled	[CE]  cannot  find  symbol  populations	6	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	11	1	replace
75	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit  +  1);	      this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	compilable	  [FE]  AssertionError  	11	1	replace
76	[BUG]  [BUGGY]      chromosomes.addAll(this);  [CE]  no  suitable  method  found  for  addAll(ListPopulation)  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      chromosomes.addAll(this);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        chromosomes.addAll(this);	  	non-compiled	[CE]  no  suitable  method  found  for  addAll(ListPopulation)	7	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	4	1	add
78	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  Iterator  <  Chromosome>  it  =  chromosomes.iterator();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    Iterator  <  Chromosome>  it  =  chromosomes.iterator();	  	compilable	  [FE]  AssertionError  	4	1	add
79	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.pomulationLimit);  [CE]  cannot  find  symbol  pomulationLimit  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.pomulationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    this.chromosomes  =  new  ArrayList  <  Chromosome>(this.pomulationLimit);	  	non-compiled	[CE]  cannot  find  symbol  pomulationLimit	10	None	add
80	[BUG]  [BUGGY]  this.chromosomes  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  Lists.newArrayList();  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes  =  Lists.newArrayList();	      	non-compiled	[CE]  cannot  find  symbol  Lists	8	None	replace
81	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	chromosomes.clear();  this.populationLimit  =  populationLimit;	      	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
82	[BUG]  [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes.clear();  this.populationLimit  =  populationLimit;  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes.clear();  this.populationLimit  =  populationLimit;	      	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	8	7	replace
83	[BUG]  [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	chromosomes  =  new  ArrayList  <  Chromosome>(populationLimit,  populationLimit);	      chromosomes    =    new    ArrayList    <    Chromosome>(populationLimit);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	9	None	replace
84	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  	non-compiled	[CE]  ')'  expected	12	None	add
85	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>();  if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>();    if(chromosomes  ==  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>();  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION	  	non-compiled	[CE]  ')'  expected	12	None	add
86	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes.size());  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes.size());    this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes.size());	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
87	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
88	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
89	[BUG]  [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  else  {  throw  new  NotPositiveException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPUL	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
90	[BUG]  [BUGGY]      this.chromosomes  =  Lists.newArrayList(this.populationLimit);  [CE]  cannot  find  symbol  Lists  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]      this.chromosomes  =  Lists.newArrayList(this.populationLimit);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	        this.chromosomes  =  Lists.newArrayList(this.populationLimit);	  	non-compiled	[CE]  cannot  find  symbol  Lists	7	None	add
91	[BUG]  [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(this.populationLimit  <  =  0)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(this.populationLimit);  }	      this.chromosomes    =    new    ArrayList    <    Chromosome>(this.populationLimit);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
92	[BUG]  [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    this.chromosomes  =  new  TreeList  <  Chromosome>(chromosomes);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	add	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	2	1	replace
94	[BUG]  [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }  [BUGGY]    this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	if(chromosomes!=  null)  {  this.chromosomes  =  new  ArrayList  <  Chromosome>(chromosomes);  }	  this.chromosomes    =    new    ArrayList    <    Chromosome>(chromosomes);    	compilable	  [FE]  AssertionError  	2	1	replace
95	[BUG]  [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)  [FE]        AssertionError    [CONTEXT]    throw  new  NullArgumentException();  }  if  (populationLimit  <=  0)  {  throw  new  NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE,  populationLimit);  }  if  (chromosomes.size()  >  populationLimit)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,  chromosomes.size(),  populationLimit,  false);  }  this.populationLimit  =  populationLimit;    [BUGGY]  int  populationLimit  =  chromosomes.size()  -  2;  [BUGGY]    this.chromosomes  =  new  ArrayList<Chromosome>(populationLimit);  this.chromosomes.addAll(chromosomes);  }  [CLASS]  ListPopulation  [METHOD]  <init>  [RETURN_TYPE]  List,int)  Chromosome>  chromosomes  final  int  populationLimit  [VARIABLES]  List  chromosomes  int  populationLimit  boolean  	projects/Math34/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java	0.3779644730092272	76	76	1	replace	int  populationLimit  =  chromosomes.size()  -  2;	      int    populationLimit    =    chromosomes.size();    	non-compiled	[CE]  variable  populationLimit  is  already  defined  in  constructor  ListPopulation(List<Chromosome>,int)	16	None	replace
