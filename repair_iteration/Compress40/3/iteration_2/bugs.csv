bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(nextByte!=  0)  {  if(nextByte!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0)  {  if(nextByte!=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0)    {    if(nextByte!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
2	[BUG]  [BUGGY]  if(nextByte!=  0)  {  if(nextByte  >=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0)  {  if(nextByte  >=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0)    {    if(nextByte  >=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
3	[BUG]  [BUGGY]  if(nextByte!=  0)  {  if(nextByte  ==  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0)  {  if(nextByte  ==  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0)    {    if(nextByte  ==  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
4	[BUG]  [BUGGY]  if(nextByte!=  0)  {  if(nextByte  >>  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0)  {  if(nextByte  >>  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0)    {    if(nextByte  >>  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
5	[BUG]  [BUGGY]  if(nextByte!=  0)  {  if(nextByte  [BUGGY]  0)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0)  {  if(nextByte  [BUGGY]  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0)    {    if(nextByte  [BUGGY]  0)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
6	[BUG]  [BUGGY]  if(nextByte!=  0)  {  if(nextByte  [Delete]  0)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0)  {  if(nextByte  [Delete]  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0)    {    if(nextByte  [Delete]  0)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
7	[BUG]  [BUGGY]  if(nextByte!=  0)  {  If(nextByte!=  0)  {  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0)  {  If(nextByte!=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0)    {    If(nextByte!=  0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
8	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
9	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
10	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
11	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
12	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
13	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  ==  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  ==  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    if(nextByte  ==  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
14	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  if(nextByte!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  if(nextByte!=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    if(nextByte!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
15	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  >=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  >=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    if(nextByte  >=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
16	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  If(nextByte  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  If(nextByte  ==  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    If(nextByte  ==  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
17	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  >>  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  >>  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    if(nextByte  >>  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
18	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  [BUGGY]  0)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  [BUGGY]  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    if(nextByte  [BUGGY]  0)  {	  	non-compiled	[CE]  ')'  expected	4	None	add
19	[BUG]  [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  >=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  >=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0)    {    if(nextByte  >=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
20	[BUG]  [BUGGY]  if(nextByte  >=  0)  {  if(nextByte!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0)  {  if(nextByte!=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0)    {    if(nextByte!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
21	[BUG]  [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  >>  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  >>  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0)    {    if(nextByte  >>  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
22	[BUG]  [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  ==  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  ==  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0)    {    if(nextByte  ==  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
23	[BUG]  [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  [BUGGY]  0)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  [BUGGY]  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0)    {    if(nextByte  [BUGGY]  0)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
24	[BUG]  [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  [Delete]  0)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0)  {  if(nextByte  [Delete]  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0)    {    if(nextByte  [Delete]  0)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
25	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
27	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  0)  {	  if(nextByte    >=    0)    {    	compilable	  [FE]  AssertionError  	11	12	replace
29	[BUG]  [BUGGY]  if(nextByte  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  0)  {	  if(nextByte    >=    0)    {    	compilable	  [FE]  AssertionError  	11	12	replace
30	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	2	replace
32	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	2	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
34	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
36	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
38	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
39	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	2	replace
41	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	2	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
43	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	11	replace
45	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	11	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
47	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
48	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  =  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
51	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
52	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
53	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
54	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >  bitscachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >  bitscachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >  bitscachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
55	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	14	None	replace
56	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	14	None	replace
57	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count))  {  [CE]  cannot  find  symbol  Feature  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count))  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	14	None	replace
59	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	14	None	replace
60	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	14	None	replace
61	[BUG]  [BUGGY]  in.defaultReadBits();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  in.defaultReadBits();  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultReadBits();	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
62	[BUG]  [BUGGY]  long  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  long  nextByte  =  in.read();  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	long  nextByte  =  in.read();	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
63	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  bitsCachedSize);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
64	[BUG]  [BUGGY]  bitsOut.read(nextByte);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  bitsOut.read(nextByte);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
65	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  InputStream  in  =  readInputStream(nextByte);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
66	[BUG]  [BUGGY]  bitsOut.read(nextByte);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  bitsOut.read(nextByte);  nextByte  =  in.read();  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte);  nextByte  =  in.read();	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
67	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  InputStream  in  =  getInputStream();  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
68	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	13	None	replace
69	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
70	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	13	None	replace
71	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_SIZE)  {  [CE]  cannot  find  symbol  LITTLE_SIZE  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_SIZE	13	None	replace
72	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	13	None	replace
73	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	13	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte!=    0)    {    	compilable	  [FE]  AssertionError  	7	12	replace
75	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte!=    0)    {    	compilable	  [FE]  AssertionError  	7	12	replace
76	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  {  0)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  if(nextByte  {  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    if(nextByte  {  0)  {	  	non-compiled	[CE]  ')'  expected	4	None	add
77	[BUG]  [BUGGY]  if(nextByte  ==  0)  {  while(nextByte  ==  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0)  {  while(nextByte  ==  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0)    {    while(nextByte  ==  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
79	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
81	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	12	replace
82	[BUG]  [BUGGY]  in.defaultRead(nextByte);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  in.defaultRead(nextByte);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultRead(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
83	[BUG]  [BUGGY]  bitsOut.write(nextByte);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  bitsOut.write(nextByte);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
84	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  InputStream  in  =  readInt(nextByte,  bitsCachedSize);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  bitsCachedSize);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
85	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  bitsCachedSize);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
86	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  InputStream  in  =  readInt(nextByte);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
87	[BUG]  [BUGGY]  in.read(nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  in.read(nextByte);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
88	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
89	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	13	None	replace
90	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	13	None	replace
91	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	13	None	replace
92	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	13	None	replace
93	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	13	None	replace
94	[BUG]  [BUGGY]  if(nextByte  >=  0)  {  If(nextByte  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0)  {  If(nextByte  >=  0)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0)    {    If(nextByte  >=  0)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
95	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
96	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	14	None	replace
97	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  BYTE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  BYTE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	3	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
99	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
100	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	13	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	compilable	  [FE]  AssertionError  	13	8	replace
102	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	compilable	  [FE]  AssertionError  	13	8	replace
103	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	13	None	replace
104	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	14	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0)    {    	compilable	  [FE]  AssertionError  	11	11	replace
106	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0)    {    	compilable	  [FE]  AssertionError  	11	11	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0)    {    	compilable	  [FE]  AssertionError  	11	12	replace
108	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0)    {    	compilable	  [FE]  AssertionError  	11	12	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  nextByte)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  nextByte)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
110	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  nextByte)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  nextByte)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	12	replace
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	2	replace
112	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	2	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	3	replace
114	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	3	3	replace
115	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
116	[BUG]  [BUGGY]  byteOrder  =  in.read(nextByte);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  byteOrder  =  in.read(nextByte);  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.read(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
117	[BUG]  [BUGGY]  bitsOut.write(nextByte);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  bitsOut.write(nextByte);  nextByte  =  in.read();  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte);  nextByte  =  in.read();	      	non-compiled	[CE]  illegal  start  of  type	12	None	replace
118	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME)  {	  if(nextByte    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
119	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  count  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  =  0  ||  count  >  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
120	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	3	replace
122	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	9	3	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    0)    {    	compilable	  [FE]  AssertionError  	7	12	replace
124	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    0)    {    	compilable	  [FE]  AssertionError  	7	12	replace
125	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();    [BUGGY]  if(nextByte!=  0  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]    return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
