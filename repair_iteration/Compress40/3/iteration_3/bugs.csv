bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  nextByte)  {	  if(nextByte    ==    0)    {    if(nextByte    {    0)    {    	compilable	  [FE]  AssertionError  	76	3	replace
2	[BUG]  [BUGGY]  if(nextByte  <  nextByte)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  nextByte)  {	  if(nextByte    ==    0)    {    if(nextByte    {    0)    {    	compilable	  [FE]  AssertionError  	76	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  2)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  2)  {	  if(nextByte    ==    0)    {    if(nextByte    {    0)    {    	compilable	  [FE]  AssertionError  	76	11	replace
4	[BUG]  [BUGGY]  if(nextByte  <  2)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  2)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  2)  {	  if(nextByte    ==    0)    {    if(nextByte    {    0)    {    	compilable	  [FE]  AssertionError  	76	11	replace
5	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    nextByte)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
6	[BUG]  [BUGGY]  if(nextByte  <  =  nextByte)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  nextByte)  {	  if(nextByte    ==    nextByte)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  nextByte)  {	  if(nextByte    ==    nextByte)    {    	compilable	  [FE]  AssertionError  	110	3	replace
8	[BUG]  [BUGGY]  if(nextByte  >  nextByte)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  nextByte)  {	  if(nextByte    ==    nextByte)    {    	compilable	  [FE]  AssertionError  	110	3	replace
9	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  count);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
10	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(bytesCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(bytesCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(bytesCachedSize,  nextByte);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
11	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(bitsCachedSize,  nextByte);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
12	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
13	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  nextByte,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  nextByte,  bitsCachedSize);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
14	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  bitsCachedSize,  nextByte);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
15	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize,  count);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  bitsCachedSize,  count);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	43	12	replace
17	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >=  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	43	12	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	43	12	replace
19	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	43	12	replace
20	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
21	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
22	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	75	11	replace
24	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	75	11	replace
25	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	55	None	replace
26	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	55	None	replace
27	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	55	None	replace
28	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_CACHE_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_CACHE_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_CACHE_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	55	None	replace
29	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    >=    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
30	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    >=    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
31	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    >=    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  nextByte)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    >=    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	52	12	replace
33	[BUG]  [BUGGY]  if(nextByte  >=  nextByte)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  nextByte)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    >=    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	52	12	replace
34	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(nextByte  <  0  ||  nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(nextByte  <  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    0)    {    if(nextByte  <  0  ||  nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
35	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  If(nextByte  <  0  ||  nextByte  >  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  If(nextByte  <  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    0)    {    If(nextByte  <  0  ||  nextByte  >  0)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
36	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(nextByte  >=  0  ||  nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(nextByte  >=  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    0)    {    if(nextByte  >=  0  ||  nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
37	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(NextByte  <  0  ||  nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(NextByte  <  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    0)    {    if(NextByte  <  0  ||  nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
38	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  while(nextByte  <  0  ||  nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  while(nextByte  <  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    0)    {    while(nextByte  <  0  ||  nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
40	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
41	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	2	replace
43	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	2	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  count  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	2	replace
45	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	2	replace
46	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  nextByte.length)  {  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  nextByte.length)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  >  nextByte.length)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	112	None	replace
47	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >=  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
48	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
49	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
50	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  ==  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
51	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
52	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte!=  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte!=  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
53	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  MAXIMUM_CACHE_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  MAXIMUM_CACHE_SIZE))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
54	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count  +  1))  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count  +  1))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count  +  1))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
55	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count  -  1))  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count  -  1))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count  -  1))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
56	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  0,  count))  {  [CE]  cannot  find  symbol  Feature  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  0,  count))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  0,  count))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
57	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  BYTE_ENDIAN))  {  [CE]  cannot  find  symbol  Feature  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  BYTE_ENDIAN))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  BYTE_ENDIAN))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
58	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  bitsCachedSize))  {  [CE]  cannot  find  symbol  Feature  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  bitsCachedSize))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  bitsCachedSize))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
59	[BUG]  [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  bitsCachedSize)  {	  if(nextByte    ==    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  bitsCachedSize)  {	  if(nextByte    ==    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	122	12	replace
61	[BUG]  [BUGGY]  if(nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  bitsCachedSize)  {	  if(nextByte    ==    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	122	12	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  nextByte)  {	  if(nextByte    ==    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	122	3	replace
63	[BUG]  [BUGGY]  if(nextByte!=  nextByte)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  nextByte)  {	  if(nextByte    ==    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	122	3	replace
64	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INTIAN)  {  [CE]  cannot  find  symbol  NUMBER_INTIAN  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INTIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_INTIAN)  {	  if(nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INTIAN	92	None	replace
65	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	92	None	replace
66	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LONG)  {  [CE]  cannot  find  symbol  LONG  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LONG)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LONG)  {	  if(nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  LONG	92	None	replace
67	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  ==  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    bitsCachedSize)    {    if(nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	add
68	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    bitsCachedSize)    {    if(nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	add
69	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    bitsCachedSize)    {    if(nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	add
70	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  >>  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    bitsCachedSize)    {    if(nextByte  >>  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	add
71	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  If(nextByte  ==  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  If(nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    bitsCachedSize)    {    If(nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	121	None	add
72	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  [BUGGY]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(nextByte  [BUGGY]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    bitsCachedSize)    {    if(nextByte  [BUGGY]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	121	None	add
73	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	69	None	replace
74	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	69	None	replace
75	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	69	None	replace
76	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	90	None	replace
77	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SECOND)  {  [CE]  cannot  find  symbol  SECOND  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.SECOND)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SECOND)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	90	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	119	12	replace
79	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  count  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	119	12	replace
80	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  count  >=  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  count  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  count  >=  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
81	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  count  ==  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  count  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  count  ==  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
82	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  final  long  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	final  long  nextByte  =  in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
83	[BUG]  [BUGGY]  long  nextByte  =  in.read(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  long  nextByte  =  in.read(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	long  nextByte  =  in.read(bitsCachedSize);	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
84	[BUG]  [BUGGY]  int  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  int  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	int  nextByte  =  in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
85	[BUG]  [BUGGY]  long  nextByte  =  bitsCachedSize.read();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  long  nextByte  =  bitsCachedSize.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	long  nextByte  =  bitsCachedSize.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
86	[BUG]  [BUGGY]  long  nextByte  =  in.read(bitsCachedSize,  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  long  nextByte  =  in.read(bitsCachedSize,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	long  nextByte  =  in.read(bitsCachedSize,  count);	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
87	[BUG]  [BUGGY]  long  nextByte  =  bitsOut.read();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  long  nextByte  =  bitsOut.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	long  nextByte  =  bitsOut.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
88	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	45	11	replace
90	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	45	11	replace
91	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	72	None	replace
93	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	72	None	replace
94	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	72	None	replace
95	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	72	None	replace
96	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None	replace
97	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	72	None	replace
98	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
99	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
100	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
101	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  count))  {  [CE]  cannot  find  symbol  Feature  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  count))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  count))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
102	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
103	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
104	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
105	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
106	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_S  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_S  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_S	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
107	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
108	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_ENDIAN)  {  [CE]  cannot  find  symbol  FIELD_ENDIAN  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.FIELD_ENDIAN)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_ENDIAN	118	None	replace
109	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.FIELD_SIZE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	118	None	replace
110	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NAME)  {  [CE]  cannot  find  symbol  NAME  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NAME)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NAME)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  NAME	118	None	replace
111	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SECOND_NAME)  {  [CE]  cannot  find  symbol  SECOND_NAME  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.SECOND_NAME)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SECOND_NAME)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_NAME	118	None	replace
112	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_SIZE)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	70	None	replace
113	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	add
114	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	add
115	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	add
116	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
117	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  {  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  {  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  {  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	74	None	add
118	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >>  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >>  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >>  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	add
119	[BUG]  [BUGGY]  bitsOut.read(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  count);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
120	[BUG]  [BUGGY]  bitsOut.read(nextByte,  nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
121	[BUG]  [BUGGY]  bitsOut.read(bytesCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(bytesCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(bytesCachedSize,  nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
122	[BUG]  [BUGGY]  bitsOut.readFully(nextByte);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.readFully(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.readFully(nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
123	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0,  nextByte.length);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  0,  nextByte.length);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  0,  nextByte.length);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
124	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0,  count);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  0,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  0,  count);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
125	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0,  nextByte);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  0,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  0,  nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
126	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  count);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
127	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(bytesCachedSize,  nextByte);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
128	[BUG]  [BUGGY]  InputStream  in  =  readBits(bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(bitsCachedSize,  nextByte);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
129	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
130	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  bitsCachedSize,  nextByte);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
131	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize,  count);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  bitsCachedSize,  count);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
132	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  nextByte.length);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  nextByte.length);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  0,  nextByte.length);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
133	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte!=  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	47	12	replace
135	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte!=  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	47	12	replace
136	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_SIZE	68	None	replace
137	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.NUMBER_INT)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.NUMBER_INT)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.NUMBER_INT)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	68	None	replace
138	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_FLOAT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_FLOAT  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_FLOAT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_FLOAT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_FLOAT	68	None	replace
139	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SECOND  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SECOND  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.SECOND  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SECOND  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	68	None	replace
140	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	68	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	108	12	replace
142	[BUG]  [BUGGY]  if(nextByte  >  0  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  0  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	108	12	replace
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	108	11	replace
144	[BUG]  [BUGGY]  if(nextByte  >=  0  &&  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	108	11	replace
145	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
146	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	add
147	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	add
148	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	add
149	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	add
150	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  If(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  If(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    If(nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	113	None	add
151	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
152	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    >=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	60	None	replace
153	[BUG]  [BUGGY]  if(nextByte!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    >=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	60	None	replace
154	[BUG]  [BUGGY]  if(nextByte  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    >=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	60	None	replace
155	[BUG]  [BUGGY]  if(nextByte!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    >=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	60	None	replace
156	[BUG]  [BUGGY]  if(nextByte  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    >=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	60	None	replace
157	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  ==  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	2	replace
159	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  ==  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	2	replace
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  >=  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
161	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  0)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >=  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
163	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  0)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte!=  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
165	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  0)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte!=  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
167	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  0)  {  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
168	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
169	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
170	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
171	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(NextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	36	12	replace
173	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	36	12	replace
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	79	12	replace
175	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	79	12	replace
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	79	12	replace
177	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte!=  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	79	12	replace
178	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MILLIS_SIZE)  {  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MILLIS_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  MILLIS_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	97	None	replace
179	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_STANDARD)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_STANDARD  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_STANDARD)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_STANDARD)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_STANDARD	97	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  bitsCachedSize)  {	  if(nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	106	12	replace
181	[BUG]  [BUGGY]  if(nextByte!=  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  bitsCachedSize)  {	  if(nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	106	12	replace
182	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	add
183	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	98	None	add
184	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	add
185	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  MAXIMUM_ACCHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  MAXIMUM_ACCHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >  MAXIMUM_ACCHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	add
186	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	add
187	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
188	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	96	None	replace
189	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	96	None	replace
190	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	96	None	replace
191	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	96	None	replace
192	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
193	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
194	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
195	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
196	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	33	None	add
197	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	33	None	add
198	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.BYTE_ENDIAN)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	91	None	replace
199	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.SIZE)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	91	None	replace
200	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INTIAN)  {  [CE]  cannot  find  symbol  NUMBER_INTIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INTIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.NUMBER_INTIAN)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INTIAN	91	None	replace
201	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.FIELD_NAME)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.FIELD_NAME)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	91	None	replace
202	[BUG]  [BUGGY]  if(nextByte  >=  0  &&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  &&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  &&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
203	[BUG]  [BUGGY]  if(nextByte!=  0  &&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  &&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  &&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
204	[BUG]  [BUGGY]  if(nextByte  ==  0  &&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  &&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  &&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
205	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
206	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	56	None	replace
207	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	56	None	replace
208	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_CACHE_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_CACHE_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_CACHE_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	56	None	replace
209	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  2)  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  2)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  count  >  2)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	56	None	replace
210	[BUG]  [BUGGY]  bitsOut.write(nextByte,  count);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  count);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  count);  nextByte  =  in.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
211	[BUG]  [BUGGY]  bitsOut.write(bytesCachedSize);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(bytesCachedSize);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(bytesCachedSize);  nextByte  =  in.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
212	[BUG]  [BUGGY]  bitsOut.write(nextByte  +  count);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte  +  count);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte  +  count);  nextByte  =  in.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
213	[BUG]  [BUGGY]  bitsOut.write(nextByte);  nextByte  =  byteOrder.read();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte);  nextByte  =  byteOrder.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte);  nextByte  =  byteOrder.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
214	[BUG]  [BUGGY]  bitsOut.write(nextByte);  nextByte  =  readBits(in,  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte);  nextByte  =  readBits(in,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte);  nextByte  =  readBits(in,  count);	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
215	[BUG]  [BUGGY]  bitsOut.write(nextByte);  nextByte  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte);  nextByte  =  this.in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte);  nextByte  =  this.in.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
216	[BUG]  [BUGGY]  if(byteOrder  ==  nextByte)  {  [CE]  incomparable  types:  ByteOrder  and  long  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder  ==  nextByte)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  ByteOrder  and  long	102	None	replace
217	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.UTF8)  {  [CE]  cannot  find  symbol  UTF8  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.UTF8)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.UTF8)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  UTF8	102	None	replace
218	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
219	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
220	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.NUMBER_INT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	100	None	replace
221	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_SIZE)  {  [CE]  cannot  find  symbol  LITTLE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_SIZE)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_SIZE	100	None	replace
222	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
224	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
226	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
227	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
228	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
229	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
230	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	34	12	replace
231	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	124	3	replace
233	[BUG]  [BUGGY]  if(nextByte  ==  0  &&  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	124	3	replace
234	[BUG]  [BUGGY]  in.defaultRead(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.defaultRead(nextByte,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultRead(nextByte,  bitsCachedSize);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
235	[BUG]  [BUGGY]  in.defaultRead(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.defaultRead(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultRead(nextByte,  count);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
236	[BUG]  [BUGGY]  in.defaultRead(bytesCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.defaultRead(bytesCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultRead(bytesCachedSize,  nextByte);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
237	[BUG]  [BUGGY]  in.defaultRead(bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.defaultRead(bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultRead(bitsCachedSize,  nextByte);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
238	[BUG]  [BUGGY]  reader.defaultRead(nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  reader.defaultRead(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	reader.defaultRead(nextByte);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
239	[BUG]  [BUGGY]  in.readBits(nextByte);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.readBits(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.readBits(nextByte);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
240	[BUG]  [BUGGY]  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	nextByte  =  in.read();	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
241	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
242	[BUG]  [BUGGY]  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
243	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
244	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	103	None	replace
245	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	103	None	replace
246	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
247	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	103	None	replace
248	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	103	None	replace
249	[BUG]  [BUGGY]  bitsOut.read(nextByte,  count);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  count);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  count);  nextByte  =  in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
250	[BUG]  [BUGGY]  bitsOut.readFully(nextByte);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.readFully(nextByte);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.readFully(nextByte);  nextByte  =  in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
251	[BUG]  [BUGGY]  bitsOut.read(bytesCachedSize);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(bytesCachedSize);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(bytesCachedSize);  nextByte  =  in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
252	[BUG]  [BUGGY]  bitsOut.read(in,  nextByte);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(in,  nextByte);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(in,  nextByte);  nextByte  =  in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
253	[BUG]  [BUGGY]  bitsOut.read(bytesCachedSize,  nextByte);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(bytesCachedSize,  nextByte);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(bytesCachedSize,  nextByte);  nextByte  =  in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
254	[BUG]  [BUGGY]  bitsOut.read(in);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(in);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(in);  nextByte  =  in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
255	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsOut);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsOut);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  bitsOut);	  InputStream    in    =    readInputStream(nextByte);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
256	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(bytesCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(bytesCachedSize);	  InputStream    in    =    readInputStream(nextByte);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
257	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
258	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
259	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
260	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
261	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    If(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
262	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	40	None	add
263	[BUG]  [BUGGY]  in.read(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(nextByte,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(nextByte,  bitsCachedSize);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
264	[BUG]  [BUGGY]  in.read(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(nextByte,  count);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
265	[BUG]  [BUGGY]  in.read(bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(bitsCachedSize,  nextByte);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
266	[BUG]  [BUGGY]  in.readFully(nextByte);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.readFully(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.readFully(nextByte);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
267	[BUG]  [BUGGY]  in.read(bytesCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(bytesCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(bytesCachedSize,  nextByte);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
268	[BUG]  [BUGGY]  in.read(nextByte,  0,  nextByte.length);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(nextByte,  0,  nextByte.length);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(nextByte,  0,  nextByte.length);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
269	[BUG]  [BUGGY]  in.read(nextByte,  0,  count);  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(nextByte,  0,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(nextByte,  0,  count);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
270	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  ==  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	39	12	replace
272	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	39	12	replace
273	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
274	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
275	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    If(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
276	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
277	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
278	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  <  bitscachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  <  bitscachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  <  bitscachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
279	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    if(NextByte  <  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
280	[BUG]  [BUGGY]  bitsOut.write(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  count);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
281	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0,  nextByte.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  0,  nextByte.length);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  0,  nextByte.length);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
282	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0,  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  0,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  0,  count);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
283	[BUG]  [BUGGY]  bitsOut.write(nextByte,  nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  nextByte);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
284	[BUG]  [BUGGY]  bitsOut.write(nextByte,  MASKS_SIZE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  MASKS_SIZE);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  MASKS_SIZE);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
285	[BUG]  [BUGGY]  bitsOut.write(nextByte,  MASKS);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  MASKS);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  MASKS);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
286	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0,  nextByte);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  0,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  0,  nextByte);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
287	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
288	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
289	[BUG]  [BUGGY]  if(nextByte  ==  nextByte.length)  {  [CE]  long  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte.length)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  nextByte.length)  {	  if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	114	None	replace
290	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    bitsCachedSize)    {    if(nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	add
291	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    bitsCachedSize)    {    if(nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	add
292	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  >>  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    bitsCachedSize)    {    if(nextByte  >>  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	add
293	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  ==  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    bitsCachedSize)    {    if(nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	add
294	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  [Delete]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  [Delete]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    bitsCachedSize)    {    if(nextByte  [Delete]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	80	None	add
295	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  [BUGGY]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(nextByte  [BUGGY]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    bitsCachedSize)    {    if(nextByte  [BUGGY]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	80	None	add
296	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    if(nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
297	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  If(nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  If(nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    If(nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	105	None	add
298	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    if(nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
299	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte  <  bitscachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte  <  bitscachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    if(nextByte  <  bitscachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
300	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(NextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(NextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    if(NextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
301	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  if(nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    if(nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
302	[BUG]  [BUGGY]  byteOrder  =  in.read(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  in.read(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.read(nextByte,  count);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
303	[BUG]  [BUGGY]  byteOrder  =  in.read(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  in.read(nextByte,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.read(nextByte,  bitsCachedSize);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
304	[BUG]  [BUGGY]  byteOrder  =  in.readBits(nextByte);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  in.readBits(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.readBits(nextByte);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
305	[BUG]  [BUGGY]  byteOrder  =  in.read(bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  in.read(bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.read(bitsCachedSize,  nextByte);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
306	[BUG]  [BUGGY]  byteOrder  =  in.read(nextByte,  nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  in.read(nextByte,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.read(nextByte,  nextByte);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
307	[BUG]  [BUGGY]  byteOrder  =  in.read(nextByte,  0,  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  in.read(nextByte,  0,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.read(nextByte,  0,  count);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	88	12	replace
309	[BUG]  [BUGGY]  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	88	12	replace
310	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
311	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
312	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
313	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
314	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
315	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
316	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
317	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
318	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	46	None	add
319	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  [BUGGY]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	46	None	add
320	[BUG]  [BUGGY]  in.defaultReadBits(nextByte);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.defaultReadBits(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultReadBits(nextByte);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
321	[BUG]  [BUGGY]  in.readBits(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.readBits(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.readBits(nextByte,  count);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
322	[BUG]  [BUGGY]  in.defaultReadBits(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.defaultReadBits(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultReadBits(nextByte,  count);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
323	[BUG]  [BUGGY]  in.readBits(nextByte,  0,  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.readBits(nextByte,  0,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.readBits(nextByte,  0,  count);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
324	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	57	None	replace
325	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	57	None	replace
326	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	57	None	replace
327	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
328	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
329	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
330	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
331	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >>  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >>  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  >>  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
332	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
333	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [BUGGY]  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [BUGGY]  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  [BUGGY]  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	123	None	add
334	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [Delete]  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [Delete]  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  [Delete]  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	123	None	add
335	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
336	[BUG]  [BUGGY]  If(nextByte  ==  0)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  If(nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	If(nextByte  ==  0)  {	  if(nextByte!=    0)    {    If(nextByte!=    0)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
337	[BUG]  [BUGGY]  If(nextByte!=  0)  {  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  If(nextByte!=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	If(nextByte!=  0)  {	  if(nextByte!=    0)    {    If(nextByte!=    0)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
338	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
339	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	111	None	add
340	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >=  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
341	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
342	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  ==  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  ==  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  ==	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
343	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(nextByte,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  count);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
344	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(bytesCachedSize,  nextByte);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
345	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(bitsCachedSize,  nextByte);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
346	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
347	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  bitsCachedSize,  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(nextByte,  bitsCachedSize,  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  bitsCachedSize,  count);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
348	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  0,  nextByte.length);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(nextByte,  0,  nextByte.length);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  0,  nextByte.length);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
349	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
350	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	26	None	replace
351	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
352	[BUG]  [BUGGY]  if(nextByte  ==  0  &&  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  &&  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  &&  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	26	None	replace
353	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	26	None	replace
354	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	26	None	replace
355	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
356	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
357	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
358	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
359	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
360	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  ')'  expected	101	None	add
361	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
362	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
363	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >>  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  >>  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  >>  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
364	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  ==  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
365	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [Delete]  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [Delete]  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  [Delete]  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	107	None	add
366	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  If(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  If(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    If(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	107	None	add
367	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [BUGGY]  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte  [BUGGY]  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte  [BUGGY]  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	107	None	add
368	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
369	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_NUMBER)  {  [CE]  cannot  find  symbol  LITTLE_NUMBER  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_NUMBER)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_NUMBER)  {	  if(nextByte    ==    ByteOrder.LITTLE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_NUMBER	71	None	replace
370	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_STARTIAN)  {  [CE]  cannot  find  symbol  LITTLE_STARTIAN  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_STARTIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_STARTIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_STARTIAN	71	None	replace
371	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
372	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
373	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
374	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(nextByte);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream(nextByte);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
375	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().readBits(nextByte);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream().readBits(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream().readBits(nextByte);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
376	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  nextByte);  [CE]  ';'  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream(),  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream(),  nextByte);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  ';'  expected	67	None	replace
377	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  nextByte;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream(),  nextByte;  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream(),  nextByte;	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
378	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  this.getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	3	replace
380	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	3	replace
381	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
382	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
383	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
384	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
385	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
386	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
387	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	25	11	replace
388	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	25	11	replace
389	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
390	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    >    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
391	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    >    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
392	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
393	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
394	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >>  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >>  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >>  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
395	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
396	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  [Delete]  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  [Delete]  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  [Delete]  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	35	None	add
397	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  [BUGGY]  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  [BUGGY]  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  [BUGGY]  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	35	None	add
398	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte  >=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
399	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
400	[BUG]  [BUGGY]  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
401	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
402	[BUG]  [BUGGY]  while(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
403	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
404	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  nextByte  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  <  nextByte  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
405	[BUG]  [BUGGY]  while(nextByte  <  nextByte  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  nextByte  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  nextByte  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
406	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  ==  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	3	replace
407	[BUG]  [BUGGY]  while(nextByte  ==  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  ==  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	3	replace
408	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte!=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte!=  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	12	replace
409	[BUG]  [BUGGY]  while(nextByte!=  0)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte!=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte!=  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	12	replace
410	[BUG]  [BUGGY]  while(nextByte  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  =  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  =  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
411	[BUG]  [BUGGY]  if(nextByte  <  =  0)  {  while(nextByte  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0)  {  while(nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0)  {  while(nextByte  ==  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
412	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  >=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  >=  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	12	replace
413	[BUG]  [BUGGY]  while(nextByte  >=  0)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  >=  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  >=  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	12	replace
414	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  ==  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  ==  nextByte)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	12	replace
415	[BUG]  [BUGGY]  while(nextByte  ==  nextByte)  {  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  ==  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  ==  nextByte)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	12	replace
416	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  <  nextByte)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	3	replace
417	[BUG]  [BUGGY]  while(nextByte  <  nextByte)  {  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  nextByte)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	3	replace
418	[BUG]  [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    <    0    ||    nextByte    >    bitscachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
419	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	replace
420	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
421	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	93	None	replace
422	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	93	None	replace
423	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.NUMBER_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte!=    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_SIZE	89	None	replace
424	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.NUMBER_INT)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.NUMBER_INT)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.NUMBER_INT)  {	  if(nextByte!=    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	89	None	replace
425	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_SIZE	73	None	replace
426	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.NUMBER_INT)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.NUMBER_INT)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.NUMBER_INT)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	73	None	replace
427	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	73	None	replace
428	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_FLOAT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_FLOAT  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_FLOAT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_FLOAT  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_FLOAT	73	None	replace
429	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SECOND  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SECOND  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.SECOND  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SECOND  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	73	None	replace
430	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_DECEMBER  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_DECEMBER  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_DECEMBER  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_DECEMBER  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_DECEMBER	73	None	replace
431	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	add
432	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	add
433	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte  >=  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	add
434	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	78	None	add
435	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  {  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  {  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte  {  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	78	None	add
436	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >>  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >  bitsCachedSize)  {  if(nextByte  >>  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte  >>  0  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	add
437	[BUG]  [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    if(nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	add
438	[BUG]  [BUGGY]  if(nextByte  >  0)  {  in.read(nextByte);  if(nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  in.read(nextByte);  if(nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    in.read(nextByte);  if(nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	add
439	[BUG]  [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  {  this.bitsCached  |=  (nextByte  <  <  bitsCachedSize);  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  {  this.bitsCached  |=  (nextByte  <  <  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    if(nextByte  >  0)  {  this.bitsCached  |=  (nextByte  <  <  bitsCachedSize);	  	non-compiled	[CE]  >  expected	28	None	add
440	[BUG]  [BUGGY]  if(nextByte  >  0)  {  If(nextByte  >  0)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  If(nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    If(nextByte  >  0)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
441	[BUG]  [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  {  this.bitsCached  |=  (nextByte  <  <  bitsCachedSize);  }  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  {  this.bitsCached  |=  (nextByte  <  <  bitsCachedSize);  }  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    if(nextByte  >  0)  {  this.bitsCached  |=  (nextByte  <  <  bitsCachedSize);  }	  	non-compiled	[CE]  >  expected	28	None	add
442	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	120	12	replace
443	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	120	12	replace
444	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(bytesCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(bytesCachedSize);	  InputStream    in    =    readInt(nextByte);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
445	[BUG]  [BUGGY]  InputStream  in  =  readInt(byteOrder,  nextByte);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(byteOrder,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(byteOrder,  nextByte);	  InputStream    in    =    readInt(nextByte);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
446	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(bitsCachedSize);	  InputStream    in    =    readInt(nextByte);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
447	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
448	[BUG]  [BUGGY]  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
449	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
450	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  nextByte)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
452	[BUG]  [BUGGY]  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
453	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
454	[BUG]  [BUGGY]  if(nextByte  <  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
455	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	11	replace
456	[BUG]  [BUGGY]  if(nextByte  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	11	replace
457	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
458	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  >>  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
459	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
460	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
461	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  [Delete]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	42	None	add
462	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    if(nextByte  <  0  ||  nextByte  [BUGGY]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	42	None	add
463	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    If(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
464	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	41	3	replace
465	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	41	3	replace
466	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  ==  nextByte)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  ==  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    nextByte)    {    if(nextByte  ==  nextByte)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	add
467	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte!=  nextByte)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte!=  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    nextByte)    {    if(nextByte!=  nextByte)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	add
468	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  >=  nextByte)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  >=  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    nextByte)    {    if(nextByte  >=  nextByte)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	add
469	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  >>  nextByte)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  >>  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    nextByte)    {    if(nextByte  >>  nextByte)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	add
470	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  If(nextByte  ==  nextByte)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte)  {  If(nextByte  ==  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    nextByte)    {    If(nextByte  ==  nextByte)  {	  	non-compiled	[CE]  ';'  expected	109	None	add
471	[BUG]  [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  [BUGGY]  nextByte)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  nextByte)  {  if(nextByte  [BUGGY]  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    nextByte)    {    if(nextByte  [BUGGY]  nextByte)  {	  	non-compiled	[CE]  ')'  expected	109	None	add
472	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
473	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
474	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
475	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
476	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	31	None	add
477	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    If(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
478	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	31	None	add
479	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	3	replace
480	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	3	replace
481	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  while(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  while(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    while(nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	add
482	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.MIN_VALUE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.MIN_VALUE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.MIN_VALUE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	102	None	replace
483	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_INT)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	102	None	replace
484	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.DEFAULT)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.DEFAULT)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	102	None	replace
485	[BUG]  [BUGGY]  if(nextByte  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
486	[BUG]  [BUGGY]  if(nextByte!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
487	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte!=    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	89	None	replace
488	[BUG]  [BUGGY]  if(byteOrder!=  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(byteOrder!=  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(byteOrder!=  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte!=    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	89	None	replace
489	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_FLOAT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_FLOAT  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_FLOAT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.NUMBER_FLOAT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte!=    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_FLOAT	89	None	replace
490	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  <  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	2	replace
491	[BUG]  [BUGGY]  while(nextByte  <  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  0)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	compilable	  [FE]  AssertionError  	77	2	replace
492	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  when(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  when(nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    when(nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	98	None	add
493	[BUG]  [BUGGY]  in.write(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.write(nextByte,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.write(nextByte,  bitsCachedSize);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
494	[BUG]  [BUGGY]  in.defaultRead(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.defaultRead(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.defaultRead(bitsCachedSize);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
495	[BUG]  [BUGGY]  if(nextByte  >>  bitsCachedSize)  {  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >>  bitsCachedSize)  {	  if(nextByte    >=    bitsCachedSize)    {    	non-compiled	[CE]  incompatible  types	81	None	replace
496	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(nextByte    <    =    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
497	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    >=    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
498	[BUG]  [BUGGY]  in.read(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(bitsCachedSize);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
499	[BUG]  [BUGGY]  in.read(nextByte,  bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(nextByte,  bitsCachedSize  -  count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(nextByte,  bitsCachedSize  -  count);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
500	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  count!=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
501	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count!=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count!=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
502	[BUG]  [BUGGY]  long  nextByte  =  bitsCachedSize?  in.read()  :  in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  long  nextByte  =  bitsCachedSize?  in.read()  :  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	long  nextByte  =  bitsCachedSize?  in.read()  :  in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
503	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
504	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
505	[BUG]  [BUGGY]  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
506	[BUG]  [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  if(NextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(NextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
507	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  0,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(nextByte,  0,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  0,  bitsCachedSize);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
508	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  bitsCachedSize  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(nextByte,  bitsCachedSize  +  1);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(nextByte,  bitsCachedSize  +  1);	  InputStream    in    =    readInt(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
509	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  0);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  0);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
510	[BUG]  [BUGGY]  bitsOut.read(nextByte,  byteOrder);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  byteOrder);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  byteOrder);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
511	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	26	None	replace
512	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	26	None	replace
513	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_START)  {  [CE]  cannot  find  symbol  LITTLE_START  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_START)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_START)  {	  if(nextByte    ==    ByteOrder.LITTLE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_START	71	None	replace
514	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE)  {  [CE]  cannot  find  symbol  LITTLE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE)  {	  if(nextByte    ==    ByteOrder.LITTLE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE	71	None	replace
515	[BUG]  [BUGGY]  if(nextByte  <  0)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0)  {  while(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
516	[BUG]  [BUGGY]  while(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
517	[BUG]  [BUGGY]  while(nextByte  <  =  0L  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  =  0L  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  =  0L  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
518	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
519	[BUG]  [BUGGY]  byteOrder  =  in.read(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  in.read(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  in.read(bitsCachedSize);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
520	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
521	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
522	[BUG]  [BUGGY]  if(nextByte!=  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
523	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  >  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
524	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >  0  ||  nextByte  >  0)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    >    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
525	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  BAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BAXIMUM_CACHE_SIZE  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  BAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  BAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BAXIMUM_CACHE_SIZE	97	None	replace
526	[BUG]  [BUGGY]  if(nextByte  <  0  ||  secondByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  secondByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  secondByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  secondByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  secondByte	97	None	replace
527	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_FILE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_FILE_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_FILE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_FILE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_FILE_SIZE	97	None	replace
528	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    If(nextByte  <  0  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
529	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE,  count))  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE,  count))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE,  count))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
530	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER)  {  [CE]  cannot  find  symbol  NUMBER  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	90	None	replace
531	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  If(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  If(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    If(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
532	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  <  bitsCachedSize)  {  if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    if(nextByte!=  0  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
533	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	30	12	replace
534	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	30	12	replace
535	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  count  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	56	None	replace
536	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_SIZE)||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	56	None	replace
537	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	56	None	replace
538	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	55	None	replace
539	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_SIZE)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	55	None	replace
540	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INT)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.NUMBER_INT)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.NUMBER_INT)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	91	None	replace
541	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.NUMBER)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.NUMBER)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.NUMBER)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	91	None	replace
542	[BUG]  [BUGGY]  if(nextByte  <  =  BYTE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  BYTE_SIZE)  {	  if(nextByte    ==    nextByte)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
543	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  >>  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  >>  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >=    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	120	None	replace
544	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    while(nextByte  <  0  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
545	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	72	None	replace
546	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	72	None	replace
547	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
548	[BUG]  [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
549	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
550	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
551	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME),  bitsCachedSize)  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME),  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME),  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  ')'  expected	59	None	replace
552	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  ==  0)  {	  if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	75	12	replace
553	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  ==  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  ==  0)  {	  if(nextByte    ==    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	75	12	replace
554	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
555	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
556	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  bitsCachedSize  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	106	12	replace
557	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  bitsCachedSize  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	106	12	replace
558	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  while(nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  while(nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    while(nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
559	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  when(nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  when(nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    bitsCachedSize)    {    when(nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	105	None	add
560	[BUG]  [BUGGY]  if(nextByte!=  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	96	None	replace
561	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(bitsCachedSize);	  InputStream    in    =    readInputStream(nextByte);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
562	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.MIN_VALUE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.MIN_VALUE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.MIN_VALUE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	68	None	replace
563	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize  -  1);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  bitsCachedSize  -  1);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
564	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  bitsCachedSize  +  1);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  bitsCachedSize  +  1);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
565	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInputStream(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInputStream(nextByte,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readInputStream(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
566	[BUG]  [BUGGY]  in.close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.close();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.close();	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
567	[BUG]  [BUGGY]  in.write(nextByte);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.write(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.write(nextByte);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
568	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
569	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  0,  bitsCachedSize);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
570	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize  -  1);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readBits(nextByte,  bitsCachedSize  -  1);	  InputStream    in    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
571	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.MIN_VALUE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.MIN_VALUE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.MIN_VALUE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	73	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	45	12	replace
573	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	45	12	replace
574	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
575	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	124	11	replace
576	[BUG]  [BUGGY]  if(nextByte!=  0  &&  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	124	11	replace
577	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	39	12	replace
578	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	39	12	replace
579	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.TOKENS_PER_BYTE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.TOKENS_PER_BYTE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.TOKENS_PER_BYTE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	69	None	replace
580	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    If(nextByte  <  0  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
581	[BUG]  [BUGGY]  bitsOut.write(nextByte  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte  +  1);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte  +  1);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
582	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte,  0);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte,  0);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
583	[BUG]  [BUGGY]  bitsOut.write(nextByte  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte  -  1);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte  -  1);	  bitsOut.write(nextByte);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
584	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
585	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream(bitsCachedSize);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
586	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().readFully(nextByte);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream().readFully(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream().readFully(nextByte);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
587	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().read(nextByte);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream().read(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream().read(nextByte);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
588	[BUG]  [BUGGY]  bitsOut.read(nextByte);  nextByte  =  out.read();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte);  nextByte  =  out.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte);  nextByte  =  out.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
589	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	93	None	replace
590	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	93	None	replace
591	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE	93	None	replace
592	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >=  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
593	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  If(nextByte  >=  bitsCachedSize)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  If(nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >=    bitsCachedSize)    {    If(nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	80	None	add
594	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  8)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  nextByte  >  8)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
595	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  8)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  8)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  8)  {	  if(nextByte    <    0    ||    nextByte    >    0)    {    	compilable	  [FE]  AssertionError  	38	12	replace
596	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	103	None	replace
597	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	103	None	replace
598	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  bitsCachedSize)  {  if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    if(nextByte  >=  0  ||  nextByte  ==  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
599	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  >=  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	25	12	replace
600	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	25	12	replace
601	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	27	None	replace
602	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  nextByte  <  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	27	None	replace
603	[BUG]  [BUGGY]  if(nextByte  >  0)  {  while(nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  while(nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    while(nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	add
604	[BUG]  [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  throw  new  IllegalArgumentException( " ");  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  if(nextByte  >  0)  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    if(nextByte  >  0)  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	add
605	[BUG]  [BUGGY]  if(nextByte  >  0)  {  if(NextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  0)  {  if(NextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    0)    {    if(NextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	add
606	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
607	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  bitsCachedSize  <  nextByte)  {  [CE]  cannot  find  symbol  Feature  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  bitsCachedSize  <  nextByte)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  bitsCachedSize  <  nextByte)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
608	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  nextByte  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	104	None	replace
609	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  =  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
610	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_END)  {  [CE]  cannot  find  symbol  FIELD_END  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_END)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.FIELD_END)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_END	118	None	replace
611	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
612	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
613	[BUG]  [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  bitsCachedSize)  {  while(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
614	[BUG]  [BUGGY]  bitsOut.write(nextByte  +  1);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte  +  1);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte  +  1);  nextByte  =  in.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
615	[BUG]  [BUGGY]  bitsOut.write(nextByte);  nextByte  =  reader.read();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte);  nextByte  =  reader.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte);  nextByte  =  reader.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
616	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	119	12	replace
617	[BUG]  [BUGGY]  if(nextByte  ==  0  ||  count  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	119	12	replace
618	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	119	12	replace
619	[BUG]  [BUGGY]  if(nextByte!=  0  ||  count  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  count  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  count  >  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	119	12	replace
620	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
621	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
622	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
623	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.SIZE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
624	[BUG]  [BUGGY]  if(nextByte  ==  null  ||  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  <null>  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  null  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  null  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	124	None	replace
625	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	124	12	replace
626	[BUG]  [BUGGY]  if(nextByte!=  0  ||  nextByte  ==  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  0  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  0  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte!=    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	124	12	replace
627	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_START  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_START  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_START  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_START  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_START	68	None	replace
628	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  1  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  <  1  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
629	[BUG]  [BUGGY]  while(nextByte  <  1  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  1  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  1  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
630	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  2  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	while(nextByte  <  2  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
631	[BUG]  [BUGGY]  while(nextByte  <  2  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  2  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  2  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
632	[BUG]  [BUGGY]  while(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    while(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
633	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
634	[BUG]  [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  MAXIMUM_CACHE_SIZE  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	32	12	replace
635	[BUG]  [BUGGY]  bitsOut.write(nextByte);  nextByte  =  out.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.write(nextByte);  nextByte  =  out.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.write(nextByte);  nextByte  =  out.read();	  bitsOut.write(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
636	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
637	[BUG]  [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  Feature  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	60	None	replace
638	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	70	None	replace
639	[BUG]  [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  bitsCachedSize)  {  if(NextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(NextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
640	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >>  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >>  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >>  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >=    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
641	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	add
642	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	add
643	[BUG]  [BUGGY]  if(nextByte  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  1)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  1)  {	  if(nextByte    ==    0)    {    if(nextByte    {    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
644	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  {  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  {  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  {  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
645	[BUG]  [BUGGY]  if(nextByte  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    <    =    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	95	None	replace
646	[BUG]  [BUGGY]  if(nextByte!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(nextByte    <    =    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	95	None	replace
647	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  bitsCachedSize  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	50	12	replace
648	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  bitsCachedSize  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	50	12	replace
649	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  bitsCachedSize))  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  bitsCachedSize))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  bitsCachedSize))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
650	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_ENDIAN))  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_ENDIAN))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_ENDIAN))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
651	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
652	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_SIZE))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_SIZE))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	59	None	replace
653	[BUG]  [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
654	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
655	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  >  bitsCachedSize)  {  If(nextByte  <  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    If(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
656	[BUG]  [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    0    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
657	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(nextByte  >  0  ||  nextByte  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  0)  {  if(nextByte  >  0  ||  nextByte  >  0)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    >    0)    {    if(nextByte  >  0  ||  nextByte  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
658	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_DECIMAL)  {  [CE]  cannot  find  symbol  LITTLE_DECIMAL  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_DECIMAL)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_DECIMAL)  {	  if(nextByte    ==    ByteOrder.LITTLE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_DECIMAL	71	None	replace
659	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_STARIAN)  {  [CE]  cannot  find  symbol  LITTLE_STARIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_STARIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_STARIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_STARIAN	71	None	replace
660	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.TRY_ENDIAN)  {  [CE]  cannot  find  symbol  TRY_ENDIAN  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.TRY_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.TRY_ENDIAN)  {	  if(nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  TRY_ENDIAN	92	None	replace
661	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.TOP)  {  [CE]  cannot  find  symbol  TOP  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.TOP)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.TOP)  {	  if(nextByte    ==    ByteOrder.SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	92	None	replace
662	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	93	None	replace
663	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_TRY  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_TRY  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_TRY  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.BYTE_TRY  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_TRY	93	None	replace
664	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize  -  nextByte);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize  -  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readInt(bitsCachedSize  -  nextByte);	  InputStream    in    =    readInt(nextByte);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
665	[BUG]  [BUGGY]  InputStream  in  =  readByte(nextByte);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  readByte(nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  readByte(nextByte);	  InputStream    in    =    readInt(nextByte);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
666	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  count  <  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  count  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  count  <  bitsCachedSize)  {	  if(nextByte    <    =    0    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
667	[BUG]  [BUGGY]  while(nextByte  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  =  1)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  =  1)  {	  if(nextByte    ==    0)    {    while(nextByte    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
668	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	26	None	replace
669	[BUG]  [BUGGY]  if(nextByte  ==  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  null)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  null)  {	  if(nextByte!=    0)    {    if(nextByte    ==    0)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	3	None	replace
670	[BUG]  [BUGGY]  bitsOut.read(nextByte,  MASKS_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  MASKS_SIZE);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  MASKS_SIZE);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
671	[BUG]  [BUGGY]  bitsOut.read(nextByte,  offset+bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte,  offset+bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte,  offset+bitsCachedSize);	  bitsOut.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
672	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  InputStream  in  =  getInputStream(count);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	InputStream  in  =  getInputStream(count);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
673	[BUG]  [BUGGY]  if(nextByte  ==  null  ||  nextByte!=  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  <null>  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  null  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  null  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte!=    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	47	None	replace
674	[BUG]  [BUGGY]  in.read(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.read(bytesCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.read(bytesCachedSize);	  in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
675	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte!=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
676	[BUG]  [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
677	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
678	[BUG]  [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  MAXIMUM_CACHE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	99	12	replace
679	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SEMI_ENDIAN)  {  [CE]  cannot  find  symbol  SEMI_ENDIAN  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.SEMI_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.SEMI_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_ENDIAN	90	None	replace
680	[BUG]  [BUGGY]  if(nextByte  <  =  16)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  16)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  16)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
681	[BUG]  [BUGGY]  if(nextByte  ==  null)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  null)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  null)  {  If(nextByte  <  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(nextByte    <    0    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
682	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  bitsCachedSize  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	45	11	replace
683	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  bitsCachedSize  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	45	11	replace
684	[BUG]  [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  bitsCachedSize  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  bitsCachedSize  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
685	[BUG]  [BUGGY]  if(nextByte  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)&&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
686	[BUG]  [BUGGY]  in.write(bitsCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  in.write(bitsCachedSize,  nextByte);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	in.write(bitsCachedSize,  nextByte);	  in.defaultRead(nextByte);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
687	[BUG]  [BUGGY]  byteOrder  =  nextByte.read(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  byteOrder  =  nextByte.read(bitsCachedSize);  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	byteOrder  =  nextByte.read(bitsCachedSize);	  byteOrder    =    in.read(nextByte);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
688	[BUG]  [BUGGY]  long  nextByte  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  long  nextByte  =  this.in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	long  nextByte  =  this.in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
689	[BUG]  [BUGGY]  short  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  short  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	short  nextByte  =  in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
690	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsOut)  {  [CE]  cannot  find  symbol  bitsOut  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsOut)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  bitsOut)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	97	None	replace
691	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MISSING_BYTE_SIZE)  {  [CE]  cannot  find  symbol  MISSING_BYTE_SIZE  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  MISSING_BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  MISSING_BYTE_SIZE)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MISSING_BYTE_SIZE	97	None	replace
692	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsOut.length)  {  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  >  bitsOut.length)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  nextByte  >  bitsOut.length)  {	  if(nextByte    <    0    ||    nextByte    >    BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	97	None	replace
693	[BUG]  [BUGGY]  if(nextByte  ==  BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  BYTE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  BYTE_SIZE)  {	  if(nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	114	None	replace
694	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	27	None	replace
695	[BUG]  [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  0  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
696	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_ENDIAN)  {	  if(nextByte    ==    0    ||    nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	replace
697	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	if(nextByte  <  0  ||  count  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	2	replace
698	[BUG]  [BUGGY]  if(nextByte  <  0  ||  count  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  count  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  count  <  bitsCachedSize)  {	  if(nextByte    <    0    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	2	replace
699	[BUG]  [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  {  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  if(nextByte  <  0  ||  nextByte  {  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte    <    0    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    if(nextByte  <  0  ||  nextByte  {  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	31	None	add
700	[BUG]  [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  2))  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  2))  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  2))  {	  if(nextByte    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    count))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	58	None	replace
701	[BUG]  [BUGGY]  if(nextByte!=  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  null)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  null)  {	  if(nextByte    >    0)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	29	None	replace
702	[BUG]  [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  bitsCachedSize)  {  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
703	[BUG]  [BUGGY]  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	while(nextByte  <  =  0  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    while(nextByte    <    0    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
704	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.SEMI_ENDIAN)  {  [CE]  cannot  find  symbol  SEMI_ENDIAN  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.SEMI_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.SEMI_ENDIAN)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_ENDIAN	91	None	replace
705	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.BYTE_INT)  {  [CE]  cannot  find  symbol  BYTE_INT  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.BYTE_INT)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.BYTE_INT)  {	  if(nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_INT	91	None	replace
706	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_START  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_START  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_START  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.NUMBER_START  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.NUMBER_INT    ||    nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_START	73	None	replace
707	[BUG]  [BUGGY]  if(nextByte  ==  null  ||  nextByte  ==  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  <null>  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  null  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  null  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    ==    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	41	None	replace
708	[BUG]  [BUGGY]  bitsOut.read(bitsCachedSize);  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(bitsCachedSize);  nextByte  =  in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(bitsCachedSize);  nextByte  =  in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
709	[BUG]  [BUGGY]  bitsOut.read(nextByte);  nextByte  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  bitsOut.read(nextByte);  nextByte  =  this.in.read();  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	bitsOut.read(nextByte);  nextByte  =  this.in.read();	  bitsOut.read(nextByte);    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
710	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
711	[BUG]  [BUGGY]  if(nextByte  <  =  8  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  <  =  8  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  <  =  8  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    <    0    ||    nextByte    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
712	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIRST_ENDIAN)  {  [CE]  cannot  find  symbol  FIRST_ENDIAN  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte  ==  ByteOrder.FIRST_ENDIAN)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte  ==  ByteOrder.FIRST_ENDIAN)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_ENDIAN	118	None	replace
713	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	100	None	replace
714	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
715	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsOut)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsOut)  {  [BUGGY]      return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsOut)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
