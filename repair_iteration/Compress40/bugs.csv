bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] while (bitsCachedSize < count) { [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } [BUGGY] while (bitsCachedSize < count) { [BUGGY] final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } [BUGGY] [BUGGY] while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	
3	[BUG] [BUGGY] final long nextByte = in.read(); [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { [BUGGY] final long nextByte = in.read(); [BUGGY] if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { [BUGGY] [BUGGY] final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	
5	[BUG] [BUGGY] if (nextByte < 0) { [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); [BUGGY] if (nextByte < 0) { [BUGGY] return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); [BUGGY] [BUGGY] if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	87	87	2	add	
7	[BUG] [BUGGY] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } [BUGGY] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [BUGGY] bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } [BUGGY] [BUGGY] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	
9	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	96	96	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	96	96	2	add	
11	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; [BUGGY] } [BUGGY]   final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; [BUGGY] [BUGGY] }  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	add	
13	[BUG] [BUGGY] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [FE] AssertionError [CONTEXT] bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; [BUGGY] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [BUGGY] bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; [BUGGY] [BUGGY] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	add	
15	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	107	107	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	107	107	2	add	
17	[BUG] [BUGGY] return bitsOut; [FE] AssertionError [CONTEXT]  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; [BUGGY] return bitsOut; [BUGGY] } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; [BUGGY] [BUGGY] return bitsOut; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	
19	[BUG] [BUGGY] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { [FE] AssertionError [CONTEXT] [BUGGY] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { [BUGGY] this.in = in; this.byteOrder = byteOrder; } [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	52	52	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; this.byteOrder = byteOrder; } [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	52	52	2	add	
21	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final InputStream in; [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	43	43	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final InputStream in; [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	43	43	2	add	
23	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final ByteOrder byteOrder; [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	44	44	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final ByteOrder byteOrder; [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	44	44	2	add	
25	[BUG] [BUGGY] this.in = in; [FE] AssertionError [CONTEXT] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { [BUGGY] this.in = in; [BUGGY] this.byteOrder = byteOrder; } [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	53	53	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { [BUGGY] [BUGGY] this.in = in; this.byteOrder = byteOrder; } [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	53	53	2	add	
27	[BUG] [BUGGY] this.byteOrder = byteOrder; [FE] AssertionError [CONTEXT] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; [BUGGY] this.byteOrder = byteOrder; [BUGGY] } [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	54	54	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; [BUGGY] [BUGGY] this.byteOrder = byteOrder; } [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	54	54	2	add	
29	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; this.byteOrder = byteOrder; [BUGGY] } [BUGGY]  [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	55	55	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; this.byteOrder = byteOrder; [BUGGY] [BUGGY] } [CLASS] BitInputStream [METHOD] <init> [RETURN_TYPE] ByteOrder)  InputStream in ByteOrder byteOrder [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize long bitsCached  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	55	55	2	add	
31	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	33	33	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	33	33	2	add	
35	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final InputStream in; [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	39	39	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final InputStream in; [CLASS] BitInputStream  [VARIABLES] 	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	39	39	2	add	
37	[BUG] [BUGGY] if (count < 0 || count > MAXIMUM_CACHE_SIZE) { [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { [BUGGY] if (count < 0 || count > MAXIMUM_CACHE_SIZE) { [BUGGY] throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	82	82	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { [BUGGY] [BUGGY] if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.3779644730092272	82	82	2	add	
39	[BUG] [BUGGY] bitsCached <<= 8; [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { [BUGGY] bitsCached <<= 8; [BUGGY] bitsCached |= nextByte; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.31622776601683794	93	93	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { [BUGGY] [BUGGY] bitsCached <<= 8; bitsCached |= nextByte; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.31622776601683794	93	93	2	add	
41	[BUG] [BUGGY] bitsCached |= nextByte; [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; [BUGGY] bitsCached |= nextByte; [BUGGY] } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.31622776601683794	94	94	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; [BUGGY] [BUGGY] bitsCached |= nextByte; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.31622776601683794	94	94	2	add	
43	[BUG] [BUGGY] bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { [BUGGY] bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; [BUGGY] } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.31622776601683794	105	105	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { [BUGGY] [BUGGY] bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.31622776601683794	105	105	2	add	
45	[BUG] [BUGGY] bitsCached |= (nextByte << bitsCachedSize); [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [BUGGY] bitsCached |= (nextByte << bitsCachedSize); [BUGGY] } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.2672612419124244	91	91	2	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [BUGGY] [BUGGY] bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.2672612419124244	91	91	2	add	
47	[BUG] [BUGGY] bitsOut = (bitsCached & MASKS[count]); [FE] AssertionError [CONTEXT] } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [BUGGY] bitsOut = (bitsCached & MASKS[count]); [BUGGY] bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.2672612419124244	102	102	2	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { [BUGGY] [BUGGY] bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.2672612419124244	102	102	2	add	
49	[BUG] [BUGGY] bitsCached >>>= count; [FE] AssertionError [CONTEXT] bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); [BUGGY] bitsCached >>>= count; [BUGGY] } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.2672612419124244	103	103	2	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; }  final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); [BUGGY] [BUGGY] bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; } [CLASS] BitInputStream [METHOD] readBits [RETURN_TYPE] long  final int count [VARIABLES] ByteOrder byteOrder boolean long[] MASKS InputStream in int MAXIMUM_CACHE_SIZE bitsCachedSize count long bitsCached bitsOut nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.2672612419124244	103	103	2	add	
