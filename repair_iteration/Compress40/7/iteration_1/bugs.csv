bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	13	None	replace
2	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  nextByte  [FE]      AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  cannot  find  symbol  nextByte	13	None	replace
3	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]        AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	13	None	replace
4	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  cannot  find  symbol  bytesCached	13	None	replace
5	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  cannot  find  symbol  nextByte	13	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]    [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	  	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
7	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	13	None	replace
8	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]      AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.FIELD_NAME)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	13	None	replace
9	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError  [CONTEXT]  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN)  {	if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	13	None	replace
