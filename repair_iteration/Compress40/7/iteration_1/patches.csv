bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	5	None	replace
2	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCached	5	None	replace
3	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                    AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	5	None	replace
4	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
5	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCached  [FE]                        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCached	5	None	replace
6	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bitSize  [FE]                          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitSize	5	None	replace
7	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	7	None	replace
8	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	7	None	replace
9	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	7	None	replace
10	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
11	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
12	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	1	None	replace
13	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]);  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[count]);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	3	None	replace
20	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	3	None	replace
21	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	3	None	replace
22	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	replace
23	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	replace
24	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	3	None	replace
25	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	9	None	replace
26	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	9	None	replace
27	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	9	None	replace
28	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	9	None	replace
29	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIELD_NAME)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
30	[BUG]  [BUGGY]  if(count  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.FIELD_NAME)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
31	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	8	None	replace
32	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  nextByte  [FE]                AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	8	None	replace
33	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(byteOrder  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	8	None	replace
34	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.FIELD_NAME)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
35	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST_AND_MASKS)  {  [CE]  cannot  find  symbol  FIRST_AND_MASKS  [FE]                      AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST_AND_MASKS)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIRST_AND_MASKS)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_AND_MASKS	8	None	replace
36	[BUG]  [BUGGY]  if(numbersCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  numbersCached  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(numbersCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(numbersCached  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  numbersCached	4	None	replace
37	[BUG]  [BUGGY]  if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	2	None	replace
38	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  int  count  =  readBits(nextByte);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  int  count  =  readBits(nextByte);  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.FIELD_NAME)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.FIELD_NAME)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
44	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	9	None	replace
45	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_ENDIAN)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	9	None	replace
46	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	3	None	replace
47	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	3	None	replace
48	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
49	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	8	None	replace
50	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FUNCTION)  {  [CE]  cannot  find  symbol  FUNCTION  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.FUNCTION)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FUNCTION)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	8	None	replace
51	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIELD_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	8	None	replace
52	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	4	None	replace
53	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
54	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCached	5	None	replace
55	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	8	None	replace
56	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.NAME)  {  [CE]  cannot  find  symbol  NAME  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.NAME)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.NAME)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  NAME	8	None	replace
57	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[count];  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[count];	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
60	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
61	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
62	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	2	None	replace
64	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	2	None	replace
65	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	3	None	replace
67	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	5	None	replace
68	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
69	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	7	None	replace
70	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	7	None	replace
71	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  count))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  count))  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  count))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	7	None	replace
72	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	9	None	replace
73	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	9	None	replace
74	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	9	None	replace
75	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;    [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
