bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
2	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
3	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
4	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.MINIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	52	None	replace
5	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.MINIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	52	None	replace
6	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MILLIS_PER_BYTE)  {  [CE]  cannot  find  symbol  MILLIS_PER_BYTE  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MILLIS_PER_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MILLIS_PER_BYTE)  {	  if(bitsCached    ==    ByteOrder.MINIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_PER_BYTE	52	None	replace
7	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MILLIS_SIZE)  {  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MILLIS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MILLIS_SIZE)  {	  if(bitsCached    ==    ByteOrder.MINIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	52	None	replace
8	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	44	None	replace
9	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.MILLIS_SIZE)  {  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.MILLIS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.MILLIS_SIZE)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	44	None	replace
10	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	44	None	replace
11	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.MILLIS_PER_BYTE)  {  [CE]  cannot  find  symbol  MILLIS_PER_BYTE  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.MILLIS_PER_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.MILLIS_PER_BYTE)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_PER_BYTE	44	None	replace
12	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.MILLISECOND)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.MILLISECOND)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	44	None	replace
13	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.SIZE)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	44	None	replace
14	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	replace
15	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
16	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	replace
17	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
18	[BUG]  [BUGGY]  if(count  >>  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >>  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >>  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	27	None	replace
19	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[count];	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[count];	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >=  (nextByte  -  count))&  MASKS[count];	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[0];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[0];	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
23	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
24	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	74	None	replace
25	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	74	None	replace
26	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	74	None	replace
27	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
28	[BUG]  [BUGGY]  if(count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	33	None	replace
29	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCached  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bytesCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCached	33	None	replace
30	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	33	None	replace
31	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	46	None	replace
32	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	46	None	replace
33	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	46	None	replace
34	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	46	None	replace
35	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	70	None	replace
36	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	70	None	replace
37	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	70	None	replace
38	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	1	None	replace
39	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MASKS_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MASKS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MASKS_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	1	None	replace
40	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.SECOND_BYTE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.SECOND_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.SECOND_BYTE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	1	None	replace
41	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	10	None	replace
42	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	10	None	replace
43	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	10	None	replace
44	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.SECOND_NAME)  {  [CE]  cannot  find  symbol  SECOND_NAME  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.SECOND_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.SECOND_NAME)  {	  if(bitsCached    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_NAME	29	None	replace
45	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MIN_VALUE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MIN_VALUE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MIN_VALUE)  {	  if(bitsCached    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	29	None	replace
46	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bytesCachedSize);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bytesCachedSize);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
47	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bitsCachedSize);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bitsCachedSize);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
48	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  bitsCachedSize);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
49	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bytesCached);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bytesCached);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
50	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bitsCached);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bitsCached);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
51	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bytesCachedSize,  nextByte);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
52	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	53	None	replace
53	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	53	None	replace
54	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	53	None	replace
55	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	67	None	replace
56	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCached  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCached	67	None	replace
57	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	67	None	replace
58	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	67	None	replace
59	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.SECOND_MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  SECOND_MAXIMUM_CACHE_SIZE  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.SECOND_MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.SECOND_MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_MAXIMUM_CACHE_SIZE	67	None	replace
60	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
61	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
62	[BUG]  [BUGGY]  bitsOut  =(count  >=  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(count  >=  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(count  >=  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
63	[BUG]  [BUGGY]  bitsOut  =(count  >>  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(count  >>  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(count  >>  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
64	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[nextByte];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[nextByte];	  bitsOut    =(bitsCached    >>    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
65	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.SECOND)  {  [CE]  cannot  find  symbol  SECOND  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.SECOND)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.SECOND)  {	  if(bitsCached    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	31	None	replace
66	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.SIZE)  {	  if(bitsCached    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	31	None	replace
67	[BUG]  [BUGGY]  if(count  ==  ByteOrder.MILLIS_PER_BYTE)  {  [CE]  cannot  find  symbol  MILLIS_PER_BYTE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.MILLIS_PER_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.MILLIS_PER_BYTE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_PER_BYTE	30	None	replace
68	[BUG]  [BUGGY]  if(count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	30	None	replace
69	[BUG]  [BUGGY]  if(count  ==  ByteOrder.FIELD_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.FIELD_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.FIELD_SIZE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	30	None	replace
70	[BUG]  [BUGGY]  if(count  ==  ByteOrder.MILLIS_SIZE)  {  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.MILLIS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.MILLIS_SIZE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	30	None	replace
71	[BUG]  [BUGGY]  if(count  ==  ByteOrder.SECOND_BYTE)  {  [CE]  cannot  find  symbol  SECOND_BYTE  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.SECOND_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.SECOND_BYTE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_BYTE	30	None	replace
72	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	62	None	replace
73	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
74	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >=  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	62	None	replace
75	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
76	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
77	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached!=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached!=  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	62	None	replace
78	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	73	None	replace
79	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	73	None	replace
80	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	73	None	replace
81	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	73	None	replace
82	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	73	None	replace
83	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	60	None	replace
84	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  MAXIMUM_CACHE_SIZE))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  MAXIMUM_CACHE_SIZE))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	60	None	replace
85	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	60	None	replace
86	[BUG]  [BUGGY]  if(count  >>  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >>  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >>  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	replace
87	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	9	None	replace
88	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	replace
89	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	8	None	replace
90	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	8	None	replace
91	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	5	None	replace
92	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
93	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
94	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	69	None	replace
95	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	69	None	replace
96	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.SECOND_NAME)  {  [CE]  cannot  find  symbol  SECOND_NAME  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.SECOND_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.SECOND_NAME)  {	  if(bitsCached!=    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_NAME	43	None	replace
97	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.MIN_VALUE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.MIN_VALUE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.MIN_VALUE)  {	  if(bitsCached!=    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	43	None	replace
98	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.SEMI_NAME)  {  [CE]  cannot  find  symbol  SEMI_NAME  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.SEMI_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.SEMI_NAME)  {	  if(bitsCached!=    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_NAME	43	None	replace
99	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  bytesCachedSize))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  bytesCachedSize))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  bytesCachedSize))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	71	None	replace
100	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  BYTE_ENDIAN))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  BYTE_ENDIAN))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  BYTE_ENDIAN))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	71	None	replace
101	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  byteOrder.count))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  byteOrder.count))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  byteOrder.count))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	71	None	replace
102	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
103	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  bitsCachedSize))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  bitsCachedSize))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  bitsCachedSize))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	71	None	replace
104	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  count))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  count))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  count))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	71	None	replace
105	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
106	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	55	None	replace
107	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	55	None	replace
108	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
109	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
110	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
111	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	add	if(count  <  MAXIMUM_CACHE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	compilable	  [FE]  AssertionError  	24	5	replace
113	[BUG]  [BUGGY]  if(count  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  MAXIMUM_CACHE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	compilable	  [FE]  AssertionError  	24	5	replace
114	[BUG]  [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  =  ByteOrder.LITTLE_ENDIAN)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
115	[BUG]  [BUGGY]  if(count  >  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >  ByteOrder.LITTLE_ENDIAN)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	24	None	replace
116	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
117	[BUG]  [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
118	[BUG]  [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte!=  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
119	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
120	[BUG]  [BUGGY]  bitsOut  =(nextByte  ==  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  ==  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  ==  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
121	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[0];  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[0];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
122	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS[count])  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS[count])  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS[count])  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
123	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
124	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
125	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
126	[BUG]  [BUGGY]  if(count  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	21	None	replace
127	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
128	[BUG]  [BUGGY]  if(numbersCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  numbersCached  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(numbersCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(numbersCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  numbersCached	54	None	replace
129	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
130	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
131	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
132	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bytesCached,  nextByte);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bytesCached,  nextByte);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
133	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
134	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
135	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	19	None	replace
136	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	19	None	replace
137	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	19	None	replace
138	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	19	None	replace
139	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	61	None	replace
140	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	61	None	replace
141	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	61	None	replace
142	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	61	None	replace
143	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCached  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	61	None	replace
144	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	61	None	replace
145	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	61	None	replace
146	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MILLISECOND)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MILLISECOND)  {	  if(bitsCached    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	49	None	replace
147	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.SEMI_BYTE)  {  [CE]  cannot  find  symbol  SEMI_BYTE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.SEMI_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.SEMI_BYTE)  {	  if(bitsCached    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_BYTE	49	None	replace
148	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count!=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	26	None	replace
149	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count!=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	26	None	replace
150	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  counts!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  counts!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  counts!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count!=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	26	None	replace
151	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0]);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[0]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
152	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count]);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[count]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  &  MASKS[count]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
153	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte]);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[nextByte]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
154	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count]);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
155	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[size]);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[size]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
156	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[1]);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[1]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[1]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
157	[BUG]  [BUGGY]  if(bitsCached  <  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  <  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  <  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	68	None	replace
158	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	11	None	replace
159	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	11	None	replace
160	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut!=  ByteOrder.BYTE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	11	None	replace
161	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	11	None	replace
162	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	47	None	replace
163	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	47	None	replace
164	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	47	None	replace
165	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	47	None	replace
166	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	47	None	replace
167	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.SECOND_BYTE)  {  [CE]  cannot  find  symbol  SECOND_BYTE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.SECOND_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.SECOND_BYTE)  {	  if(bitsCached    ==    ByteOrder.FIELD_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_BYTE	51	None	replace
168	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	3	None	replace
169	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	3	None	replace
170	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	3	None	replace
171	[BUG]  [BUGGY]  if(this.bitsCached  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached  ==  ByteOrder.FIELD_NAME)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	37	None	replace
172	[BUG]  [BUGGY]  if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	37	None	replace
173	[BUG]  [BUGGY]  if(this.bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	37	None	replace
174	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST  ||  bitsCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIRST  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST  ||  bitsCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIRST  ||  bitsCached  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	50	None	replace
175	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE)  {  [CE]  cannot  find  symbol  BYTE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BYTE)  {	  if(bitsCached    ==    ByteOrder.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE	50	None	replace
176	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIRST  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIRST  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	50	None	replace
177	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIRST  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIRST  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	50	None	replace
178	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  MAXIMUM_CACHE_SIZE  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  MAXIMUM_CACHE_SIZE  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  MAXIMUM_CACHE_SIZE  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	6	None	replace
179	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	6	None	replace
180	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bytesCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bytesCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
181	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	59	None	replace
182	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	59	None	replace
183	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	59	None	replace
184	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	59	None	replace
185	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	59	None	replace
186	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	59	None	replace
187	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
188	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  >  expected  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  >  expected	17	None	replace
189	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
190	[BUG]  [BUGGY]  bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
191	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
192	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
193	[BUG]  [BUGGY]  bitsOut  =(size  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(size  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(size  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
194	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MILLIS)  {  [CE]  cannot  find  symbol  MILLIS  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MILLIS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MILLIS)  {	  if(bitsCached    ==    ByteOrder.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	56	None	replace
195	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  ByteOrder	56	None	replace
196	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    (bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
197	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  count);  bitsOut  =  (bitsCached  &  MASKS[count]);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  0,  count);  bitsOut  =  (bitsCached  &  MASKS[count]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  0,  count);  bitsOut  =  (bitsCached  &  MASKS[count]);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    (bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
198	[BUG]  [BUGGY]  Integer  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  Integer  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	Integer  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[count]);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    (bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
199	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[0]);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[0]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  (bitsCached  &  MASKS[0]);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    (bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
200	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  bytesCached  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bytesCached  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.FIELD_NAME)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCached	32	None	replace
201	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	34	None	replace
202	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.MILLIS_PER_BYTE)  {  [CE]  cannot  find  symbol  MILLIS_PER_BYTE  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.MILLIS_PER_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.MILLIS_PER_BYTE)  {	  if(bitsOut    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_PER_BYTE	34	None	replace
203	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.MILLIS_SIZE)  {  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.MILLIS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.MILLIS_SIZE)  {	  if(bitsOut    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	34	None	replace
204	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.FIELD_SIZE)  {	  if(bitsOut    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	34	None	replace
205	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
206	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	66	None	replace
207	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	66	None	replace
208	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	66	None	replace
209	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
210	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
211	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	12	None	replace
212	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	64	None	replace
213	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	64	None	replace
214	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	64	None	replace
215	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	64	None	replace
216	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	64	None	replace
217	[BUG]  [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCached  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCached	64	None	replace
218	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_END)  {  [CE]  cannot  find  symbol  BYTE_END  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_END)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_END)  {	  if(bitsCached!=    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_END	45	None	replace
219	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.SEMI_BYTE)  {  [CE]  cannot  find  symbol  SEMI_BYTE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.SEMI_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.SEMI_BYTE)  {	  if(bitsCached!=    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_BYTE	45	None	replace
220	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_OUT)  {  [CE]  cannot  find  symbol  BYTE_OUT  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_OUT)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_OUT)  {	  if(bitsCached!=    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_OUT	45	None	replace
221	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST_AND_SIZE)  {  [CE]  cannot  find  symbol  FIRST_AND_SIZE  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST_AND_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIRST_AND_SIZE)  {	  if(bitsCached    ==    ByteOrder.FIRST_AND_MASKS)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_AND_SIZE	35	None	replace
222	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_AND_MASKS)  {  [CE]  cannot  find  symbol  BYTE_AND_MASKS  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_AND_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BYTE_AND_MASKS)  {	  if(bitsCached    ==    ByteOrder.FIRST_AND_MASKS)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_AND_MASKS	35	None	replace
223	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BIG_SIZE)  {  [CE]  cannot  find  symbol  BIG_SIZE  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.BIG_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BIG_SIZE)  {	  if(bitsCached    ==    ByteOrder.FIRST_AND_MASKS)    {    	non-compiled	[CE]  cannot  find  symbol  BIG_SIZE	35	None	replace
224	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	72	None	replace
225	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	72	None	replace
226	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None	replace
227	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  <  MAXIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
228	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
229	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
230	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
231	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
232	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	75	None	replace
233	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	75	None	replace
234	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
235	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	75	None	replace
236	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	48	None	replace
237	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	48	None	replace
238	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	48	None	replace
239	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	48	None	replace
240	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  MAXIMUM_CACHE_SIZE))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  MAXIMUM_CACHE_SIZE))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	48	None	replace
241	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	48	None	replace
242	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[0];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[0];	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
243	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	68	None	replace
244	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	68	None	replace
245	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	6	None	replace
246	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	6	None	replace
247	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	63	None	replace
248	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  lastByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  lastByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  lastByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	63	None	replace
249	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.NUMBER)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.NUMBER)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.NUMBER)  {	  if(bitsCached!=    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	45	None	replace
250	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
251	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
252	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MASKS[count];	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
253	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None	replace
254	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None	replace
255	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	72	None	replace
256	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (maximumSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (maximumSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (maximumSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
257	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKSSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKSSize  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MASKSSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
258	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count))  &  MASKS[count];  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	38	None	replace
259	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count)))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count)))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count)))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
260	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	7	None	replace
261	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	7	None	replace
262	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
263	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.FIELD_NAME)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	28	None	replace
264	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	70	None	replace
265	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.DEFAULT)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.DEFAULT)  {	  if(bitsCached    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	31	None	replace
266	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINUS_SIZE)  {  [CE]  cannot  find  symbol  MINUS_SIZE  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MINUS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINUS_SIZE)  {	  if(bitsCached    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS_SIZE	31	None	replace
267	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	53	None	replace
268	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	53	None	replace
269	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	54	None	replace
270	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	2	None	replace
271	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  1))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  1))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  (bitsCachedSize  -  1))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	71	None	replace
272	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  (bitsCachedSize  -  count))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  (bitsCachedSize  -  count))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  (bitsCachedSize  -  count))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
273	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  (bitsCachedSize  -  count))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  (bitsCachedSize  -  count))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  (bitsCachedSize  -  count))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
274	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  MASKS))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
275	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  1))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  1))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  1))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
276	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	5	None	replace
277	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
278	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	67	None	replace
279	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MASKS_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
280	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
281	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	73	None	replace
282	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	73	None	replace
283	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	1	None	replace
284	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	1	None	replace
285	[BUG]  [BUGGY]  if(count  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.SIZE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	30	None	replace
286	[BUG]  [BUGGY]  if(count  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE	30	None	replace
287	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.FIELD_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE	51	None	replace
288	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MIN_BYTE)  {  [CE]  cannot  find  symbol  MIN_BYTE  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MIN_BYTE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MIN_BYTE)  {	  if(bitsCached    ==    ByteOrder.FIELD_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_BYTE	51	None	replace
289	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	59	None	replace
290	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	59	None	replace
291	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	48	None	replace
292	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	48	None	replace
293	[BUG]  [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	replace
294	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINIMUM_CACHE)  {	  if(bitsCached    ==    ByteOrder.MINIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE	52	None	replace
295	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	9	None	replace
296	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))&  MASKS[1];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))&  MASKS[1];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))&  MASKS[1];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
297	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))&  MASKS[0];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >=  (nextByte  -  count))&  MASKS[0];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
298	[BUG]  [BUGGY]  bitsOut  =(bitsCached  [Delete]  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  [Delete]  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  [Delete]  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (bytesCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	41	None	replace
299	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS  -  count))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MASKS  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (bytesCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
300	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(count  -  1))  &  MASKS[count];  [CE]  ')'  expected  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(count  -  1))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (Math.abs(count  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bytesCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	41	None	replace
301	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[MAXIMUM_CACHE_SIZE]);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[MAXIMUM_CACHE_SIZE]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[MAXIMUM_CACHE_SIZE]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
302	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.SIZE)  {	  if(bitsOut    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	34	None	replace
303	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
304	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
305	[BUG]  [BUGGY]  if(bitsCached  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  <  ByteOrder.LITTLE_ENDIAN)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
306	[BUG]  [BUGGY]  if(bitsOut  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  <  ByteOrder.LITTLE_ENDIAN)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
307	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	64	None	replace
308	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	64	None	replace
309	[BUG]  [BUGGY]  if(bitsCached  Category  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  Category  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  Category  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
310	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	64	None	replace
311	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
312	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.min(MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.min(MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (Math.min(MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	40	None	replace
313	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.min(MAXIMUM_CACHE_SIZE,  count  -  1))  &  MASKS[count];  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.min(MAXIMUM_CACHE_SIZE,  count  -  1))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (Math.min(MAXIMUM_CACHE_SIZE,  count  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	40	None	replace
314	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.SEMI)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.SEMI)  {	  if(bitsCached    ==    ByteOrder.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	56	None	replace
315	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.MINIMUM_CACHE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	4	None	replace
316	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	4	None	replace
317	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached,  nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bitsCached,  nextByte);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bitsCached,  nextByte);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
318	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
319	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS.length)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS.length)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS.length)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
320	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
321	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.MIN_BYTE_SIZE)  {  [CE]  cannot  find  symbol  MIN_BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.MIN_BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.MIN_BYTE_SIZE)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_BYTE_SIZE	44	None	replace
322	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	65	None	replace
323	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.NUMBER)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.NUMBER)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.NUMBER)  {	  if(bitsCached    ==    ByteOrder.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	50	None	replace
324	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  0;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  0;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
325	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  1))&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  1))&  MASKS[0];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  1))&  MASKS[0];	  bitsOut    =(bitsCached    >>    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
326	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	75	None	replace
327	[BUG]  [BUGGY]  if(count  >>  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >>  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >>  ByteOrder.LITTLE_ENDIAN)  {	  if(count!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	25	None	replace
328	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(count!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	25	None	replace
329	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	60	None	replace
330	[BUG]  [BUGGY]  if(this.bitsCached!=  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached!=  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached!=  ByteOrder.FIELD_NAME)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	37	None	replace
331	[BUG]  [BUGGY]  if(this.bitsCached  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached  ==  ByteOrder.BYTE_SIZE)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	37	None	replace
332	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_MASKS)  {  [CE]  cannot  find  symbol  BYTE_MASKS  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BYTE_MASKS)  {	  if(bitsCached    ==    ByteOrder.FIRST_AND_MASKS)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_MASKS	35	None	replace
333	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.NUMBER_OF_SIZE)  {  [CE]  cannot  find  symbol  NUMBER_OF_SIZE  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.NUMBER_OF_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.NUMBER_OF_SIZE)  {	  if(bitsCached    ==    ByteOrder.FIRST_AND_MASKS)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_OF_SIZE	35	None	replace
334	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	69	None	replace
335	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedInYear  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedInYear  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedInYear  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	69	None	replace
336	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	69	None	replace
337	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	8	None	replace
338	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.FIELD_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.FIELD_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.FIELD_SIZE)  {	  if(bitsCached!=    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	43	None	replace
339	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.NAME)  {  [CE]  cannot  find  symbol  NAME  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.NAME)  {	  if(bitsCached!=    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  NAME	43	None	replace
340	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	20	None	replace
341	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	61	None	replace
342	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_MASKS)  {  [CE]  cannot  find  symbol  BYTE_MASKS  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_MASKS)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_MASKS	44	None	replace
343	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_SECONDS)  {  [CE]  cannot  find  symbol  BYTE_SECONDS  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_SECONDS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_SECONDS)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SECONDS	44	None	replace
344	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_STATEMENT)  {  [CE]  cannot  find  symbol  BYTE_STATEMENT  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_STATEMENT)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_STATEMENT)  {	  if(bitsCached!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_STATEMENT	44	None	replace
345	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
346	[BUG]  [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
347	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST)  {  [CE]  cannot  find  symbol  FIRST  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.FIRST)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.FIRST)  {	  if(bitsCached    ==    ByteOrder.FIELD_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	51	None	replace
348	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  16)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  16)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  16)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
349	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	5	None	replace
350	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
351	[BUG]  [BUGGY]  if(length  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  length  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(length  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(length  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
352	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {	  if(count!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	25	None	replace
353	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(count!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	25	None	replace
354	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  bitsCachedSize)  {	  if(count!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	25	None	replace
355	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_NAME)  {  [CE]  cannot  find  symbol  BYTE_NAME  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_NAME)  {	  if(bitsCached!=    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_NAME	43	None	replace
356	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.FIRST_AND_MASKS)  {  [CE]  cannot  find  symbol  FIRST_AND_MASKS  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.FIRST_AND_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.FIRST_AND_MASKS)  {	  if(bitsCached!=    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_AND_MASKS	43	None	replace
357	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsOut.length)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsOut.length)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsOut.length)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
358	[BUG]  [BUGGY]  if(bitsCached  <  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  <  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  <  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
359	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
360	[BUG]  [BUGGY]  if(bitsCachedNextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bitsCachedNextByte  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedNextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedNextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCachedNextByte	64	None	replace
361	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  ||  bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
362	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
363	[BUG]  [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(bitsOut!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
364	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  ')'  expected	13	None	replace
365	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1]);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1]);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  1]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
366	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	replace
367	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	replace
368	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.DEFAULT)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.DEFAULT)  {	  if(bitsCached!=    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	45	None	replace
369	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_STANDARD)  {  [CE]  cannot  find  symbol  BYTE_STANDARD  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.BYTE_STANDARD)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.BYTE_STANDARD)  {	  if(bitsCached!=    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_STANDARD	45	None	replace
370	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.ByteOrder.NAME)  {  [CE]  cannot  find  symbol  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.ByteOrder.NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.ByteOrder.NAME)  {	  if(bitsCached    ==    ByteOrder.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  ByteOrder	56	None	replace
371	[BUG]  [BUGGY]  if(bitsCachedNextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bitsCachedNextByte  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedNextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedNextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCachedNextByte	67	None	replace
372	[BUG]  [BUGGY]  if(bitsCachedCategory  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bitsCachedCategory  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedCategory  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedCategory  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCachedCategory	67	None	replace
373	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	60	None	replace
374	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
375	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
376	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
377	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
378	[BUG]  [BUGGY]  long  count  =  readBits(nextByte);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  long  count  =  readBits(nextByte);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	long  count  =  readBits(nextByte);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
379	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	9	None	replace
380	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	9	None	replace
381	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_OUT)  {  [CE]  cannot  find  symbol  BYTE_OUT  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_OUT)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BYTE_OUT)  {	  if(bitsCached    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_OUT	49	None	replace
382	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_MASKS)  {  [CE]  cannot  find  symbol  BYTE_MASKS  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.BYTE_MASKS)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_MASKS	55	None	replace
383	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	54	None	replace
384	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	6	None	replace
385	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	69	None	replace
386	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.NAME)  {  [CE]  cannot  find  symbol  NAME  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.NAME)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.NAME)  {	  if(bitsOut    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  NAME	34	None	replace
387	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.FIRST_AND_MASKS)  {  [CE]  cannot  find  symbol  FIRST_AND_MASKS  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsOut  ==  ByteOrder.FIRST_AND_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsOut  ==  ByteOrder.FIRST_AND_MASKS)  {	  if(bitsOut    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_AND_MASKS	34	None	replace
388	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_MASK)  {  [CE]  cannot  find  symbol  BYTE_MASK  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.BYTE_MASK)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.BYTE_MASK)  {	  if(bitsCached    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_MASK	31	None	replace
389	[BUG]  [BUGGY]  if(bitsCached  Category  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  Category  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  Category  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCached    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
390	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	46	None	replace
391	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
392	[BUG]  [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
393	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsOut))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsOut))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsOut))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	71	None	replace
394	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  (bitsCachedSize  -  bitsCachedSize))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    (bitsCachedSize    -    count))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	71	None	replace
395	[BUG]  [BUGGY]  if(count  ==  ByteOrder.SEMI_CACHE_SIZE)  {  [CE]  cannot  find  symbol  SEMI_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.SEMI_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.SEMI_CACHE_SIZE)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_CACHE_SIZE	30	None	replace
396	[BUG]  [BUGGY]  if(count  ==  ByteOrder.FIRST_AND_MASKS)  {  [CE]  cannot  find  symbol  FIRST_AND_MASKS  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.FIRST_AND_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.FIRST_AND_MASKS)  {	  if(count    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_AND_MASKS	30	None	replace
397	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)?  nextByte  :  MASKS[count];	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
398	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
399	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  <  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  <  MAXIMUM_CACHE_SIZE)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
400	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  firstByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  firstByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)?  firstByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)?    nextByte    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
401	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	10	None	replace
402	[BUG]  [BUGGY]  if(this.bitsCached!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached!=  ByteOrder.LITTLE_ENDIAN)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	37	None	replace
403	[BUG]  [BUGGY]  if(this.bitsCached  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached  ==  ByteOrder.BYTE_ENDIAN)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	37	None	replace
404	[BUG]  [BUGGY]  if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  this.bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  this.bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(this.bitsCached  ==  ByteOrder.LITTLE_ENDIAN  ||  this.bitsCached  <  =  MAXIMUM_CACHE_SIZE)  {	  if(this.bitsCached    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
405	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	3	None	replace
406	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsOut.length)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsOut.length)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsOut.length)  {	  if(count    <    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
407	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	32	None	replace
408	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS  -  count))&  bitsCachedSize[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS  -  count))&  bitsCachedSize[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (MASKS  -  count))&  bitsCachedSize[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
409	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_MASKS)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_MASKS)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_MASKS)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	1	None	replace
410	[BUG]  [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCached    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	70	None	replace
411	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(count  -  bitsCachedSize))  &  MASKS[count];  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(count  -  bitsCachedSize))  &  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	bitsOut  =(bitsCached  >>  (Math.abs(count  -  bitsCachedSize))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bytesCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	41	None	replace
412	[BUG]  [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	48	None	replace
413	[BUG]  [BUGGY]  if(count  >  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    >=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	23	None	replace
414	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count!=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	26	None	replace
415	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  bitsOut!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count!=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	26	None	replace
416	[BUG]  [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
417	[BUG]  [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  >=  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
418	[BUG]  [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
419	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
420	[BUG]  [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  <  =  ByteOrder.LITTLE_ENDIAN  ||  count  ==  MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
421	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
422	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))&  MASKS[count];  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))&  MASKS[count];	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
423	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
424	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
425	[BUG]  [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsCached!=    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
426	[BUG]  [BUGGY]  if(bitsCached  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCached  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCached  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsCached    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	61	None	replace
427	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MASKS_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	19	None	replace
428	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  return  bitsOut;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	101	101	2	replace	if(bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	33	None	replace
